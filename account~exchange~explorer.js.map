{"version":3,"file":"account~exchange~explorer.2e64af2e34512bdef3d9.js","sources":["webpack:///app/components/Utility/EquivalentValueComponent.jsx","webpack:///app/components/Utility/AssetImage.jsx","webpack:///app/components/Utility/AssetSelector.jsx"],"sourcesContent":["import React from \"react\";\nimport FormattedAsset from \"./FormattedAsset\";\nimport ChainTypes from \"./ChainTypes\";\nimport BindToChainState from \"./BindToChainState\";\nimport AssetWrapper from \"./AssetWrapper\";\nimport utils from \"common/utils\";\nimport {connect} from \"alt-react\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport Translate from \"react-translate-component\";\nimport counterpart from \"counterpart\";\nimport ReactTooltip from \"react-tooltip\";\nimport MarketStatsCheck from \"./MarketStatsCheck\";\nimport MarketUtils from \"common/market_utils\";\n\n/**\n *  Given an asset amount, displays the equivalent value in baseAsset if possible\n *\n *  Expects three properties\n *  -'toAsset' which should be a asset id\n *  -'fromAsset' which is the asset id of the original asset amount\n *  -'amount' which is the amount to convert\n *  -'fullPrecision' boolean to tell if the amount uses the full precision of the asset\n */\n\nclass ValueComponent extends MarketStatsCheck {\n    static defaultProps = {\n        fullPrecision: true,\n        noDecimals: false,\n        fullDecimals: false,\n        hide_asset: false\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        ReactTooltip.rebuild();\n    }\n\n    shouldComponentUpdate(np) {\n        return (\n            super.shouldComponentUpdate(np) ||\n            !utils.are_equal_shallow(np.pulsate, this.props.pulsate) ||\n            np.toAsset !== this.props.toAsset ||\n            np.fromAsset !== this.props.fromAsset ||\n            np.amount !== this.props.amount\n        );\n    }\n\n    getValue() {\n        let {\n            amount,\n            toAsset,\n            fromAsset,\n            fullPrecision,\n            allMarketStats,\n            coreAsset\n        } = this.props;\n        return MarketUtils.convertValue(\n            amount,\n            toAsset,\n            fromAsset,\n            allMarketStats,\n            coreAsset,\n            fullPrecision\n        );\n    }\n\n    render() {\n        let {amount, toAsset, fromAsset, fullPrecision, ...others} = this.props;\n\n        let toID = toAsset.get(\"id\");\n        let toSymbol = toAsset.get(\"symbol\");\n\n        if (!fullPrecision) {\n            amount = utils.get_asset_amount(amount, fromAsset);\n        }\n\n        let eqValue = this.getValue();\n\n        if (!eqValue && eqValue !== 0) {\n            return (\n                <div\n                    className=\"tooltip inline-block\"\n                    data-place=\"bottom\"\n                    data-tip={counterpart.translate(\"tooltip.no_price\")}\n                    style={{fontSize: \"0.9rem\"}}\n                >\n                    <Translate content=\"account.no_price\" />\n                </div>\n            );\n        }\n\n        return (\n            <FormattedAsset\n                noPrefix\n                amount={eqValue}\n                asset={toID}\n                decimalOffset={\n                    toSymbol.indexOf(\"BTC\") !== -1\n                        ? 4\n                        : this.props.fullDecimals\n                            ? 0\n                            : this.props.noDecimals\n                                ? toAsset.get(\"precision\")\n                                : toAsset.get(\"precision\") - 2\n                }\n                {...others}\n            />\n        );\n    }\n}\nValueComponent = AssetWrapper(ValueComponent, {\n    propNames: [\"toAsset\", \"fromAsset\", \"coreAsset\"],\n    defaultProps: {\n        toAsset: \"1.3.0\",\n        coreAsset: \"1.3.0\"\n    }\n});\n\nclass EquivalentValueComponent extends React.Component {\n    render() {\n        let {refCallback, ...others} = this.props;\n\n        return <ValueComponent {...others} ref={refCallback} />;\n    }\n}\n\nEquivalentValueComponent = connect(\n    EquivalentValueComponent,\n    {\n        listenTo() {\n            return [MarketsStore];\n        },\n        getProps() {\n            return {\n                allMarketStats: MarketsStore.getState().allMarketStats\n            };\n        }\n    }\n);\n\nclass BalanceValueComponent extends React.Component {\n    static propTypes = {\n        balance: ChainTypes.ChainObject.isRequired\n    };\n\n    render() {\n        const {balance, ...others} = this.props;\n        const isBalanceObject = !!balance.getIn([\"balance\", \"amount\"]);\n\n        let amount = Number(\n            isBalanceObject\n                ? balance.getIn([\"balance\", \"amount\"])\n                : balance.get(\"balance\")\n        );\n        let fromAsset = isBalanceObject\n            ? balance.getIn([\"balance\", \"asset_id\"])\n            : balance.get(\"asset_type\");\n        if (isNaN(amount)) return <span>--</span>;\n        return (\n            <EquivalentValueComponent\n                amount={amount}\n                fromAsset={fromAsset}\n                noDecimals={true}\n                {...others}\n            />\n        );\n    }\n}\nBalanceValueComponent = BindToChainState(BalanceValueComponent, {\n    keep_updating: true\n});\nexport {EquivalentValueComponent, BalanceValueComponent};\n","import React from \"react\";\nimport AssetWrapper from \"./AssetWrapper\";\nimport PropTypes from \"prop-types\";\n\nclass AssetImage extends React.Component {\n    static propTypes = {\n        replaceNoneToBts: PropTypes.bool,\n        maxWidth: PropTypes.number\n    };\n\n    static defaultProps = {\n        replaceNoneToBts: true,\n        maxWidth: 20\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imgError: false\n        };\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            this.props.asset !== np.asset ||\n            this.props.maxWidth !== np.maxWidth ||\n            this.props.whiteList !== np.whiteList ||\n            this.state.imgError !== ns.imgError\n        );\n    }\n\n    _onError(imgName) {\n        if (!this.state.imgError) {\n            if (this.props.replaceNoneToBts)\n                this.refs[\n                    imgName.toLowerCase()\n                ].src = `${__BASE_URL__}asset-symbols/bts.png`;\n            else this.refs[imgName.toLowerCase()].remove();\n            this.setState({\n                imgError: true\n            });\n        }\n    }\n\n    render() {\n        let {asset} = this.props;\n\n        function getImageName(asset) {\n            let symbol = asset.get(\"symbol\");\n            return symbol;\n            // if (symbol === \"OPEN.BTC\" || symbol === \"GDEX.BTC\") return symbol;\n            // if (symbol.startsWith(\"ESCROW.\")) return symbol;\n            // let imgName = asset.get(\"symbol\").split(\".\");\n            //return imgName.length === 2 ? imgName[1] : imgName[0];\n        }\n\n        const imgName = getImageName(asset);\n\n        return (\n            <img\n                ref={imgName.toLowerCase()}\n                className=\"column-hide-small\"\n                onError={this._onError.bind(this, imgName)}\n                style={{maxWidth: this.props.maxWidth, marginRight: 5}}\n                src={`${__BASE_URL__}asset-symbols/${imgName.toLowerCase()}.png`}\n            />\n        );\n    }\n}\n\nAssetImage = AssetWrapper(AssetImage);\n\nexport default class AssetImageWrapper extends React.Component {\n    render() {\n        return <AssetImage {...this.props} asset={this.props.name} />;\n    }\n}\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport counterpart from \"counterpart\";\nimport FloatingDropdown from \"./FloatingDropdown\";\nimport FormattedAsset from \"./FormattedAsset\";\nimport Immutable from \"immutable\";\nimport classnames from \"classnames\";\nimport AssetWrapper from \"./AssetWrapper\";\nimport PropTypes from \"prop-types\";\n\nclass AssetDropdown extends React.Component {\n    static propTypes = {\n        value: PropTypes.string, // asset id\n        onChange: PropTypes.func\n    };\n\n    render() {\n        if (this.props.assets.length === 0 || !this.props.value) return null;\n        return (\n            <FloatingDropdown\n                entries={this.props.assets\n                    .map(a => a && a.get(\"symbol\"))\n                    .filter(a => !!a)}\n                values={this.props.assets.reduce((map, a) => {\n                    if (a && a.get(\"symbol\")) map[a.get(\"symbol\")] = a;\n                    return map;\n                }, {})}\n                singleEntry={\n                    this.props.assets[0] ? (\n                        <FormattedAsset\n                            asset={this.props.assets[0].get(\"id\")}\n                            amount={0}\n                            hide_amount={true}\n                        />\n                    ) : null\n                }\n                value={\"\"}\n                onChange={this.props.onChange}\n            />\n        );\n    }\n}\n\nAssetDropdown = AssetWrapper(AssetDropdown, {asList: true});\n\n/**\n * @brief Allows the user to enter an account by name or #ID\n *\n * This component is designed to be stateless as possible.  It's primary responsbility is to\n * manage the layout of data and to filter the user input.\n *\n */\n\nclass AssetSelector extends React.Component {\n    static propTypes = {\n        label: PropTypes.string, // a translation key for the label\n        error: PropTypes.string, // the error message override\n        placeholder: PropTypes.string, // the placeholder text to be displayed when there is no user_input\n        onChange: PropTypes.func, // a method to be called any time user input changes\n        onFound: PropTypes.func, // a method to be called when existing account is selected\n        assetInput: PropTypes.string, // the current value of the account selector, the string the user enters\n        asset: ChainTypes.ChainAsset, // account object retrieved via BindToChainState decorator (not input)\n        tabIndex: PropTypes.number, // tabindex property to be passed to input tag\n        disableActionButton: PropTypes.bool // use it if you need to disable action button\n    };\n\n    static defaultProps = {\n        disabled: false\n    };\n\n    // can be used in parent component: this.refs.asset_selector.getAsset()\n    getAsset() {\n        return this.props.asset;\n    }\n\n    getError(input = this.props.assetInput) {\n        let error = this.props.error;\n        if (!error && input && !this.getNameType(input))\n            error = counterpart.translate(\"explorer.asset.invalid\", {\n                name: input\n            });\n        return error;\n    }\n\n    getNameType(value) {\n        if (!value) return null;\n        // if(value[0] === \"#\" && utils.is_object_id(\"1.2.\" + value.substring(1))) return \"id\";\n        if (!ChainValidation.is_valid_symbol_error(value, true))\n            return \"symbol\";\n        return null;\n    }\n\n    onInputChanged(event) {\n        let value = event.target.value\n            .trim()\n            .substr(0, 16)\n            .toUpperCase(); //.toLowerCase();\n        if (this.props.onChange && value !== this.props.assetInput)\n            this.props.onChange(value);\n    }\n\n    onKeyDown(event) {\n        if (event.keyCode === 13) {\n            this.onFound(event);\n            this.onAction(event);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.onFound && this.props.asset)\n            this.props.onFound(this.props.asset);\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (this.props.onFound && newProps.asset !== this.props.asset)\n            this.props.onFound(newProps.asset);\n    }\n\n    onFound(e) {\n        e.preventDefault();\n        if (\n            this.props.onFound &&\n            !this.getError() &&\n            !this.props.disableActionButton\n        ) {\n            if (this.props.asset) this.props.onFound(this.props.asset);\n        }\n    }\n\n    onAssetSelect(selected_asset) {\n        if (selected_asset) {\n            this.props.onFound(selected_asset);\n            this.props.onChange(selected_asset.get(\"symbol\"));\n        }\n    }\n\n    onAction(e) {\n        e.preventDefault();\n        if (\n            this.props.onAction &&\n            !this.getError() &&\n            !this.props.disableActionButton\n        ) {\n            if (this.props.asset) this.props.onAction(this.props.asset);\n        }\n    }\n\n    render() {\n        let {disabled, noLabel} = this.props;\n        let error = this.getError();\n        let lookup_display;\n        if (!disabled) {\n            if (this.props.asset) {\n                lookup_display = this.props.asset.get(\"symbol\");\n            } else if (!error && this.props.assetInput) {\n                error = counterpart.translate(\"explorer.asset.not_found\", {\n                    name: this.props.assetInput\n                });\n            }\n        }\n\n        let action_class = classnames(\"button\", {\n            disabled:\n                !this.props.asset || error || this.props.disableActionButton\n        });\n\n        return (\n            <div className=\"asset-selector\" style={this.props.style}>\n                <div>\n                    <div className=\"header-area\">\n                        {error || noLabel ? null : (\n                            <label className=\"right-label\">\n                                &nbsp; <span>{lookup_display}</span>\n                            </label>\n                        )}\n                        <Translate\n                            component=\"label\"\n                            content={this.props.label}\n                        />\n                    </div>\n                    <div className=\"input-area\">\n                        <div className=\"inline-label input-wrapper\">\n                            <input\n                                style={this.props.inputStyle}\n                                disabled={this.props.disabled}\n                                type=\"text\"\n                                value={this.props.assetInput || \"\"}\n                                placeholder={\n                                    this.props.placeholder ||\n                                    counterpart.translate(\n                                        \"explorer.assets.symbol\"\n                                    )\n                                }\n                                ref=\"user_input\"\n                                onChange={this.onInputChanged.bind(this)}\n                                onKeyDown={this.onKeyDown.bind(this)}\n                                tabIndex={this.props.tabIndex}\n                            />\n                            <div className=\"form-label select floating-dropdown\">\n                                {this.props.asset ? (\n                                    <AssetDropdown\n                                        ref={this.props.refCallback}\n                                        value={this.props.asset.get(\"symbol\")}\n                                        assets={Immutable.List(\n                                            this.props.assets\n                                        )}\n                                        onChange={this.onAssetSelect.bind(this)}\n                                    />\n                                ) : null}\n                            </div>\n                            {this.props.children}\n                            {this.props.onAction ? (\n                                <button\n                                    className={action_class}\n                                    onClick={this.onAction.bind(this)}\n                                >\n                                    <Translate\n                                        content={this.props.action_label}\n                                    />\n                                </button>\n                            ) : null}\n                        </div>\n                    </div>\n                    <div className=\"error-area\" style={{paddingBottom: \"10px\"}}>\n                        <span style={{wordBreak: \"break-all\"}}>{error}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default BindToChainState(AssetSelector);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;;;AAQA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAQA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAgBA;;;;AAvFA;AACA;AADA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAuFA;AACA;AACA;AACA;AACA;AAFA;AAFA;AACA;AAOA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;;;AALA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAWA;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAOA;;;;AA1BA;AACA;AADA;AAEA;AADA;AACA;AA0BA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;AC3KA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AAKA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;AAhEA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAFA;AACA;AACA;AA2DA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AAOA;AACA;AAlBA;AAqBA;;;;AA9BA;AACA;AADA;AAEA;AACA;AAFA;AACA;AACA;AA8BA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AAIA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;;;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAKA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAFA;AANA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAdA;AAgBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AANA;AAFA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAJA;AA/BA;AADA;AA2CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAvDA;AADA;AA8DA;;;;AAhLA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAcA;AADA;AACA;AAoKA;;;;A","sourceRoot":""}