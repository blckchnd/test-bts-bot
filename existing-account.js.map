{"version":3,"file":"existing-account.91554fa2d19cd74cb982.js","sources":["webpack:///app/components/Wallet/ExistingAccount.jsx","webpack:///app/components/Wallet/BalanceClaimActive.jsx","webpack:///app/components/Wallet/BalanceClaimSelector.jsx","webpack:///app/components/Forms/MyAccounts.jsx","webpack:///app/components/Wallet/Brainkey.jsx","webpack:///app/actions/BrainkeyActions.js","webpack:///app/stores/BrainkeyStore.js","webpack:///app/components/Dashboard/AccountCard.jsx","webpack:///app/components/Wallet/ImportKeys.jsx","webpack:///app/components/Wallet/BalanceClaimAssetTotal.jsx","webpack:///app/stores/ImportKeysStore.js","webpack:///app/lib/chain/GenesisFilter.js","webpack:///./app/assets/bts_genesiskeys_bloom.dat","webpack:///./app/components/Wallet/ImportKeys.scss?487b"],"sourcesContent":["import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"alt-react\";\nimport WalletManagerStore from \"stores/WalletManagerStore\";\nimport BalanceClaimActive from \"./BalanceClaimActive\";\nimport Translate from \"react-translate-component\";\nimport {Switch, Route} from \"react-router-dom\";\nimport Brainkey from \"./Brainkey\";\nimport ImportKeys from \"./ImportKeys\";\nimport {BackupRestore} from \"./Backup\";\nimport {getWalletName} from \"branding\";\n\nconst connectObject = {\n    listenTo() {\n        return [WalletManagerStore];\n    },\n    getProps() {\n        const wallet = WalletManagerStore.getState();\n        return {wallet};\n    }\n};\n\nclass ExistingAccount extends Component {\n    render() {\n        const has_wallet = this.props.wallet.wallet_names.count() != 0;\n        return (\n            <div className=\"grid-container\">\n                <div className=\"grid-content\">\n                    <div className=\"content-block center-content\">\n                        <div className=\"page-header\">\n                            <h1>\n                                <Translate\n                                    content=\"account.welcome\"\n                                    wallet_name={getWalletName()}\n                                />\n                            </h1>\n                            {!has_wallet ? (\n                                <h3>\n                                    <Translate content=\"wallet.create_wallet_backup\" />\n                                </h3>\n                            ) : (\n                                <h3>\n                                    <Translate content=\"wallet.setup_wallet\" />\n                                </h3>\n                            )}\n                        </div>\n                        <div className=\"content-block\">\n                            <Switch>\n                                <Route\n                                    exact\n                                    path=\"/existing-account\"\n                                    component={BackupRestore}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/existing-account/import-backup\"\n                                    component={ExistingAccountOptions}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/existing-account/import-keys\"\n                                    component={ImportKeys}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/existing-account/brainkey\"\n                                    component={Brainkey}\n                                />\n                                <Route\n                                    exact\n                                    path=\"/existing-account/balance-claim\"\n                                    component={BalanceClaimActive}\n                                />\n                            </Switch>\n                            {this.props.children}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nExistingAccount = connect(\n    ExistingAccount,\n    connectObject\n);\n\nclass ExistingAccountOptions extends Component {\n    render() {\n        const has_wallet = this.props.wallet.wallet_names.count() != 0;\n        return (\n            <span>\n                {!has_wallet ? (\n                    <div>\n                        <Link to=\"existing-account/import-backup\">\n                            <Translate\n                                content=\"wallet.import_backup\"\n                                wallet_name={getWalletName()}\n                            />\n                        </Link>\n                        <br />\n                        <br />\n                        <Link to=\"existing-account/import-keys\">\n                            <Translate content=\"wallet.import_bts1\" />\n                        </Link>\n                        <br />\n                        <br />\n                        <Link to=\"existing-account/import-keys\">\n                            <Translate content=\"wallet.create_wallet\" />\n                        </Link>\n                        <br />\n                        <hr />\n                    </div>\n                ) : null}\n\n                {!has_wallet ? null : <BalanceClaimActive />}\n\n                {has_wallet ? (\n                    <span>\n                        <Link to=\"dashboard\">\n                            <div className=\"button outline\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"header.dashboard\"\n                                />\n                            </div>\n                        </Link>\n                        <Link to=\"wallet\">\n                            <div className=\"button outline\">\n                                <Translate content=\"settings.wallets\" />\n                            </div>\n                        </Link>\n                    </span>\n                ) : null}\n            </span>\n        );\n    }\n}\nExistingAccountOptions = connect(\n    ExistingAccountOptions,\n    connectObject\n);\n\nexport default ExistingAccount;\nexport {ExistingAccountOptions};\n","import React, {Component} from \"react\";\nimport {connect} from \"alt-react\";\nimport Immutable from \"immutable\";\nimport cname from \"classnames\";\nimport notify from \"actions/NotificationActions\";\n\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport PrivateKeyStore from \"stores/PrivateKeyStore\";\nimport AccountRefsStore from \"stores/AccountRefsStore\";\nimport BalanceClaimActiveStore from \"stores/BalanceClaimActiveStore\";\nimport BalanceClaimActiveActions from \"actions/BalanceClaimActiveActions\";\nimport BalanceClaimSelector from \"components/Wallet/BalanceClaimSelector\";\nimport WalletActions from \"actions/WalletActions\";\nimport MyAccounts from \"components/Forms/MyAccounts\";\nimport Translate from \"react-translate-component\";\n\nclass BalanceClaimActive extends Component {\n    componentWillMount() {\n        let keys = PrivateKeyStore.getState().keys;\n        let keySeq = keys.keySeq();\n        BalanceClaimActiveActions.setPubkeys(keySeq);\n        this.existing_keys = keySeq;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let keys = PrivateKeyStore.getState().keys;\n        let keySeq = keys.keySeq();\n        if (!keySeq.equals(this.existing_keys)) {\n            this.existing_keys = keySeq;\n            BalanceClaimActiveActions.setPubkeys(keySeq);\n        }\n    }\n\n    render() {\n        if (!this.props.account_refs.size) {\n            return (\n                <div>\n                    <h5>\n                        <Translate content=\"wallet.no_balance\" />\n                    </h5>\n                </div>\n            );\n        }\n\n        if (this.props.loading) {\n            return (\n                <div>\n                    <br />\n                    <h5>\n                        <Translate content=\"wallet.loading_balances\" />&hellip;\n                    </h5>\n                    <br />\n                    <LoadingIndicator type=\"three-bounce\" />\n                </div>\n            );\n        }\n\n        if (!this.props.balances || !this.props.balances.size) {\n            return (\n                <div>\n                    <br />\n                    <h5>\n                        <Translate content=\"wallet.no_balance\" />\n                    </h5>\n                </div>\n            );\n        }\n\n        let import_ready =\n            this.props.selected_balances.size && this.props.claim_account_name;\n        let claim_balance_label = import_ready\n            ? ` (${this.props.claim_account_name})`\n            : null;\n\n        return (\n            <div>\n                <div className=\"content-block center-content\">\n                    <h3 className=\"no-border-bottom\">\n                        <Translate content=\"wallet.claim_balances\" />\n                    </h3>\n                </div>\n                <div className=\"grid-block vertical\">\n                    <div\n                        className=\"grid-content\"\n                        style={{overflowY: \"hidden !important\"}}\n                    >\n                        <div className=\"full-width-content center-content\">\n                            <MyAccounts\n                                key={this.props.balances}\n                                accounts={Immutable.List(\n                                    this.props.account_refs\n                                )}\n                                onChange={this.onClaimAccountChange.bind(this)}\n                            />\n                        </div>\n                        <br />\n                    </div>\n                    <br />\n                    <BalanceClaimSelector />\n                </div>\n                <br />\n                <br />\n                <div\n                    className={cname(\"button success\", {\n                        disabled: !import_ready\n                    })}\n                    onClick={this.onClaimBalance.bind(this)}\n                >\n                    <Translate content=\"wallet.claim_balance\" />\n                    {claim_balance_label}\n                </div>\n                <div className=\"button cancel\" onClick={this.onBack.bind(this)}>\n                    <Translate content=\"wallet.cancel\" />\n                </div>\n            </div>\n        );\n    }\n\n    onBack(e) {\n        e.preventDefault();\n        window.history.back();\n    }\n\n    onClaimAccountChange(claim_account_name) {\n        BalanceClaimActiveActions.claimAccountChange(claim_account_name);\n    }\n\n    onClaimBalance() {\n        WalletActions.importBalance(\n            this.props.claim_account_name,\n            this.props.selected_balances,\n            true //broadcast\n        ).catch(error => {\n            console.error(\"claimBalance\", error);\n            let message = error;\n            try {\n                message = error.data.message;\n            } catch (e) {}\n            notify.error(\"Error claiming balance: \" + message);\n            throw error;\n        });\n    }\n}\n\nBalanceClaimActive = connect(BalanceClaimActive, {\n    listenTo() {\n        return [BalanceClaimActiveStore, AccountRefsStore, PrivateKeyStore];\n    },\n    getProps() {\n        let props = BalanceClaimActiveStore.getState();\n        props.account_refs = AccountRefsStore.getAccountRefs();\n        return props;\n    }\n});\n\nexport default BalanceClaimActive;\n","import React, {Component} from \"react\";\nimport {connect} from \"alt-react\";\nimport Immutable from \"immutable\";\n\nimport PrivateKeyStore from \"stores/PrivateKeyStore\";\nimport BalanceClaimActiveStore from \"stores/BalanceClaimActiveStore\";\nimport BalanceClaimActiveActions from \"actions/BalanceClaimActiveActions\";\nimport FormattedAsset from \"components/Utility/FormattedAsset\";\nimport Translate from \"react-translate-component\";\n\nclass BalanceClaimSelector extends Component {\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.claim_account_name)\n            this.onClaimAccount(\n                nextProps.claim_account_name,\n                nextProps.checked\n            );\n    }\n\n    render() {\n        if (\n            this.props.balances === undefined ||\n            !this.props.total_by_account_asset.size\n        )\n            return <div />;\n\n        let index = -1;\n        return (\n            <div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>{/* C H E C K B O X */}</th>\n                            <th style={{textAlign: \"center\"}}>\n                                <Translate content=\"wallet.unclaimed\" />\n                            </th>\n                            <th style={{textAlign: \"center\"}}>\n                                <Translate content=\"wallet.unclaimed_vesting\" />\n                            </th>\n                            <th style={{textAlign: \"center\"}}>\n                                <Translate content=\"account.name\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.total_by_account_asset\n                            .map((r, name_asset) => (\n                                <tr key={++index}>\n                                    <td>\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={\n                                                !!this.props.checked.get(index)\n                                            }\n                                            onChange={this.onCheckbox.bind(\n                                                this,\n                                                index,\n                                                r.balances\n                                            )}\n                                        />\n                                    </td>\n                                    <td style={{textAlign: \"right\"}}>\n                                        {r.unclaimed ? (\n                                            <FormattedAsset\n                                                color=\"info\"\n                                                amount={r.unclaimed}\n                                                asset={name_asset.get(1)}\n                                            />\n                                        ) : null}\n                                    </td>\n                                    <td style={{textAlign: \"right\"}}>\n                                        {r.vesting.unclaimed ? (\n                                            <div>\n                                                <FormattedAsset\n                                                    color=\"info\"\n                                                    amount={r.vesting.unclaimed}\n                                                    hide_asset={true}\n                                                    asset={name_asset.get(1)}\n                                                />\n                                                <span> of </span>\n                                                <FormattedAsset\n                                                    color=\"info\"\n                                                    amount={r.vesting.total}\n                                                    asset={name_asset.get(1)}\n                                                />\n                                            </div>\n                                        ) : null}\n                                    </td>\n                                    <td> {name_asset.get(0)} </td>\n                                </tr>\n                            ))\n                            .toArray()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n    onCheckbox(index, balances) {\n        let checked = this.props.checked;\n        if (checked.get(index)) {\n            checked = checked.delete(index);\n        } else {\n            checked = checked.set(index, balances);\n        }\n\n        BalanceClaimActiveActions.setSelectedBalanceClaims(checked);\n    }\n\n    onClaimAccount(claim_account_name, checked) {\n        // A U T O  S E L E C T  A C C O U N T S\n        // only if nothing is selected (play it safe)\n        if (checked.size) return;\n        let index = -1;\n        this.props.total_by_account_asset.forEach((v, k) => {\n            index++;\n            let name = k.get(0);\n            if (name === claim_account_name) {\n                if (v.unclaimed || v.vesting.unclaimed)\n                    checked = checked.set(index, v.balances);\n            }\n        });\n        if (checked.size)\n            BalanceClaimActiveActions.setSelectedBalanceClaims(checked);\n    }\n}\n\nBalanceClaimSelector = connect(BalanceClaimSelector, {\n    listenTo() {\n        return [BalanceClaimActiveStore];\n    },\n    getProps() {\n        let props = BalanceClaimActiveStore.getState();\n        let {balances, address_to_pubkey} = props;\n        let private_keys = PrivateKeyStore.getState().keys;\n        let groupCountMap = Immutable.Map().asMutable();\n        let groupCount = (group, distinct) => {\n            let set = groupCountMap.get(group);\n            if (!set) {\n                set = Immutable.Set().asMutable();\n                groupCountMap.set(group, set);\n            }\n            set.add(distinct);\n            return set.size;\n        };\n        if (balances)\n            props.total_by_account_asset = balances\n                .groupBy(v => {\n                    // K E Y S\n                    let names = \"\";\n                    let pubkey = address_to_pubkey.get(v.owner);\n                    let private_key_object = private_keys.get(pubkey);\n                    // Imported Account Names (just a visual aid, helps to auto select a real account)\n                    if (\n                        private_key_object &&\n                        private_key_object.import_account_names\n                    )\n                        names = private_key_object.import_account_names.join(\n                            \", \"\n                        );\n\n                    // Signing is very slow, further divide the groups based on the number of signatures required\n                    let batch_number = Math.ceil(\n                        groupCount(\n                            Immutable.List([names, v.balance.asset_id]),\n                            v.owner\n                        ) / 60\n                    );\n                    let name_asset_key = Immutable.List([\n                        names,\n                        v.balance.asset_id,\n                        batch_number\n                    ]);\n                    return name_asset_key;\n                })\n                .map(l =>\n                    l.reduce(\n                        (r, v) => {\n                            // V A L U E S\n                            v.public_key_string = address_to_pubkey.get(\n                                v.owner\n                            );\n                            r.balances = r.balances.add(v);\n                            if (v.vested_balance != undefined) {\n                                r.vesting.unclaimed += Number(\n                                    v.vested_balance.amount\n                                );\n                                r.vesting.total += Number(v.balance.amount);\n                            } else {\n                                r.unclaimed += Number(v.balance.amount);\n                            }\n                            return r;\n                        },\n                        {\n                            unclaimed: 0,\n                            vesting: {unclaimed: 0, total: 0},\n                            balances: Immutable.Set()\n                        }\n                    )\n                )\n                .sortBy(k => k);\n        return props;\n    }\n});\n\nexport default BalanceClaimSelector;\n","import React, {Component} from \"react\";\nimport AccountStore from \"stores/AccountStore\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport AccountSelect from \"components/Forms/AccountSelect\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport PropTypes from \"prop-types\";\n\nclass MyAccounts extends Component {\n    static propTypes = {\n        accounts: ChainTypes.ChainAccountsList.isRequired,\n        onChange: PropTypes.func.isRequired\n    };\n\n    render() {\n        var account_names = this.props.accounts\n            .filter(account => !!account)\n            .filter(account => AccountStore.isMyAccount(account))\n            .map(account => account.get(\"name\"))\n            .sort();\n\n        return (\n            <span>\n                <AccountSelect\n                    onChange={this.onAccountSelect.bind(this)}\n                    account_names={account_names}\n                    center={true}\n                />\n            </span>\n        );\n    }\n\n    onAccountSelect(account_name) {\n        this.props.onChange(account_name);\n    }\n}\n\nexport default BindToChainState(MyAccounts);\n","import React, {Component} from \"react\";\nimport {connect} from \"alt-react\";\nimport Immutable from \"immutable\";\nimport cname from \"classnames\";\nimport BrainkeyActions from \"actions/BrainkeyActions\";\nimport BrainkeyStoreFactory from \"stores/BrainkeyStore\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BrainkeyInput from \"components/Wallet/BrainkeyInput\";\nimport {toPairs} from \"lodash-es\";\nimport Translate from \"react-translate-component\";\nimport AccountCard from \"components/Dashboard/AccountCard\";\n\nconst connectObject = {\n    listenTo() {\n        return [BrainkeyStoreFactory.getInstance(\"wmc\")];\n    },\n    getProps() {\n        return BrainkeyStoreFactory.getInstance(\"wmc\").getState();\n    }\n};\n\nclass Brainkey extends Component {\n    componentWillUnmount() {\n        BrainkeyStoreFactory.closeInstance(\"wmc\");\n    }\n    render() {\n        return (\n            <span>\n                <h3>\n                    <Translate content=\"wallet.brainkey\" />\n                </h3>\n                <BrainkeyInputAccept>\n                    <ViewBrainkey />\n                </BrainkeyInputAccept>\n            </span>\n        );\n    }\n}\nBrainkey = connect(\n    Brainkey,\n    connectObject\n);\nexport default Brainkey;\n\nclass ViewBrainkey extends Component {\n    render() {\n        let short_brnkey = this.props.brnkey.substring(0, 10);\n        // console.log(\"this.props.account_ids.toArray()\", this.props.account_ids.toArray())\n        return (\n            <span>\n                <div>\n                    <span className=\"\">{short_brnkey}</span>&hellip;\n                </div>\n                <p />\n                {this.props.account_ids.size ? (\n                    <BrainkeyAccounts\n                        accounts={Immutable.List(\n                            this.props.account_ids.toArray()\n                        )}\n                    />\n                ) : (\n                    <h5>\n                        <Translate content=\"wallet.no_accounts\" />\n                    </h5>\n                )}\n            </span>\n        );\n    }\n}\nViewBrainkey = connect(\n    ViewBrainkey,\n    connectObject\n);\n\nclass BrainkeyAccounts extends React.Component {\n    static propTypes = {\n        accounts: ChainTypes.ChainAccountsList.isRequired\n    };\n\n    render() {\n        let rows = toPairs(this.props.accounts)\n            .filter(account => !!account[1])\n            .map(account => account[1].get(\"name\"))\n            .sort()\n            .map(name => <AccountCard key={name} account={name} />);\n        return <span>{rows}</span>;\n    }\n}\nBrainkeyAccounts = BindToChainState(BrainkeyAccounts);\n\nexport class BrainkeyInputAccept extends Component {\n    constructor() {\n        super();\n        this.state = {brnkey: \"\", accept: false};\n    }\n\n    render() {\n        if (this.state.accept) return <span>{this.props.children}</span>;\n\n        let ready = this.state.brnkey && this.state.brnkey !== \"\";\n        return (\n            <span className=\"grid-container\">\n                <div>\n                    <BrainkeyInput\n                        onChange={this.onBrainkeyChange.bind(this)}\n                    />\n                </div>\n                <div\n                    className={cname(\"button success\", {disabled: !ready})}\n                    onClick={this.onAccept.bind(this)}\n                >\n                    <Translate content=\"wallet.accept\" />\n                </div>\n            </span>\n        );\n    }\n\n    onBrainkeyChange(brnkey) {\n        this.setState({brnkey});\n    }\n\n    onAccept() {\n        this.setState({accept: true});\n        BrainkeyActions.setBrainkey(this.state.brnkey);\n    }\n}\n\n// <div onClick={this.onLookupAccounts.bind(this)} className=\"button success\">Lookup Accounts</div>\n// onLookupAccounts() {\n//\n// }\n","import alt from \"alt-instance\";\n\nclass BrainkeyActions {\n    setBrainkey(brnkey) {\n        return brnkey;\n    }\n}\n\nvar BrainkeyActionsWrapped = alt.createActions(BrainkeyActions);\nexport default BrainkeyActionsWrapped;\n","import alt from \"alt-instance\";\nimport Immutable from \"immutable\";\nimport {ChainStore, key} from \"bitsharesjs\";\nimport BaseStore from \"stores/BaseStore\";\nimport BrainkeyActions from \"actions/BrainkeyActions\";\n\n/** Each instance supports a single brainkey. */\nexport default class BrainkeyStoreFactory {\n    static instances = new Map();\n    /** This may be called multiple times for the same <b>name</b>.  When done,\n        (componentWillUnmount) make sure to call this.closeInstance()\n    */\n    static getInstance(name) {\n        var instance = BrainkeyStoreFactory.instances.get(name);\n        if (!instance) {\n            instance = alt.createStore(BrainkeyStoreImpl, \"BrainkeyStore\");\n            BrainkeyStoreFactory.instances.set(name, instance);\n        }\n        var subscribed_instance_key = name + \" subscribed_instance\";\n        if (!BrainkeyStoreFactory.instances.get(subscribed_instance_key)) {\n            var subscribed_instance = instance.chainStoreUpdate.bind(instance);\n            ChainStore.subscribe(subscribed_instance);\n            BrainkeyStoreFactory.instances.set(\n                subscribed_instance_key,\n                subscribed_instance\n            );\n        }\n        return instance;\n    }\n    static closeInstance(name) {\n        var instance = BrainkeyStoreFactory.instances.get(name);\n        if (!instance) throw new Error(\"unknown instance \" + name);\n        var subscribed_instance_key = name + \" subscribed_instance\";\n        var subscribed_instance = BrainkeyStoreFactory.instances.get(\n            subscribed_instance_key\n        );\n        BrainkeyStoreFactory.instances.delete(subscribed_instance_key);\n        ChainStore.unsubscribe(subscribed_instance);\n        instance.clearCache();\n    }\n}\n\n/** Derived keys may be unassigned from accounts therefore we must define a\n    fixed block of derivied keys then monitor the entire block.\n*/\nvar DERIVIED_BRAINKEY_POOL_SIZE = 10;\n\nclass BrainkeyStoreImpl extends BaseStore {\n    constructor() {\n        super();\n        this.clearCache();\n        this.bindListeners({\n            onSetBrainkey: BrainkeyActions.setBrainkey\n        });\n        this._export(\"inSync\", \"chainStoreUpdate\", \"clearCache\");\n    }\n\n    // chainStoreUnsubscribe() {\n    //     try{\n    //         ChainStore.unsubscribe(this.chainStoreUpdate)\n    //     }catch(e1) {console.log(\"unsub 1 fail\");\n    //         try{\n    //             ChainStore.unsubscribe(this.chainStoreUpdate.bind(this))\n    //         }catch(e2) {console.log(\"unsub 1 fail\")}\n    //     }\n    // }\n\n    clearCache() {\n        this.state = {\n            brnkey: \"\",\n            account_ids: Immutable.Set()\n        };\n        this.derived_keys = new Array();\n        // Compared with ChainStore.account_ids_by_key\n        this.account_ids_by_key = null;\n    }\n\n    /** Saves the brainkey and begins the lookup for derived account referneces */\n    onSetBrainkey(brnkey) {\n        this.clearCache();\n        this.setState({brnkey});\n        this.deriveKeys(brnkey);\n        this.chainStoreUpdate();\n    }\n\n    /** @return <b>true</b> when all derivied account references are either\n        found or known not to exist.\n    */\n    inSync() {\n        this.derived_keys.forEach(derived_key => {\n            if (isPendingFromChain(derived_key)) return false;\n        });\n        return true;\n    }\n\n    chainStoreUpdate() {\n        if (!this.derived_keys.length) return;\n        if (this.account_ids_by_key === ChainStore.account_ids_by_key) return;\n        this.account_ids_by_key = ChainStore.account_ids_by_key;\n        this.updateAccountIds();\n    }\n\n    deriveKeys(brnkey = this.state.brnkey) {\n        var sequence = this.derived_keys.length; // next sequence (starting with 0)\n        var private_key = key.get_brainPrivateKey(brnkey, sequence);\n        var derived_key = derivedKeyStruct(private_key);\n        this.derived_keys.push(derived_key);\n        if (this.derived_keys.length < DERIVIED_BRAINKEY_POOL_SIZE)\n            this.deriveKeys(brnkey);\n    }\n\n    updateAccountIds() {\n        var new_account_ids = Immutable.Set().withMutations(new_ids => {\n            var updatePubkey = public_string => {\n                var chain_account_ids = ChainStore.getAccountRefsOfKey(\n                    public_string\n                );\n                if (chain_account_ids)\n                    chain_account_ids.forEach(chain_account_id => {\n                        new_ids.add(chain_account_id);\n                    });\n            };\n            this.derived_keys.forEach(derived_key =>\n                updatePubkey(derived_key.public_string)\n            );\n        });\n        if (!new_account_ids.equals(this.state.account_ids)) {\n            this.state.account_ids = new_account_ids;\n            this.setState({account_ids: new_account_ids});\n        }\n    }\n}\n\nfunction derivedKeyStruct(private_key) {\n    var public_string = private_key.toPublicKey().toPublicKeyString();\n    var derived_key = {private_key, public_string};\n    return derived_key;\n}\n\nvar isPendingFromChain = derived_key =>\n    ChainStore.getAccountRefsOfKey(derived_key.public_string) === undefined;\n","import React from \"react\";\nimport BalanceComponent from \"../Utility/BalanceComponent\";\nimport AccountImage from \"../Account/AccountImage\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport AccountStore from \"stores/AccountStore\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {withRouter} from \"react-router-dom\";\n\n/**\n *  @brief displays the summary of a given account in a condenced view (for the dashboard)\n *\n *  This card has the following properties:\n *\n *  { account: ${name_or_id} }\n */\n\nclass AccountCard extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired\n    };\n\n    onCardClick(e) {\n        e.preventDefault();\n        let name = this.props.account.get(\"name\");\n        this.props.history.push(`/account/${name}`);\n    }\n\n    render() {\n        let name = null;\n        let balances = null;\n        let isMyAccount = false;\n        if (this.props.account) {\n            name = this.props.account.get(\"name\");\n            let abal = this.props.account.get(\"balances\");\n            if (abal) {\n                balances = abal\n                    .map(x => {\n                        let balanceAmount = ChainStore.getObject(x);\n                        if (!balanceAmount.get(\"balance\")) {\n                            return null;\n                        }\n                        return (\n                            <li key={x}>\n                                <BalanceComponent balance={x} />\n                            </li>\n                        );\n                    })\n                    .toArray();\n            }\n            isMyAccount = AccountStore.isMyAccount(this.props.account);\n        }\n\n        return (\n            <div\n                className=\"grid-content account-card\"\n                onClick={this.onCardClick.bind(this)}\n            >\n                <div className={\"card\" + (isMyAccount ? \" my-account\" : \"\")}>\n                    <h4 className=\"text-center\">{name}</h4>\n                    <div className=\"card-content clearfix\">\n                        <div className=\"float-left\">\n                            <AccountImage\n                                account={name}\n                                size={{height: 64, width: 64}}\n                            />\n                        </div>\n                        <ul className=\"balances\">{balances}</ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nAccountCard = BindToChainState(AccountCard);\nexport default withRouter(AccountCard);\n","import React, {Component} from \"react\";\nimport {connect} from \"alt-react\";\nimport cname from \"classnames\";\nimport notify from \"actions/NotificationActions\";\nimport {PrivateKey, Aes, PublicKey, hash} from \"bitsharesjs\";\nimport {ChainConfig} from \"bitsharesjs-ws\";\nimport PrivateKeyStore from \"stores/PrivateKeyStore\";\nimport WalletUnlockActions from \"actions/WalletUnlockActions\";\nimport {WalletCreate} from \"components/Wallet/WalletCreate\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport Translate from \"react-translate-component\";\nimport counterpart from \"counterpart\";\n\nimport BalanceClaimActive from \"../Wallet/BalanceClaimActive\";\nimport BalanceClaimActiveActions from \"actions/BalanceClaimActiveActions\";\nimport BalanceClaimAssetTotal from \"components/Wallet/BalanceClaimAssetTotal\";\nimport WalletDb from \"stores/WalletDb\";\nimport ImportKeysStore from \"stores/ImportKeysStore\";\n\nimport GenesisFilter from \"chain/GenesisFilter\";\n\nrequire(\"./ImportKeys.scss\");\n\nlet import_keys_assert_checking = false;\n\nconst KeyCount = ({key_count}) => {\n    if (!key_count) return <span />;\n    return <span>Found {key_count} private keys</span>;\n};\n\nclass ImportKeys extends Component {\n    constructor() {\n        super();\n        this.state = this._getInitialState();\n\n        this._renderBalanceClaims = this._renderBalanceClaims.bind(this);\n    }\n\n    static defaultProps = {\n        privateKey: true\n    };\n\n    _getInitialState(keep_file_name = false) {\n        return {\n            keys_to_account: {},\n            no_file: true,\n            account_keys: [],\n            //brainkey: null,\n            //encrypted_brainkey: null,\n            reset_file_name: keep_file_name\n                ? this.state.reset_file_name\n                : Date.now(),\n            reset_password: Date.now(),\n            password_checksum: null,\n            import_file_message: null,\n            import_password_message: null,\n            imported_keys_public: {},\n            key_text_message: null,\n            genesis_filtering: false,\n            genesis_filter_status: [],\n            genesis_filter_finished: undefined,\n            importSuccess: false\n        };\n    }\n\n    reset(e, keep_file_name) {\n        if (e) e.preventDefault();\n        let state = this._getInitialState(keep_file_name);\n        this.setState(state, () => this.updateOnChange());\n    }\n\n    onWif(event) {\n        event.preventDefault();\n        let value = this.refs.wifInput.value;\n        this.addByPattern(value);\n    }\n\n    onCancel(e) {\n        if (e) e.preventDefault();\n        this.setState(this._getInitialState());\n    }\n\n    updateOnChange() {\n        BalanceClaimActiveActions.setPubkeys(\n            Object.keys(this.state.imported_keys_public)\n        );\n    }\n\n    getImportAccountKeyCount(keys_to_account) {\n        let account_keycount = {};\n        let found = false;\n        for (let key in keys_to_account)\n            for (let account_name of keys_to_account[key].account_names) {\n                account_keycount[account_name] =\n                    (account_keycount[account_name] || 0) + 1;\n                found = true;\n            }\n        return found ? account_keycount : null;\n    }\n\n    upload(evt) {\n        this.reset(null, true);\n        let file = evt.target.files[0];\n        let reader = new FileReader();\n        reader.onload = evt => {\n            let contents = evt.target.result;\n            try {\n                let json_contents;\n                try {\n                    json_contents = JSON.parse(contents);\n                    // This is the only chance to encounter a large file,\n                    // try this format first.\n                    this._parseImportKeyUpload(\n                        json_contents,\n                        file.name,\n                        update_state => {\n                            // console.log(\"update_state\", update_state)\n                            this.setState(update_state, () => {\n                                if (update_state.genesis_filter_finished) {\n                                    // try empty password, also display \"Enter import file password\"\n                                    this._passwordCheck();\n                                }\n                            });\n                        }\n                    );\n                } catch (e) {\n                    //DEBUG console.log(\"... _parseImportKeyUpload\",e)\n                    try {\n                        if (!json_contents)\n                            file.name + \" is an unrecognized format\";\n                        this._parseWalletJson(json_contents);\n                    } catch (ee) {\n                        if (!this.addByPattern(contents)) throw ee;\n                    }\n                    // try empty password, also display \"Enter import file password\"\n                    this._passwordCheck();\n                }\n            } catch (message) {\n                console.error(\"... ImportKeys upload error\", message);\n                this.setState({import_file_message: message});\n            }\n        };\n        reader.readAsText(file);\n    }\n\n    /** BTS 1.0 client wallet_export_keys format. */\n    _parseImportKeyUpload(json_contents, file_name, update_state) {\n        let password_checksum, unfiltered_account_keys;\n        try {\n            password_checksum = json_contents.password_checksum;\n            if (!password_checksum)\n                throw file_name + \" is an unrecognized format\";\n\n            if (!Array.isArray(json_contents.account_keys))\n                throw file_name + \" is an unrecognized format\";\n\n            unfiltered_account_keys = json_contents.account_keys;\n        } catch (e) {\n            throw e.message || e;\n        }\n\n        // BTS 1.0 wallets may have a lot of generated but unused keys or spent TITAN addresses making\n        // wallets so large it is was not possible to use the JavaScript wallets with them.\n\n        let genesis_filter = new GenesisFilter();\n        if (!genesis_filter.isAvailable()) {\n            update_state({\n                password_checksum,\n                account_keys: unfiltered_account_keys,\n                genesis_filter_finished: true,\n                genesis_filtering: false\n            });\n            return;\n        }\n        this.setState(\n            {genesis_filter_initalizing: true},\n            () =>\n                // setTimeout(()=>\n                genesis_filter.init(() => {\n                    let filter_status = this.state.genesis_filter_status;\n\n                    // FF < version 41 does not support worker threads internals (like blob urls)\n                    // let GenesisFilterWorker = require(\"worker-loader!workers/GenesisFilterWorker\")\n                    // let worker = new GenesisFilterWorker\n                    // worker.postMessage({\n                    //     account_keys: unfiltered_account_keys,\n                    //     bloom_filter: genesis_filter.bloom_filter\n                    // })\n                    // worker.onmessage = event => { try {\n                    //     let { status, account_keys } = event.data\n                    //     // ...\n                    // } catch( e ) { console.error('GenesisFilterWorker', e) }}\n\n                    let account_keys = unfiltered_account_keys;\n                    genesis_filter.filter(account_keys, status => {\n                        //console.log(\"import filter\", status)\n                        if (status.error === \"missing_public_keys\") {\n                            console.error(\n                                \"un-released format, just for testing\"\n                            );\n                            update_state({\n                                password_checksum,\n                                account_keys: unfiltered_account_keys,\n                                genesis_filter_finished: true,\n                                genesis_filtering: false\n                            });\n                            return;\n                        }\n                        if (status.success) {\n                            // let { account_keys } = event.data // if using worker thread\n                            update_state({\n                                password_checksum,\n                                account_keys,\n                                genesis_filter_finished: true,\n                                genesis_filtering: false\n                            });\n                            return;\n                        }\n                        if (status.initalizing !== undefined) {\n                            update_state({\n                                genesis_filter_initalizing: status.initalizing,\n                                genesis_filtering: true\n                            });\n                            return;\n                        }\n                        if (status.importing === undefined) {\n                            // programmer error\n                            console.error(\"unknown status\", status);\n                            return;\n                        }\n                        if (!filter_status.length)\n                            // first account\n                            filter_status.push(status);\n                        else {\n                            let last_account_name =\n                                filter_status[filter_status.length - 1]\n                                    .account_name;\n                            if (last_account_name === status.account_name)\n                                // update same account\n                                filter_status[\n                                    filter_status.length - 1\n                                ] = status;\n                            // new account\n                            else filter_status.push(status);\n                        }\n                        update_state({genesis_filter_status: filter_status});\n                    });\n                })\n            //, 100)\n        );\n    }\n\n    /**\n    BTS 1.0 hosted wallet backup (wallet.bitshares.org) is supported.\n\n    BTS 1.0 native wallets should use wallet_export_keys instead of a wallet backup.\n\n    Note,  Native wallet backups will be rejected.  The logic below does not\n    capture assigned account names (for unregisted accounts) and does not capture\n    signing keys.  The hosted wallet has only registered accounts and no signing\n    keys.\n\n    */\n    _parseWalletJson(json_contents) {\n        let password_checksum;\n        let encrypted_brainkey;\n        let address_to_enckeys = {};\n        let account_addresses = {};\n\n        let savePubkeyAccount = function(pubkey, account_name) {\n            //replace BTS with GPH\n            pubkey = ChainConfig.address_prefix + pubkey.substring(3);\n            let address = PublicKey.fromPublicKeyString(\n                pubkey\n            ).toAddressString();\n            let addresses = account_addresses[account_name] || [];\n            address = \"BTS\" + address.substring(3);\n            //DEBUG console.log(\"... address\",address,account_name)\n            addresses.push(address);\n            account_addresses[account_name] = addresses;\n        };\n\n        try {\n            if (!Array.isArray(json_contents)) {\n                //DEBUG console.log('... json_contents',json_contents)\n                throw new Error(\"Invalid wallet format\");\n            }\n            for (let element of json_contents) {\n                if (\n                    \"key_record_type\" == element.type &&\n                    element.data.account_address &&\n                    element.data.encrypted_private_key\n                ) {\n                    let address = element.data.account_address;\n                    let enckeys = address_to_enckeys[address] || [];\n                    enckeys.push(element.data.encrypted_private_key);\n                    //DEBUG console.log(\"... address\",address,enckeys)\n                    address_to_enckeys[address] = enckeys;\n                    continue;\n                }\n\n                if (\"account_record_type\" == element.type) {\n                    let account_name = element.data.name;\n                    savePubkeyAccount(element.data.owner_key, account_name);\n                    for (let history of element.data.active_key_history) {\n                        savePubkeyAccount(history[1], account_name);\n                    }\n                    continue;\n                }\n\n                if (\n                    \"property_record_type\" == element.type &&\n                    \"encrypted_brainkey\" == element.data.key\n                ) {\n                    encrypted_brainkey = element.data.value;\n                    continue;\n                }\n\n                if (\"master_key_record_type\" == element.type) {\n                    if (!element.data)\n                        throw file.name + \" invalid master_key_record record\";\n\n                    if (!element.data.checksum)\n                        throw file.name +\n                            \" is missing master_key_record checksum\";\n\n                    password_checksum = element.data.checksum;\n                }\n            }\n            if (!encrypted_brainkey)\n                throw \"Please use a BTS 1.0 wallet_export_keys file instead\";\n\n            if (!password_checksum)\n                throw file.name + \" is missing password_checksum\";\n\n            if (!enckeys.length)\n                throw file.name + \" does not contain any private keys\";\n        } catch (e) {\n            throw e.message || e;\n        }\n\n        let account_keys = [];\n        for (let account_name in account_addresses) {\n            let encrypted_private_keys = [];\n            for (let address of account_addresses[account_name]) {\n                let enckeys = address_to_enckeys[address];\n                if (!enckeys) continue;\n                for (let enckey of enckeys) encrypted_private_keys.push(enckey);\n            }\n            account_keys.push({\n                account_name,\n                encrypted_private_keys\n            });\n        }\n        // We could prompt for this brain key instead on first use.  The user\n        // may already have a brainkey at this point so with a single brainkey\n        // wallet we can't use it now.\n        this.setState({\n            password_checksum,\n            account_keys\n            //encrypted_brainkey\n        });\n    }\n\n    _passwordCheck(evt) {\n        if (evt && \"preventDefault\" in evt) {\n            evt.preventDefault();\n        }\n        let pwNode = this.refs.password;\n        // if(pwNode) pwNode.focus()\n        let password = pwNode ? pwNode.value : \"\";\n        let checksum = this.state.password_checksum;\n        let new_checksum = hash.sha512(hash.sha512(password)).toString(\"hex\");\n        if (checksum != new_checksum) {\n            return this.setState({\n                no_file: false,\n                import_password_message: password.length\n                    ? \"Incorrect password\"\n                    : null\n            });\n        }\n        this.setState(\n            {\n                no_file: false,\n                reset_password: Date.now(),\n                import_password_message: counterpart.translate(\n                    \"wallet.import_pass_match\"\n                )\n            },\n            () => this._decryptPrivateKeys(password)\n        );\n        // setTimeout(, 250)\n    }\n\n    _decryptPrivateKeys(password) {\n        let password_aes = Aes.fromSeed(password);\n        let format_error1_once = true;\n        for (let account of this.state.account_keys) {\n            if (!account.encrypted_private_keys) {\n                let error = `Account ${\n                    account.account_name\n                } missing encrypted_private_keys`;\n                console.error(error);\n                if (format_error1_once) {\n                    notify.error(error);\n                    format_error1_once = false;\n                }\n                continue;\n            }\n            let account_name = account.account_name.trim();\n            let same_prefix_regex = new RegExp(\n                \"^\" + ChainConfig.address_prefix\n            );\n            for (let i = 0; i < account.encrypted_private_keys.length; i++) {\n                let encrypted_private = account.encrypted_private_keys[i];\n                let public_key_string = account.public_keys\n                    ? account.public_keys[i]\n                    : null; // performance gain\n\n                try {\n                    let private_plainhex = password_aes.decryptHex(\n                        encrypted_private\n                    );\n                    if (import_keys_assert_checking && public_key_string) {\n                        let private_key = PrivateKey.fromHex(private_plainhex);\n                        let pub = private_key.toPublicKey(); // S L O W\n                        let addy = pub.toAddressString();\n                        let pubby = pub.toPublicKeyString();\n                        let error = \"\";\n\n                        let address_string = account.addresses\n                            ? account.addresses[i]\n                            : null; // assert checking\n\n                        if (\n                            address_string &&\n                            addy.substring(3) != address_string.substring(3)\n                        )\n                            error =\n                                \"address imported \" +\n                                address_string +\n                                \" but calculated \" +\n                                addy +\n                                \". \";\n\n                        if (\n                            pubby.substring(3) != public_key_string.substring(3)\n                        )\n                            error +=\n                                \"public key imported \" +\n                                public_key_string +\n                                \" but calculated \" +\n                                pubby;\n\n                        if (error != \"\")\n                            console.log(\"ERROR Miss-match key\", error);\n                    }\n\n                    if (!public_key_string) {\n                        let private_key = PrivateKey.fromHex(private_plainhex);\n                        let public_key = private_key.toPublicKey(); // S L O W\n                        public_key_string = public_key.toPublicKeyString();\n                    } else {\n                        if (!same_prefix_regex.test(public_key_string))\n                            // This was creating a unresponsive chrome browser\n                            // but after the results were shown.  It was probably\n                            // caused by garbage collection.\n                            public_key_string =\n                                ChainConfig.address_prefix +\n                                public_key_string.substring(3);\n                    }\n                    this.state.imported_keys_public[public_key_string] = true;\n                    let {account_names} = this.state.keys_to_account[\n                        private_plainhex\n                    ] || {account_names: []};\n                    let dup = false;\n                    for (let _name of account_names)\n                        if (_name == account_name) dup = true;\n                    if (dup) continue;\n                    account_names.push(account_name);\n                    this.state.keys_to_account[private_plainhex] = {\n                        account_names,\n                        public_key_string\n                    };\n                } catch (e) {\n                    console.log(e, e.stack);\n                    let message = e.message || e;\n                    notify.error(\n                        `Account ${account_name} had a private key import error: ` +\n                            message\n                    );\n                }\n            }\n        }\n        //let enc_brainkey = this.state.encrypted_brainkey\n        //if(enc_brainkey){\n        //    this.setState({\n        //        brainkey: password_aes.decryptHexToText(enc_brainkey)\n        //    })\n        //}\n        this.setState(\n            {\n                import_file_message: null,\n                import_password_message: null,\n                password_checksum: null\n            },\n            () => this.updateOnChange()\n        );\n    }\n\n    _saveImport(e) {\n        e.preventDefault();\n        let keys = PrivateKeyStore.getState().keys;\n        let dups = {};\n        for (let public_key_string in this.state.imported_keys_public) {\n            if (!keys.has(public_key_string)) continue;\n            delete this.state.imported_keys_public[public_key_string];\n            dups[public_key_string] = true;\n        }\n        if (Object.keys(this.state.imported_keys_public).length === 0) {\n            notify.error(\"This wallet has already been imported\");\n            return;\n        }\n        let keys_to_account = this.state.keys_to_account;\n        for (let private_plainhex of Object.keys(keys_to_account)) {\n            let {account_names, public_key_string} = keys_to_account[\n                private_plainhex\n            ];\n            if (dups[public_key_string])\n                delete keys_to_account[private_plainhex];\n        }\n        WalletUnlockActions.unlock()\n            .then(() => {\n                ImportKeysStore.importing(true);\n                // show the loading indicator\n                setTimeout(() => this.saveImport(), 200);\n            })\n            .catch(() => {});\n    }\n\n    saveImport() {\n        let keys_to_account = this.state.keys_to_account;\n        let private_key_objs = [];\n        for (let private_plainhex of Object.keys(keys_to_account)) {\n            let {account_names, public_key_string} = keys_to_account[\n                private_plainhex\n            ];\n            private_key_objs.push({\n                private_plainhex,\n                import_account_names: account_names,\n                public_key_string\n            });\n        }\n        this.reset();\n        WalletDb.importKeysWorker(private_key_objs)\n            .then(result => {\n                ImportKeysStore.importing(false);\n                let import_count = private_key_objs.length;\n\n                notify.success(\n                    counterpart.translate(\"wallet.import_key_success\", {\n                        count: import_count\n                    })\n                );\n                this.setState({\n                    importSuccess: true\n                });\n                // this.onCancel() // back to claim balances\n            })\n            .catch(error => {\n                console.log(\"error:\", error);\n                ImportKeysStore.importing(false);\n                let message = error;\n                try {\n                    message = error.target.error.message;\n                } catch (e) {}\n                notify.error(`Key import error: ${message}`);\n            });\n    }\n\n    addByPattern(contents) {\n        if (!contents) return false;\n\n        let count = 0,\n            invalid_count = 0;\n        let wif_regex = /5[HJK][1-9A-Za-z]{49}/g;\n        for (let wif of contents.match(wif_regex) || []) {\n            try {\n                let private_key = PrivateKey.fromWif(wif); //could throw and error\n                let private_plainhex = private_key.toBuffer().toString(\"hex\");\n                let public_key = private_key.toPublicKey(); // S L O W\n                let public_key_string = public_key.toPublicKeyString();\n                this.state.imported_keys_public[public_key_string] = true;\n                this.state.keys_to_account[private_plainhex] = {\n                    account_names: [],\n                    public_key_string\n                };\n                count++;\n            } catch (e) {\n                invalid_count++;\n            }\n        }\n        this.setState(\n            {\n                key_text_message:\n                    \"Found \" +\n                    (!count ? \"\" : count + \" valid\") +\n                    (!invalid_count\n                        ? \"\"\n                        : \" and \" + invalid_count + \" invalid\") +\n                    \" key\" +\n                    (count > 1 || invalid_count > 1 ? \"s\" : \"\") +\n                    \".\"\n            },\n            () => this.updateOnChange()\n        );\n        // removes the message on the next render\n        this.state.key_text_message = null;\n        return count;\n    }\n\n    // toggleImportType(type) {\n    //     if (!type) {\n    //         return;\n    //     }\n    //     console.log(\"toggleImportType\", type);\n    //     this.setState({\n    //         privateKey: type === \"privateKey\"\n    //     });\n    // }\n\n    _renderBalanceClaims() {\n        return (\n            <div>\n                <BalanceClaimActive />\n\n                <div style={{paddingTop: 15}}>\n                    <div\n                        className=\"button success\"\n                        onClick={this.onCancel.bind(this)}\n                    >\n                        <Translate content=\"wallet.done\" />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        let {privateKey} = this.props;\n        let {keys_to_account} = this.state;\n        let key_count = Object.keys(keys_to_account).length;\n        let account_keycount = this.getImportAccountKeyCount(keys_to_account);\n\n        // Create wallet prior to the import keys (keeps layout clean)\n        if (!WalletDb.getWallet())\n            return <WalletCreate importKeys={true} hideTitle={true} />;\n        if (this.props.importing) {\n            return (\n                <div>\n                    <div className=\"center-content\">\n                        <LoadingIndicator type=\"circle\" />\n                    </div>\n                </div>\n            );\n        }\n\n        let filtering = this.state.genesis_filtering;\n        let was_filtered =\n            !!this.state.genesis_filter_status.length &&\n            this.state.genesis_filter_finished;\n        let account_rows = null;\n\n        if (this.state.genesis_filter_status.length) {\n            account_rows = [];\n            for (let status of this.state.genesis_filter_status) {\n                if (status.count && status.total) {\n                    account_rows.push(\n                        <tr key={status.account_name}>\n                            <td>{status.account_name}</td>\n                            <td>\n                                {filtering ? (\n                                    <span>\n                                        Filtering{\" \"}\n                                        {Math.round(\n                                            (status.count / status.total) * 100\n                                        )}{\" \"}\n                                        %{\" \"}\n                                    </span>\n                                ) : (\n                                    <span>{status.count}</span>\n                                )}\n                            </td>\n                        </tr>\n                    );\n                }\n            }\n        }\n\n        let import_ready = key_count !== 0;\n        let password_placeholder = counterpart.translate(\n            \"wallet.import_password\"\n        );\n\n        if (import_ready) password_placeholder = \"\";\n\n        if (!account_rows && account_keycount) {\n            account_rows = [];\n            for (let account_name in account_keycount) {\n                account_rows.push(\n                    <tr key={account_name}>\n                        <td>{account_name}</td>\n                        <td>{account_keycount[account_name]}</td>\n                    </tr>\n                );\n            }\n        }\n\n        let cancelButton = (\n            <div className=\"button success\" onClick={this.onCancel.bind(this)}>\n                <Translate content=\"wallet.cancel\" />\n            </div>\n        );\n\n        let tabIndex = 1;\n\n        if (this.state.importSuccess) {\n            return this._renderBalanceClaims();\n        }\n\n        return (\n            <div>\n                {/* Key file upload */}\n                <div style={{padding: \"10px 0\"}}>\n                    <span>\n                        {this.state.key_text_message ? (\n                            this.state.key_text_message\n                        ) : (\n                            <KeyCount key_count={key_count} />\n                        )}\n                    </span>\n                    {!import_ready ? null : (\n                        <span>\n                            {\" \"}\n                            (<a onClick={this.reset.bind(this)}>\n                                <Translate content=\"wallet.reset\" />\n                            </a>)\n                        </span>\n                    )}\n                </div>\n\n                {account_rows ? (\n                    <div>\n                        {!account_rows.length ? (\n                            counterpart.translate(\"wallet.no_accounts\")\n                        ) : (\n                            <div>\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <Translate content=\"explorer.account.title\" />\n                                            </th>\n                                            <th>\n                                                <Translate content=\"settings.restore_key_count\" />\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>{account_rows}</tbody>\n                                </table>\n                                <br />\n                            </div>\n                        )}\n                    </div>\n                ) : null}\n                <br />\n\n                {!import_ready && !this.state.genesis_filter_initalizing ? (\n                    <div>\n                        <div>\n                            <div>\n                                {privateKey ? (\n                                    <form onSubmit={this.onWif.bind(this)}>\n                                        <Translate\n                                            component=\"label\"\n                                            content=\"wallet.paste_private\"\n                                        />\n                                        <input\n                                            ref=\"wifInput\"\n                                            type=\"password\"\n                                            id=\"wif\"\n                                            tabIndex={tabIndex++}\n                                        />\n\n                                        <button\n                                            className=\"button\"\n                                            type=\"submit\"\n                                        >\n                                            <Translate content=\"wallet.submit\" />\n                                        </button>\n                                        {cancelButton}\n                                    </form>\n                                ) : (\n                                    <form\n                                        onSubmit={this._passwordCheck.bind(\n                                            this\n                                        )}\n                                    >\n                                        <label>\n                                            <Translate content=\"wallet.bts_09_export\" />\n                                            {this.state.no_file ? null : (\n                                                <span>\n                                                    &nbsp; (<a\n                                                        onClick={this.reset.bind(\n                                                            this\n                                                        )}\n                                                    >\n                                                        Reset\n                                                    </a>)\n                                                </span>\n                                            )}\n                                        </label>\n                                        <input\n                                            type=\"file\"\n                                            id=\"file_input\"\n                                            accept=\".json\"\n                                            style={{\n                                                border: \"solid\",\n                                                marginBottom: 15\n                                            }}\n                                            key={this.state.reset_file_name}\n                                            onChange={this.upload.bind(this)}\n                                        />\n                                        <div>\n                                            {this.state.import_file_message}\n                                        </div>\n                                        {!this.state.no_file ? (\n                                            <div>\n                                                <input\n                                                    type=\"password\"\n                                                    ref=\"password\"\n                                                    key={\n                                                        this.state\n                                                            .reset_password\n                                                    }\n                                                    placeholder={\n                                                        password_placeholder\n                                                    }\n                                                    onChange={() => {\n                                                        if (\n                                                            this.state\n                                                                .import_password_message &&\n                                                            this.state\n                                                                .import_password_message\n                                                                .length\n                                                        ) {\n                                                            this.setState({\n                                                                import_password_message: null\n                                                            });\n                                                        }\n                                                    }}\n                                                />\n                                                <p className=\"facolor-error\">\n                                                    {\n                                                        this.state\n                                                            .import_password_message\n                                                    }\n                                                </p>\n                                            </div>\n                                        ) : null}\n                                        <div className=\"button-group\">\n                                            <button\n                                                className={cname(\"button\", {\n                                                    disabled: !!this.state\n                                                        .no_file\n                                                })}\n                                                type=\"submit\"\n                                            >\n                                                <Translate content=\"wallet.submit\" />\n                                            </button>\n                                            {cancelButton}\n                                        </div>\n                                    </form>\n                                )}\n                            </div>\n                            <br />\n\n                            <br />\n                        </div>\n                    </div>\n                ) : null}\n\n                {this.state.genesis_filter_initalizing ? (\n                    <div>\n                        <div className=\"center-content\">\n                            <LoadingIndicator type=\"circle\" />\n                        </div>\n                    </div>\n                ) : null}\n\n                {import_ready ? (\n                    <div>\n                        <div>\n                            <div className=\"button-group\">\n                                <div\n                                    className={cname(\"button success\", {\n                                        disabled: !import_ready\n                                    })}\n                                    onClick={this._saveImport.bind(this)}\n                                >\n                                    <Translate content=\"wallet.import_keys\" />\n                                </div>\n                                <div\n                                    className=\"button secondary\"\n                                    onClick={this.reset.bind(this)}\n                                >\n                                    <Translate content=\"wallet.cancel\" />\n                                </div>\n                            </div>\n                        </div>\n\n                        <h4>\n                            <Translate content=\"wallet.unclaimed\" />\n                        </h4>\n                        <Translate component=\"p\" content=\"wallet.claim_later\" />\n                        <div className=\"grid-block\">\n                            <div className=\"grid-content no-overflow\">\n                                <Translate\n                                    component=\"label\"\n                                    content=\"wallet.totals\"\n                                />\n                                <BalanceClaimAssetTotal />\n                            </div>\n                        </div>\n                        <br />\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nImportKeys = connect(\n    ImportKeys,\n    {\n        listenTo() {\n            return [ImportKeysStore];\n        },\n        getProps() {\n            return {\n                importing: ImportKeysStore.getState().importing\n            };\n        }\n    }\n);\n\nexport default ImportKeys;\n","import React, {Component} from \"react\";\nimport {connect} from \"alt-react\";\nimport BalanceClaimActiveStore from \"stores/BalanceClaimActiveStore\";\nimport FormattedAsset from \"components/Utility/FormattedAsset\";\nimport Translate from \"react-translate-component\";\n\nclass BalanceClaimAssetTotals extends Component {\n    render() {\n        if (this.props.balances === undefined)\n            return (\n                <div>\n                    <Translate content=\"wallet.loading_balances\" />&hellip;\n                </div>\n            );\n\n        var total_by_asset = this.props.balances\n            .groupBy(v => v.balance.asset_id)\n            .map(l => l.reduce((r, v) => r + Number(v.balance.amount), 0));\n\n        if (!total_by_asset.size) return <div>None</div>;\n\n        return (\n            <div>\n                {total_by_asset\n                    .map((total, asset_id) => (\n                        <div key={asset_id}>\n                            <FormattedAsset\n                                color=\"info\"\n                                amount={total}\n                                asset={asset_id}\n                            />\n                        </div>\n                    ))\n                    .toArray()}\n            </div>\n        );\n    }\n}\n\nBalanceClaimAssetTotals = connect(BalanceClaimAssetTotals, {\n    listenTo() {\n        return [BalanceClaimActiveStore];\n    },\n    getProps() {\n        return BalanceClaimActiveStore.getState();\n    }\n});\n\nexport default BalanceClaimAssetTotals;\n","import alt from \"alt-instance\";\nimport BaseStore from \"stores/BaseStore\";\n\nclass ImportKeysStore extends BaseStore {\n    constructor() {\n        super();\n        this.state = this._getInitialState();\n        this._export(\"importing\");\n    }\n\n    _getInitialState() {\n        return {importing: false};\n    }\n\n    importing(importing) {\n        this.setState({importing});\n    }\n}\n\nexport var ImportKeysStoreWrapped = alt.createStore(\n    ImportKeysStore,\n    \"ImportKeysStore\"\n);\nexport default ImportKeysStoreWrapped;\n","import {hash, key} from \"bitsharesjs\";\n\nvar bts_genesiskeys_bloom_url = undefined;\ntry {\n    var url = require(\"file-loader?name=bts_genesiskeys_bloom_[sha1:hash:hex:7].dat!assets/bts_genesiskeys_bloom.dat\");\n    if (url.indexOf(\"3cee441\") === -1)\n        throw new Error(\"Incorrect hash: bts_genesiskeys_bloom.dat\");\n    bts_genesiskeys_bloom_url = url;\n} catch (e) {\n    // webpack deployment exception (not run time)\n    console.log(\n        \"WARN: Will be unable to filter BTS 1.0 wallet imports, did not find assets/bts_genesiskeys_bloom.dat\",\n        e\n    );\n}\n\n/**\n    This should only be applied to a BTS 1.0 export file taken on the\n    discontinued chain. Any public key string or address (all 5 formats) carried\n    over to the BTS 2.0 genesis block will be in this filter.\n\n    Their may be some false positives but no false negatives.\n*/\nexport default class GenesisFilter {\n    /** or call this.init */\n    constructor(bloom_buffer) {\n        if (!bloom_buffer) return;\n        this.bloom_buffer = bloom_buffer;\n        this.bits_in_filter = bloom_buffer.length * 8; // 8388608 (test data)\n    }\n\n    /** Was a bloom file deployed?  This does not try to load it from the server. */\n    isAvailable() {\n        return bts_genesiskeys_bloom_url !== undefined;\n    }\n\n    init(done) {\n        if (this.bloom_buffer) {\n            done();\n            return;\n        }\n        if (!this.isAvailable())\n            throw new Error(\"Genesis bloom file was not deployed\");\n\n        var xhr = new XMLHttpRequest();\n        // firefox 40 did not allow the blob url but ff 41.0.2 did\n        xhr.responseType = \"blob\";\n        xhr.onload = () => {\n            if (xhr.status === 404) return;\n            var reader = new FileReader();\n            reader.onload = evt => {\n                var contents = new Buffer(evt.target.result, \"binary\");\n                if (contents.length !== 1048576)\n                    throw new Error(\"Wrong length\");\n                this.bits_in_filter = contents.length * 8; // 8388608 (test data)\n                this.bloom_buffer = contents;\n                done();\n            };\n            reader.readAsBinaryString(xhr.response);\n        };\n        xhr.onerror = () => {\n            console.error(\"xhr.onerror\", e);\n        };\n        xhr.open(\"GET\", bts_genesiskeys_bloom_url);\n        xhr.send();\n    }\n\n    inGenesis(pubkey_or_address) {\n        if (!this.bloom_buffer) throw new Error(\"Call init() first\");\n        for (var hashes = 0; hashes < 3; hashes++) {\n            var hex = hash.sha256(hashes + \":\" + pubkey_or_address);\n            var bit_address =\n                parseInt(hex.slice(-3).toString(\"hex\"), 16) %\n                this.bits_in_filter; // 3090564\n            // console.error(\"bit_address\", bit_address.toString(16))\n            var byte_address = bit_address >> 3; // 386320\n            // console.error(\"byte_address\", byte_address.toString(16))\n            var mask = 1 << (bit_address & 7); // 16\n            // console.error(\"mask\", mask.toString(16))\n            var byte = this.bloom_buffer[byte_address];\n            // console.error(\"byte\", byte.toString(16))\n            // console.error(\"byte & mask\", byte & mask, (byte & mask) === 0, '\\n')\n            if ((byte & mask) === 0) return false;\n        }\n        return true;\n    }\n\n    filter(account_keys, status) {\n        if (!this.isAvailable()) {\n            console.log(\"WARN: Missing bloom filter for BTS 0.9.x wallets\");\n            status({error: \"missing_bloom\"});\n            return;\n        }\n        var initalizing = true;\n        status({initalizing});\n        this.init(() => {\n            try {\n                initalizing = false;\n                status({initalizing});\n                var running_count_progress = 1;\n                for (var a = 0; a < account_keys.length; a++) {\n                    var removed_count = 0,\n                        count = 0;\n                    var keys = account_keys[a];\n                    var total = keys.encrypted_private_keys.length;\n                    status({\n                        importing: true,\n                        account_name: keys.account_name,\n                        count,\n                        total\n                    });\n                    for (\n                        var k = keys.encrypted_private_keys.length - 1;\n                        k >= 0;\n                        k--\n                    ) {\n                        count++;\n                        if (count % running_count_progress === 0) {\n                            running_count_progress = 47;\n                            status({\n                                importing: true,\n                                account_name: keys.account_name,\n                                count,\n                                total\n                            });\n                        }\n                        if (!keys.public_keys) {\n                            // un-released format, just for testing\n                            status({error: \"missing_public_keys\"});\n                            return;\n                        }\n                        var currentKey = keys.public_keys[k];\n                        if (/^GPH/.test(currentKey))\n                            currentKey = \"BTS\" + currentKey.substring(3);\n                        if (this.inGenesis(currentKey)) continue;\n                        var addresses = key.addresses(currentKey, \"BTS\");\n                        var addy_found = false;\n                        for (var i = 0; i < addresses.length; i++) {\n                            if (this.inGenesis(addresses[i])) {\n                                addy_found = true;\n                                break;\n                            }\n                        }\n                        if (addy_found) continue;\n                        delete keys.encrypted_private_keys[k];\n                        delete keys.public_keys[k];\n                        removed_count++;\n                    }\n                    var encrypted_private_keys = [],\n                        public_keys = [];\n                    for (\n                        var k = keys.encrypted_private_keys.length - 1;\n                        k >= 0;\n                        k--\n                    ) {\n                        if (!keys.encrypted_private_keys[k]) continue;\n                        encrypted_private_keys.push(\n                            keys.encrypted_private_keys[k]\n                        );\n                        public_keys.push(keys.public_keys[k]);\n                    }\n                    keys.encrypted_private_keys = encrypted_private_keys;\n                    status({\n                        importing: false,\n                        account_name: keys.account_name,\n                        count: count - removed_count,\n                        total\n                    });\n                    keys.public_keys = public_keys;\n                }\n                status({success: true});\n            } finally {\n                if (initalizing) {\n                    initalizing = false;\n                    status({initalizing});\n                }\n            }\n        });\n    }\n}\n","module.exports = __webpack_public_path__ + \"bts_genesiskeys_bloom_3cee441.dat\";","// extracted by mini-css-extract-plugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AADA;AAZA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AArBA;AA2BA;AA5BA;AAlBA;AADA;AADA;AAsDA;;;;AA1DA;AACA;AA2DA;AACA;AAIA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAlBA;AAsBA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AA3BA;AA6CA;;;;AAjDA;AACA;AAkDA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAFA;AAOA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AALA;AADA;AASA;AAbA;AAeA;AACA;AAjBA;AAmBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AADA;AApCA;AAyCA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AA7HA;AACA;AA+HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAKA;;;AAEA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AARA;AADA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AALA;AADA;AAaA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAHA;AAFA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AARA;AAFA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzCA;AADA;AAFA;AAfA;AADA;AAoEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;;AAlHA;AACA;AAoHA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAMA;AAKA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAlBA;AAyBA;AAAA;AACA;AACA;AA3EA;AACA;AA6EA;;;;;;;;;;;;;;;;;;;;;;;;;AC7MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;;;AAEA;AACA;AACA;;;;AA1BA;AACA;AADA;AAEA;AACA;AAFA;AACA;AACA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;;;;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AASA;;;;AAfA;AACA;AAgBA;AAIA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAGA;AACA;AAEA;AADA;AAMA;AAAA;AACA;AADA;AAZA;AAkBA;;;;AAvBA;AACA;AAwBA;AACA;AAIA;;;;;;;;;;;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAZA;AACA;AADA;AAEA;AADA;AACA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;AALA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AANA;AAcA;AAzBA;AAAA;AAAA;AA4BA;AACA;AA7BA;AAAA;AAAA;AAgCA;AACA;AACA;AAlCA;AACA;AADA;AAAA;AACA;AAoCA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnIA;AACA;AACA;;;;;;;AACA;AACA;AACA;;;;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;;AAGA;;;;;AAnCA;AAAA;AAsCA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAnFA;AACA;AAqFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAPA;AAFA;AAJA;AAkBA;;;;AAvDA;AACA;AADA;AAEA;AADA;AACA;AAuDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAGA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AALA;AAOA;AACA;AACA;AACA;AAvEA;AAAA;AAwEA;AA1EA;AA4EA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AA9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA8CA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAUA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AArDA;AAAA;AACA;AAuDA;AAxDA;AAAA;AAAA;AACA;AADA;AAyDA;AAAA;AACA;AAAA;AADA;AAzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0DA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyGA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AACA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AALA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AAEA;AADA;AAWA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAHA;AAaA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAJA;AAKA;AALA;AAQA;AAAA;AAAA;AAAA;AAVA;AAFA;AAiBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAOA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AAFA;AAAA;AATA;AAkBA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAXA;AAaA;AAdA;AAJA;AAuBA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAlBA;AAqBA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AADA;AAAA;AAHA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAOA;AACA;AADA;AAGA;AACA;AAtBA;AAwBA;AAAA;AAAA;AAEA;AAFA;AAzBA;AAiCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AALA;AAOA;AAPA;AASA;AAVA;AAnEA;AAvBA;AAyGA;AAEA;AA5GA;AADA;AAkHA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AATA;AADA;AAmBA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AADA;AASA;AAjCA;AA1KA;AAgNA;;;;AA74BA;AACA;AADA;AASA;AADA;AACA;AACA;AAs4BA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;AC57BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAFA;AAcA;;;;AA9BA;AACA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;;;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAbA;AACA;AAeA;AAIA;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;;;;;;;;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AADA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AA3JA;;;;;;;;ACvBA;;;;;;;ACAA;;;;A","sourceRoot":""}