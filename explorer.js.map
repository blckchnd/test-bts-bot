{"version":3,"file":"explorer.c88d125f6386cc6edb3f.js","sources":["webpack:///app/components/Explorer/Explorer.jsx","webpack:///app/components/Explorer/Witnesses.jsx","webpack:///./app/components/Explorer/witnesses.scss?69b8","webpack:///app/components/Explorer/CommitteeMembers.jsx","webpack:///app/components/Blockchain/FeesContainer.jsx","webpack:///app/components/Blockchain/Fees.jsx","webpack:///app/components/Explorer/BlocksContainer.jsx","webpack:///app/components/Explorer/Blocks.jsx","webpack:///app/components/Utility/LinkToWitnessById.jsx","webpack:///app/components/Explorer/TransactionChart.jsx","webpack:///app/components/Explorer/BlocktimeChart.jsx","webpack:///./node_modules/lodash-es/takeRight.js","webpack:///app/components/Explorer/AssetsContainer.jsx","webpack:///app/components/Explorer/Assets.jsx","webpack:///app/components/Explorer/AccountsContainer.jsx","webpack:///app/components/Explorer/Accounts.jsx","webpack:///app/components/Exchange/MarketsContainer.jsx","webpack:///app/components/Exchange/Markets.jsx"],"sourcesContent":["import React from \"react\";\nimport {Tabs, Tab} from \"../Utility/Tabs\";\nimport Witnesses from \"./Witnesses\";\nimport CommitteeMembers from \"./CommitteeMembers\";\nimport FeesContainer from \"../Blockchain/FeesContainer\";\nimport BlocksContainer from \"./BlocksContainer\";\nimport AssetsContainer from \"./AssetsContainer\";\nimport AccountsContainer from \"./AccountsContainer\";\nimport MarketsContainer from \"../Exchange/MarketsContainer\";\n\nclass Explorer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            tabs: [\n                {\n                    name: \"blocks\",\n                    link: \"/explorer/blocks\",\n                    translate: \"explorer.blocks.title\",\n                    content: BlocksContainer\n                },\n                {\n                    name: \"assets\",\n                    link: \"/explorer/assets\",\n                    translate: \"explorer.assets.title\",\n                    content: AssetsContainer\n                },\n                {\n                    name: \"accounts\",\n                    link: \"/explorer/accounts\",\n                    translate: \"explorer.accounts.title\",\n                    content: AccountsContainer\n                },\n                {\n                    name: \"witnesses\",\n                    link: \"/explorer/witnesses\",\n                    translate: \"explorer.witnesses.title\",\n                    content: Witnesses\n                },\n                {\n                    name: \"committee_members\",\n                    link: \"/explorer/committee-members\",\n                    translate: \"explorer.committee_members.title\",\n                    content: CommitteeMembers\n                },\n                {\n                    name: \"markets\",\n                    link: \"/explorer/markets\",\n                    translate: \"markets.title\",\n                    content: MarketsContainer\n                },\n                {\n                    name: \"fees\",\n                    link: \"/explorer/fees\",\n                    translate: \"fees.title\",\n                    content: FeesContainer\n                }\n            ]\n        };\n    }\n\n    render() {\n        let {tab} = this.props.match.params;\n        let defaultActiveTab = this.state.tabs.findIndex(t => t.name === tab);\n\n        let tabs = [];\n\n        for (var i = 0; i < this.state.tabs.length; i++) {\n            let currentTab = this.state.tabs[i];\n\n            let TabContent = currentTab.content;\n            let isLinkTo = defaultActiveTab == i ? \"\" : currentTab.link;\n\n            tabs.push(\n                <Tab key={i} title={currentTab.translate} isLinkTo={isLinkTo}>\n                    <TabContent />\n                </Tab>\n            );\n        }\n\n        return (\n            <Tabs\n                defaultActiveTab={defaultActiveTab}\n                segmented={false}\n                setting=\"explorer-tabs\"\n                className=\"account-tabs\"\n                tabsClass=\"account-overview bordered-header content-block\"\n                contentClass=\"tab-content padding\"\n            >\n                {tabs}\n            </Tabs>\n        );\n    }\n}\n\nexport default Explorer;\n","import React from \"react\";\nimport Immutable from \"immutable\";\nimport AccountImage from \"../Account/AccountImage\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport {ChainStore} from \"bitsharesjs\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport Translate from \"react-translate-component\";\nimport TimeAgo from \"../Utility/TimeAgo\";\nimport {connect} from \"alt-react\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport classNames from \"classnames\";\nimport {withRouter} from \"react-router-dom\";\n\nrequire(\"./witnesses.scss\");\n\nclass WitnessCard extends React.Component {\n    static propTypes = {\n        witness: ChainTypes.ChainAccount.isRequired\n    };\n\n    _onCardClick(e) {\n        e.preventDefault();\n        this.props.history.push(`/account/${this.props.witness.get(\"name\")}`);\n    }\n\n    render() {\n        let witness_data = ChainStore.getWitnessById(\n            this.props.witness.get(\"id\")\n        );\n        if (!witness_data) return null;\n        let total_votes = witness_data.get(\"total_votes\");\n\n        let witness_aslot = witness_data.get(\"last_aslot\");\n        let color = {};\n        if (this.props.most_recent - witness_aslot > 100) {\n            color = {borderLeft: \"1px solid #FCAB53\"};\n        } else {\n            color = {borderLeft: \"1px solid #50D2C2\"};\n        }\n        let last_aslot_time = new Date(\n            Date.now() -\n                (this.props.most_recent - witness_aslot) *\n                    ChainStore.getObject(\"2.0.0\").getIn([\n                        \"parameters\",\n                        \"block_interval\"\n                    ]) *\n                    1000\n        );\n\n        return (\n            <div\n                className=\"grid-content account-card\"\n                onClick={this._onCardClick.bind(this)}\n            >\n                <div className=\"card\" style={color}>\n                    <h4 className=\"text-center\">\n                        #{this.props.rank}: {this.props.witness.get(\"name\")}\n                    </h4>\n                    <div className=\"card-content\">\n                        <div className=\"text-center\">\n                            <AccountImage\n                                account={this.props.witness.get(\"name\")}\n                                size={{height: 64, width: 64}}\n                            />\n                        </div>\n                        <br />\n                        <table className=\"table key-value-table\">\n                            <tbody>\n                                <tr>\n                                    <td>Votes</td>\n                                    <td>\n                                        <FormattedAsset\n                                            amount={total_votes}\n                                            asset=\"1.3.0\"\n                                            decimalOffset={5}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Last&nbsp;Block</td>\n                                    <td>\n                                        <TimeAgo\n                                            time={new Date(last_aslot_time)}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td>Missed</td>\n                                    <td>{witness_data.get(\"total_missed\")}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nWitnessCard = BindToChainState(WitnessCard);\nWitnessCard = withRouter(WitnessCard);\n\nclass WitnessRow extends React.Component {\n    static propTypes = {\n        witness: ChainTypes.ChainAccount.isRequired\n    };\n\n    _onRowClick(e) {\n        e.preventDefault();\n        this.props.history.push(`/account/${this.props.witness.get(\"name\")}`);\n    }\n\n    // componentWillUnmount() {\n    //     ChainStore.unSubFrom(\"witnesses\", ChainStore.getWitnessById( this.props.witness.get(\"id\") ).get(\"id\"));\n    // }\n\n    render() {\n        let {witness, isCurrent, rank} = this.props;\n        let witness_data = ChainStore.getWitnessById(\n            this.props.witness.get(\"id\")\n        );\n        if (!witness_data) return null;\n        let total_votes = witness_data.get(\"total_votes\");\n\n        let witness_aslot = witness_data.get(\"last_aslot\");\n        let color = {};\n        if (this.props.most_recent - witness_aslot > 100) {\n            color = {borderLeft: \"1px solid #FCAB53\"};\n        } else {\n            color = {borderLeft: \"1px solid #50D2C2\"};\n        }\n        let last_aslot_time = new Date(\n            Date.now() -\n                (this.props.most_recent - witness_aslot) *\n                    ChainStore.getObject(\"2.0.0\").getIn([\n                        \"parameters\",\n                        \"block_interval\"\n                    ]) *\n                    1000\n        );\n\n        let currentClass = isCurrent ? \"active-witness\" : \"\";\n\n        let missed = witness_data.get(\"total_missed\");\n        let missedClass = classNames(\n            \"txtlabel\",\n            {success: missed <= 500},\n            {info: missed > 500 && missed <= 1250},\n            {warning: missed > 1250 && missed <= 2000},\n            {error: missed >= 200}\n        );\n\n        return (\n            <tr className={currentClass} onClick={this._onRowClick.bind(this)}>\n                <td>{rank}</td>\n                <td style={color}>{witness.get(\"name\")}</td>\n                <td>\n                    <TimeAgo time={new Date(last_aslot_time)} />\n                </td>\n                <td>{witness_data.get(\"last_confirmed_block_num\")}</td>\n                <td className={missedClass}>{missed}</td>\n                <td>\n                    <FormattedAsset\n                        amount={witness_data.get(\"total_votes\")}\n                        asset=\"1.3.0\"\n                        decimalOffset={5}\n                    />\n                </td>\n            </tr>\n        );\n    }\n}\nWitnessRow = BindToChainState(WitnessRow);\nWitnessRow = withRouter(WitnessRow);\n\nclass WitnessList extends React.Component {\n    static propTypes = {\n        witnesses: ChainTypes.ChainObjectsList.isRequired\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            sortBy: \"rank\",\n            inverseSort: true\n        };\n    }\n\n    _setSort(field) {\n        this.setState({\n            sortBy: field,\n            inverseSort:\n                field === this.state.sortBy\n                    ? !this.state.inverseSort\n                    : this.state.inverseSort\n        });\n    }\n\n    render() {\n        let {witnesses, current, cardView, witnessList} = this.props;\n        let {sortBy, inverseSort} = this.state;\n        let most_recent_aslot = 0;\n        let ranks = {};\n\n        witnesses\n            .filter(a => {\n                if (!a) {\n                    return false;\n                }\n                return witnessList.indexOf(a.get(\"id\")) !== -1;\n            })\n            .sort((a, b) => {\n                if (a && b) {\n                    return (\n                        parseInt(b.get(\"total_votes\"), 10) -\n                        parseInt(a.get(\"total_votes\"), 10)\n                    );\n                }\n            })\n            .forEach((w, index) => {\n                if (w) {\n                    let s = w.get(\"last_aslot\");\n                    if (most_recent_aslot < s) {\n                        most_recent_aslot = s;\n                    }\n\n                    ranks[w.get(\"id\")] = index + 1;\n                }\n            });\n\n        let itemRows = null;\n        if (witnesses.length > 0 && witnesses[1]) {\n            itemRows = witnesses\n                .filter(a => {\n                    if (!a) {\n                        return false;\n                    }\n                    let account = ChainStore.getObject(\n                        a.get(\"witness_account\")\n                    );\n                    if (!account) return false;\n                    let name = account.get(\"name\");\n                    if (!name) return false;\n                    return name.indexOf(this.props.filter) !== -1;\n                })\n                .sort((a, b) => {\n                    let a_account = ChainStore.getObject(\n                        a.get(\"witness_account\")\n                    );\n                    let b_account = ChainStore.getObject(\n                        b.get(\"witness_account\")\n                    );\n\n                    if (!a_account || !b_account) {\n                        return 0;\n                    }\n                    // console.log(\"a:\", a.toJS());\n\n                    switch (sortBy) {\n                        case \"name\":\n                            if (a_account.get(\"name\") > b_account.get(\"name\")) {\n                                return inverseSort ? 1 : -1;\n                            } else if (\n                                a_account.get(\"name\") < b_account.get(\"name\")\n                            ) {\n                                return inverseSort ? -1 : 1;\n                            } else {\n                                return 0;\n                            }\n                            break;\n\n                        case \"rank\":\n                            return !inverseSort\n                                ? ranks[b.get(\"id\")] - ranks[a.get(\"id\")]\n                                : ranks[a.get(\"id\")] - ranks[b.get(\"id\")];\n                            break;\n\n                        default:\n                            return !inverseSort\n                                ? parseInt(b.get(sortBy), 10) -\n                                      parseInt(a.get(sortBy), 10)\n                                : parseInt(a.get(sortBy), 10) -\n                                      parseInt(b.get(sortBy), 10);\n                    }\n                })\n                .map(a => {\n                    if (!cardView) {\n                        return (\n                            <WitnessRow\n                                key={a.get(\"id\")}\n                                rank={ranks[a.get(\"id\")]}\n                                isCurrent={current === a.get(\"id\")}\n                                witness={a.get(\"witness_account\")}\n                                most_recent={this.props.current_aslot}\n                            />\n                        );\n                    } else {\n                        return (\n                            <WitnessCard\n                                key={a.get(\"id\")}\n                                rank={ranks[a.get(\"id\")]}\n                                witness={a.get(\"witness_account\")}\n                                most_recent={this.props.current_aslot}\n                            />\n                        );\n                    }\n                });\n        }\n\n        // table view\n        if (!cardView) {\n            return (\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(this, \"rank\")}\n                            >\n                                <Translate content=\"explorer.witnesses.rank\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(this, \"name\")}\n                            >\n                                <Translate content=\"account.votes.name\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(this, \"last_aslot\")}\n                            >\n                                <Translate content=\"explorer.blocks.last_block\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(\n                                    this,\n                                    \"last_confirmed_block_num\"\n                                )}\n                            >\n                                <Translate content=\"explorer.witnesses.last_confirmed\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(\n                                    this,\n                                    \"total_missed\"\n                                )}\n                            >\n                                <Translate content=\"explorer.witnesses.missed\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(\n                                    this,\n                                    \"total_votes\"\n                                )}\n                            >\n                                <Translate content=\"account.votes.votes\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>{itemRows}</tbody>\n                </table>\n            );\n        } else {\n            return (\n                <div className=\"grid-block small-up-1 medium-up-2 large-up-3\">\n                    {itemRows}\n                </div>\n            );\n        }\n    }\n}\nWitnessList = BindToChainState(WitnessList, {\n    show_loader: true\n});\n\nclass Witnesses extends React.Component {\n    static propTypes = {\n        globalObject: ChainTypes.ChainObject.isRequired,\n        dynGlobalObject: ChainTypes.ChainObject.isRequired\n    };\n\n    static defaultProps = {\n        globalObject: \"2.0.0\",\n        dynGlobalObject: \"2.1.0\"\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            filterWitness: props.filterWitness || \"\",\n            cardView: props.cardView\n        };\n    }\n\n    _onFilter(e) {\n        e.preventDefault();\n        this.setState({filterWitness: e.target.value.toLowerCase()});\n\n        SettingsActions.changeViewSetting({\n            filterWitness: e.target.value.toLowerCase()\n        });\n    }\n\n    _toggleView() {\n        SettingsActions.changeViewSetting({\n            cardView: !this.state.cardView\n        });\n\n        this.setState({\n            cardView: !this.state.cardView\n        });\n    }\n\n    render() {\n        let {dynGlobalObject, globalObject} = this.props;\n        dynGlobalObject = dynGlobalObject.toJS();\n        globalObject = globalObject.toJS();\n\n        let current = ChainStore.getObject(dynGlobalObject.current_witness),\n            currentAccount = null;\n        if (current) {\n            currentAccount = ChainStore.getObject(\n                current.get(\"witness_account\")\n            );\n        }\n\n        return (\n            <div className=\"grid-block\">\n                <div className=\"grid-block\">\n                    <div className=\"grid-block vertical small-5 medium-3\">\n                        <div className=\"grid-content\">\n                            <br />\n                            <table className=\"table key-value-table\">\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.witnesses.current\" />\n                                        </td>\n                                        <td>\n                                            {currentAccount\n                                                ? currentAccount.get(\"name\")\n                                                : null}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.blocks.active_witnesses\" />\n                                        </td>\n                                        <td>\n                                            {\n                                                Object.keys(\n                                                    globalObject.active_witnesses\n                                                ).length\n                                            }\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.witnesses.participation\" />\n                                        </td>\n                                        <td>\n                                            {dynGlobalObject.participation}%\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.witnesses.pay\" />\n                                        </td>\n                                        <td>\n                                            <FormattedAsset\n                                                amount={\n                                                    globalObject.parameters\n                                                        .witness_pay_per_block\n                                                }\n                                                asset=\"1.3.0\"\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.witnesses.budget\" />\n                                        </td>\n                                        <td>\n                                            {\" \"}\n                                            <FormattedAsset\n                                                amount={\n                                                    dynGlobalObject.witness_budget\n                                                }\n                                                asset=\"1.3.0\"\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"explorer.witnesses.next_vote\" />\n                                        </td>\n                                        <td>\n                                            {\" \"}\n                                            <TimeAgo\n                                                time={\n                                                    new Date(\n                                                        dynGlobalObject.next_maintenance_time +\n                                                            \"Z\"\n                                                    )\n                                                }\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            {\" \"}\n                                            <Translate\n                                                component=\"h4\"\n                                                content=\"markets.filter\"\n                                            />{\" \"}\n                                        </td>\n                                        <td>\n                                            {\" \"}\n                                            <input\n                                                type=\"text\"\n                                                value={this.state.filterWitness}\n                                                onChange={this._onFilter.bind(\n                                                    this\n                                                )}\n                                            />{\" \"}\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                            <div className=\"view-switcher\">\n                                <span\n                                    className=\"button outline\"\n                                    onClick={this._toggleView.bind(this)}\n                                >\n                                    {!this.state.cardView ? (\n                                        <Translate content=\"explorer.witnesses.card\" />\n                                    ) : (\n                                        <Translate content=\"explorer.witnesses.table\" />\n                                    )}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"grid-block\">\n                        <div className=\"grid-content \">\n                            <WitnessList\n                                current_aslot={dynGlobalObject.current_aslot}\n                                current={current ? current.get(\"id\") : null}\n                                witnesses={Immutable.List(\n                                    globalObject.active_witnesses\n                                )}\n                                witnessList={globalObject.active_witnesses}\n                                filter={this.state.filterWitness}\n                                cardView={this.state.cardView}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nWitnesses = BindToChainState(Witnesses);\n\nclass WitnessStoreWrapper extends React.Component {\n    render() {\n        return <Witnesses {...this.props} />;\n    }\n}\n\nWitnessStoreWrapper = connect(\n    WitnessStoreWrapper,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {\n                cardView: SettingsStore.getState().viewSettings.get(\"cardView\"),\n                filterWitness: SettingsStore.getState().viewSettings.get(\n                    \"filterWitness\"\n                )\n            };\n        }\n    }\n);\n\nexport default WitnessStoreWrapper;\n","// extracted by mini-css-extract-plugin","import React from \"react\";\nimport Immutable from \"immutable\";\nimport AccountImage from \"../Account/AccountImage\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport {ChainStore} from \"bitsharesjs\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport {withRouter} from \"react-router-dom\";\n\nclass CommitteeMemberCard extends React.Component {\n    static propTypes = {\n        committee_member: ChainTypes.ChainAccount.isRequired\n    };\n\n    _onCardClick(e) {\n        e.preventDefault();\n        this.props.history.push(\n            `/account/${this.props.committee_member.get(\"name\")}`\n        );\n    }\n\n    render() {\n        let committee_member_data = ChainStore.getCommitteeMemberById(\n            this.props.committee_member.get(\"id\")\n        );\n\n        if (!committee_member_data) {\n            return null;\n        }\n\n        return (\n            <div\n                className=\"grid-content account-card\"\n                onClick={this._onCardClick.bind(this)}\n            >\n                <div className=\"card\">\n                    <h4 className=\"text-center\">\n                        {this.props.committee_member.get(\"name\")}\n                    </h4>\n                    <div className=\"card-content clearfix\">\n                        <div className=\"float-left\">\n                            <AccountImage\n                                account={this.props.committee_member.get(\n                                    \"name\"\n                                )}\n                                size={{height: 64, width: 64}}\n                            />\n                        </div>\n                        <ul className=\"balances\">\n                            <li>\n                                <Translate content=\"account.votes.votes\" />:{\" \"}\n                                <FormattedAsset\n                                    decimalOffset={5}\n                                    amount={committee_member_data.get(\n                                        \"total_votes\"\n                                    )}\n                                    asset={\"1.3.0\"}\n                                />\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nCommitteeMemberCard = BindToChainState(CommitteeMemberCard);\nCommitteeMemberCard = withRouter(CommitteeMemberCard);\n\nclass CommitteeMemberRow extends React.Component {\n    static propTypes = {\n        committee_member: ChainTypes.ChainAccount.isRequired\n    };\n\n    _onRowClick(e) {\n        e.preventDefault();\n        this.props.history.push(\n            `/account/${this.props.committee_member.get(\"name\")}`\n        );\n    }\n\n    render() {\n        let {committee_member, rank} = this.props;\n        let committee_member_data = ChainStore.getCommitteeMemberById(\n            committee_member.get(\"id\")\n        );\n        if (!committee_member_data) return null;\n\n        let url = committee_member_data.get(\"url\");\n        url =\n            url && url.length > 0 && url.indexOf(\"http\") === -1\n                ? \"http://\" + url\n                : url;\n\n        return (\n            <tr>\n                <td onClick={this._onRowClick.bind(this)}>{rank}</td>\n                <td onClick={this._onRowClick.bind(this)}>\n                    {committee_member.get(\"name\")}\n                </td>\n                <td onClick={this._onRowClick.bind(this)}>\n                    <FormattedAsset\n                        amount={committee_member_data.get(\"total_votes\")}\n                        asset=\"1.3.0\"\n                    />\n                </td>\n                <td>\n                    <a href={url} rel=\"noopener noreferrer\" target=\"_blank\">\n                        {committee_member_data.get(\"url\")}\n                    </a>\n                </td>\n            </tr>\n        );\n    }\n}\nCommitteeMemberRow = BindToChainState(CommitteeMemberRow);\nCommitteeMemberRow = withRouter(CommitteeMemberRow);\n\nclass CommitteeMemberList extends React.Component {\n    static propTypes = {\n        committee_members: ChainTypes.ChainObjectsList.isRequired\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            sortBy: \"rank\",\n            inverseSort: true\n        };\n    }\n\n    _setSort(field) {\n        this.setState({\n            sortBy: field,\n            inverseSort:\n                field === this.state.sortBy\n                    ? !this.state.inverseSort\n                    : this.state.inverseSort\n        });\n    }\n\n    render() {\n        let {committee_members, cardView, membersList} = this.props;\n        let {sortBy, inverseSort} = this.state;\n\n        let itemRows = null;\n\n        let ranks = {};\n\n        committee_members\n            .filter(a => {\n                if (!a) {\n                    return false;\n                }\n                return membersList.indexOf(a.get(\"id\")) !== -1;\n            })\n            .sort((a, b) => {\n                if (a && b) {\n                    return (\n                        parseInt(b.get(\"total_votes\"), 10) -\n                        parseInt(a.get(\"total_votes\"), 10)\n                    );\n                }\n            })\n            .forEach((c, index) => {\n                if (c) {\n                    ranks[c.get(\"id\")] = index + 1;\n                }\n            });\n\n        if (committee_members.length > 0 && committee_members[1]) {\n            itemRows = committee_members\n                .filter(a => {\n                    if (!a) {\n                        return false;\n                    }\n                    let account = ChainStore.getObject(\n                        a.get(\"committee_member_account\")\n                    );\n                    if (!account) {\n                        return false;\n                    }\n\n                    return (\n                        account.get(\"name\").indexOf(this.props.filter) !== -1\n                    );\n                })\n                .sort((a, b) => {\n                    let a_account = ChainStore.getObject(\n                        a.get(\"committee_member_account\")\n                    );\n                    let b_account = ChainStore.getObject(\n                        b.get(\"committee_member_account\")\n                    );\n                    if (!a_account || !b_account) {\n                        return 0;\n                    }\n\n                    switch (sortBy) {\n                        case \"name\":\n                            if (a_account.get(\"name\") > b_account.get(\"name\")) {\n                                return inverseSort ? 1 : -1;\n                            } else if (\n                                a_account.get(\"name\") < b_account.get(\"name\")\n                            ) {\n                                return inverseSort ? -1 : 1;\n                            } else {\n                                return 0;\n                            }\n                            break;\n\n                        case \"rank\":\n                            return !inverseSort\n                                ? ranks[b.get(\"id\")] - ranks[a.get(\"id\")]\n                                : ranks[a.get(\"id\")] - ranks[b.get(\"id\")];\n                            break;\n\n                        default:\n                            return !inverseSort\n                                ? parseInt(b.get(sortBy), 10) -\n                                      parseInt(a.get(sortBy), 10)\n                                : parseInt(a.get(sortBy), 10) -\n                                      parseInt(b.get(sortBy), 10);\n                    }\n                })\n                .map(a => {\n                    if (!cardView) {\n                        return (\n                            <CommitteeMemberRow\n                                key={a.get(\"id\")}\n                                rank={ranks[a.get(\"id\")]}\n                                committee_member={a.get(\n                                    \"committee_member_account\"\n                                )}\n                            />\n                        );\n                    } else {\n                        return (\n                            <CommitteeMemberCard\n                                key={a.get(\"id\")}\n                                rank={ranks[a.get(\"id\")]}\n                                committee_member={a.get(\n                                    \"committee_member_account\"\n                                )}\n                            />\n                        );\n                    }\n                });\n        }\n\n        // table view\n        if (!cardView) {\n            return (\n                <table className=\"table table-hover\">\n                    <thead>\n                        <tr>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(this, \"rank\")}\n                            >\n                                <Translate content=\"explorer.witnesses.rank\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(this, \"name\")}\n                            >\n                                <Translate content=\"account.votes.name\" />\n                            </th>\n                            <th\n                                className=\"clickable\"\n                                onClick={this._setSort.bind(\n                                    this,\n                                    \"total_votes\"\n                                )}\n                            >\n                                <Translate content=\"account.votes.votes\" />\n                            </th>\n                            <th>\n                                <Translate content=\"account.votes.url\" />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>{itemRows}</tbody>\n                </table>\n            );\n        } else {\n            return (\n                <div className=\"grid-block no-margin small-up-1 medium-up-2 large-up-3\">\n                    {itemRows}\n                </div>\n            );\n        }\n    }\n}\nCommitteeMemberList = BindToChainState(CommitteeMemberList, {\n    show_loader: true\n});\n\nclass CommitteeMembers extends React.Component {\n    static propTypes = {\n        globalObject: ChainTypes.ChainObject.isRequired\n    };\n\n    static defaultProps = {\n        globalObject: \"2.0.0\"\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterCommitteeMember: props.filterCommitteeMember || \"\",\n            cardView: props.cardView\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !Immutable.is(nextProps.globalObject, this.props.globalObject) ||\n            nextState.filterCommitteeMember !==\n                this.state.filterCommitteeMember ||\n            nextState.cardView !== this.state.cardView\n        );\n    }\n\n    _onFilter(e) {\n        e.preventDefault();\n        this.setState({filterCommitteeMember: e.target.value.toLowerCase()});\n\n        SettingsActions.changeViewSetting({\n            filterCommitteeMember: e.target.value.toLowerCase()\n        });\n    }\n\n    _toggleView() {\n        SettingsActions.changeViewSetting({\n            cardViewCommittee: !this.state.cardView\n        });\n\n        this.setState({\n            cardView: !this.state.cardView\n        });\n    }\n\n    render() {\n        let {globalObject} = this.props;\n        globalObject = globalObject.toJS();\n\n        let activeCommitteeMembers = [];\n        for (let key in globalObject.active_committee_members) {\n            if (globalObject.active_committee_members.hasOwnProperty(key)) {\n                activeCommitteeMembers.push(\n                    globalObject.active_committee_members[key]\n                );\n            }\n        }\n\n        return (\n            <div className=\"grid-block\">\n                <div className=\"grid-block vertical medium-horizontal\">\n                    <div className=\"grid-block shrink\">\n                        <div className=\"grid-content\">\n                            <h5>\n                                <Translate content=\"explorer.committee_members.active\" />:{\" \"}\n                                {\n                                    Object.keys(\n                                        globalObject.active_committee_members\n                                    ).length\n                                }\n                            </h5>\n                            <br />\n                            <div className=\"view-switcher\">\n                                <span\n                                    className=\"button outline\"\n                                    onClick={this._toggleView.bind(this)}\n                                >\n                                    {!this.state.cardView ? (\n                                        <Translate content=\"explorer.witnesses.card\" />\n                                    ) : (\n                                        <Translate content=\"explorer.witnesses.table\" />\n                                    )}\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"grid-block vertical\">\n                        <div className=\"grid-block vertical shrink\">\n                            <Translate\n                                component=\"h3\"\n                                content=\"markets.filter\"\n                            />\n                            <input\n                                type=\"text\"\n                                value={this.state.filterCommitteeMember}\n                                onChange={this._onFilter.bind(this)}\n                            />\n                        </div>\n                        <div className=\"grid-content\">\n                            <CommitteeMemberList\n                                committee_members={Immutable.List(\n                                    globalObject.active_committee_members\n                                )}\n                                membersList={\n                                    globalObject.active_committee_members\n                                }\n                                filter={this.state.filterCommitteeMember}\n                                cardView={this.state.cardView}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nCommitteeMembers = BindToChainState(CommitteeMembers);\n\nclass CommitteeMembersStoreWrapper extends React.Component {\n    render() {\n        return <CommitteeMembers {...this.props} />;\n    }\n}\n\nCommitteeMembersStoreWrapper = connect(\n    CommitteeMembersStoreWrapper,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {\n                cardView: SettingsStore.getState().viewSettings.get(\n                    \"cardViewCommittee\"\n                ),\n                filterCommitteeMember: SettingsStore.getState().viewSettings.get(\n                    \"filterCommitteeMember\"\n                )\n            };\n        }\n    }\n);\n\nexport default CommitteeMembersStoreWrapper;\n","import React from \"react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport AltContainer from \"alt-container\";\nimport Fees from \"./Fees\";\n\nclass FeesContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[SettingsStore]}\n                inject={{\n                    settings: SettingsStore.getState().settings\n                }}\n            >\n                <Fees {...this.props} />\n            </AltContainer>\n        );\n    }\n}\n\nexport default FeesContainer;\n","import React from \"react\";\nimport Immutable from \"immutable\";\nimport counterpart from \"counterpart\";\nimport classNames from \"classnames\";\nimport Translate from \"react-translate-component\";\nimport HelpContent from \"../Utility/HelpContent\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport {EquivalentValueComponent} from \"../Utility/EquivalentValueComponent\";\nimport {ChainStore, ChainTypes as grapheneChainTypes} from \"bitsharesjs\";\nconst {operations} = grapheneChainTypes;\nlet ops = Object.keys(operations);\n\n// Define groups and their corresponding operation ids\nlet fee_grouping = {\n    general: [0, 25, 26, 27, 28, 32, 33, 37, 39, 40],\n    asset: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 38, 41],\n    market: [1, 2, 3, 4, 17, 18],\n    account: [5, 6, 7, 8, 9],\n    business: [20, 21, 22, 23, 24, 29, 30, 31, 34, 35, 36]\n};\n\n// Operations that require LTM\nlet ltm_required = [5, 7, 20, 21, 34];\n\nclass FeeGroup extends React.Component {\n    static propTypes = {\n        globalObject: ChainTypes.ChainObject.isRequired\n    };\n\n    static defaultProps = {\n        globalObject: \"2.0.0\"\n    };\n\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !Immutable.is(nextProps.globalObject, this.props.globalObject);\n    }\n\n    render() {\n        let {globalObject, settings, opIds, title} = this.props;\n        globalObject = globalObject.toJSON();\n        const core_asset = ChainStore.getAsset(\"1.3.0\");\n\n        let current_fees = globalObject.parameters.current_fees;\n        let network_fee = globalObject.parameters.network_percent_of_fee / 1e4;\n        let scale = current_fees.scale;\n        let feesRaw = current_fees.parameters;\n        let preferredUnit = settings.get(\"unit\") || core_asset.get(\"symbol\");\n\n        let trxTypes = counterpart.translate(\"transaction.trxTypes\");\n\n        let fees = opIds.map(feeIdx => {\n            if (feeIdx >= feesRaw.length) {\n                console.warn(\n                    \"Asking for non-existing fee id %d! Check group settings in Fees.jsx\",\n                    feeIdx\n                );\n                return; // FIXME, if I ask for a fee that does not exist?\n            }\n\n            let feeStruct = feesRaw[feeIdx];\n\n            let opId = feeStruct[0];\n            let fee = feeStruct[1];\n            let operation_name = ops[opId];\n            let feename = trxTypes[operation_name];\n\n            let feeRateForLTM = network_fee;\n            if (opId === 10) {\n                // See https://github.com/bitshares/bitshares-ui/issues/996\n                feeRateForLTM = 0.5 + 0.5 * network_fee;\n            }\n\n            let rows = [];\n            let headIncluded = false;\n            let labelClass = classNames(\"label\", \"info\");\n\n            for (let key in fee) {\n                let amount = (fee[key] * scale) / 1e4;\n                let amountForLTM = amount * feeRateForLTM;\n                let feeTypes = counterpart.translate(\"transaction.feeTypes\");\n                let assetAmount = amount ? (\n                    <FormattedAsset amount={amount} asset=\"1.3.0\" />\n                ) : (\n                    feeTypes[\"_none\"]\n                );\n                let equivalentAmount = amount ? (\n                    <EquivalentValueComponent\n                        fromAsset=\"1.3.0\"\n                        fullPrecision={true}\n                        amount={amount}\n                        toAsset={preferredUnit}\n                        fullDecimals={true}\n                    />\n                ) : (\n                    feeTypes[\"_none\"]\n                );\n                let assetAmountLTM = amountForLTM ? (\n                    <FormattedAsset amount={amountForLTM} asset=\"1.3.0\" />\n                ) : (\n                    feeTypes[\"_none\"]\n                );\n                let equivalentAmountLTM = amountForLTM ? (\n                    <EquivalentValueComponent\n                        fromAsset=\"1.3.0\"\n                        fullPrecision={true}\n                        amount={amountForLTM}\n                        toAsset={preferredUnit}\n                        fullDecimals={true}\n                    />\n                ) : (\n                    feeTypes[\"_none\"]\n                );\n                let title = null;\n\n                if (!headIncluded) {\n                    headIncluded = true;\n                    title = (\n                        <td rowSpan=\"6\" style={{width: \"15em\"}}>\n                            <span className={labelClass}>{feename}</span>\n                        </td>\n                    );\n                }\n\n                if (ltm_required.indexOf(opId) < 0) {\n                    rows.push(\n                        <tr\n                            key={opId.toString() + key}\n                            className={\n                                feeTypes[key] === \"Annual Membership\"\n                                    ? \"linethrough\"\n                                    : \"\"\n                            }\n                        >\n                            {title}\n                            <td>{feeTypes[key]}</td>\n                            <td style={{textAlign: \"right\"}}>\n                                {assetAmount}\n                                {amount !== 0 &&\n                                    preferredUnit !== \"BTS\" && [\n                                        \" / \",\n                                        equivalentAmount\n                                    ]}\n                            </td>\n                            <td style={{textAlign: \"right\"}}>\n                                {feeIdx !== 8 ? assetAmountLTM : null}\n                                {feeIdx !== 8 &&\n                                    amount !== 0 &&\n                                    preferredUnit !== \"BTS\" && [\n                                        \" / \",\n                                        equivalentAmountLTM\n                                    ]}\n                            </td>\n                        </tr>\n                    );\n                } else {\n                    rows.push(\n                        <tr key={opId.toString() + key}>\n                            {title}\n                            <td>{feeTypes[key]}</td>\n                            <td style={{textAlign: \"right\"}}>\n                                - <sup>*</sup>\n                            </td>\n                            <td style={{textAlign: \"right\"}}>\n                                {assetAmountLTM}\n                                {amount !== 0 &&\n                                    preferredUnit !== \"BTS\" && [\n                                        \" / \",\n                                        equivalentAmountLTM\n                                    ]}\n                            </td>\n                        </tr>\n                    );\n                }\n            }\n            return <tbody key={feeIdx}>{rows}</tbody>;\n        });\n\n        return (\n            <div className=\"asset-card\">\n                <div className=\"card-divider\">{this.props.title}</div>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <Translate content={\"explorer.block.op\"} />\n                            </th>\n                            <th>\n                                <Translate content={\"explorer.fees.type\"} />\n                            </th>\n                            <th style={{textAlign: \"right\"}}>\n                                <Translate content={\"explorer.fees.fee\"} />\n                            </th>\n                            <th style={{textAlign: \"right\"}}>\n                                <Translate content={\"explorer.fees.feeltm\"} />\n                            </th>\n                        </tr>\n                    </thead>\n                    {fees}\n                </table>\n            </div>\n        );\n    }\n}\nFeeGroup = BindToChainState(FeeGroup);\n\nclass Fees extends React.Component {\n    render() {\n        let FeeGroupsTitle = counterpart.translate(\"transaction.feeGroups\");\n        let feeGroups = [];\n\n        for (let groupName in fee_grouping) {\n            let groupNameText = FeeGroupsTitle[groupName];\n            let feeIds = fee_grouping[groupName];\n            feeGroups.push(\n                <FeeGroup\n                    key={groupName}\n                    settings={this.props.settings}\n                    opIds={feeIds}\n                    title={groupNameText}\n                />\n            );\n        }\n\n        return (\n            <div className=\"grid-block vertical\" style={{overflow: \"visible\"}}>\n                <div\n                    className=\"grid-block small-12 shrink\"\n                    style={{overflow: \"visible\"}}\n                >\n                    <HelpContent path={\"components/Fees\"} />\n                </div>\n                <div\n                    className=\"grid-block small-12 \"\n                    style={{overflow: \"visible\"}}\n                >\n                    <div className=\"grid-content\">{feeGroups}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Fees;\n","import React from \"react\";\nimport BlockchainStore from \"stores/BlockchainStore\";\nimport AltContainer from \"alt-container\";\nimport Blocks from \"./Blocks\";\n\nclass BlocksContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[BlockchainStore]}\n                inject={{\n                    latestBlocks: () => {\n                        return BlockchainStore.getState().latestBlocks;\n                    },\n                    latestTransactions: () => {\n                        return BlockchainStore.getState().latestTransactions;\n                    }\n                }}\n            >\n                <Blocks />\n            </AltContainer>\n        );\n    }\n}\n\nexport default BlocksContainer;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport BlockchainActions from \"actions/BlockchainActions\";\nimport Translate from \"react-translate-component\";\nimport {FormattedDate} from \"react-intl\";\nimport Operation from \"../Blockchain/Operation\";\nimport LinkToWitnessById from \"../Utility/LinkToWitnessById\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport AssetWrapper from \"../Utility/AssetWrapper\";\nimport TransactionChart from \"./TransactionChart\";\nimport BlocktimeChart from \"./BlocktimeChart\";\nimport classNames from \"classnames\";\nimport utils from \"common/utils\";\nimport Immutable from \"immutable\";\nimport TimeAgo from \"../Utility/TimeAgo\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport Ps from \"perfect-scrollbar\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\n\nrequire(\"../Blockchain/json-inspector.scss\");\n\nclass BlockTimeAgo extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.blockTime !== this.props.blockTime;\n    }\n\n    render() {\n        let {blockTime} = this.props;\n\n        // let timePassed = Date.now() - blockTime;\n        let timePassed = new Date().getTime() - new Date(blockTime).getTime();\n\n        let textClass = classNames(\n            \"txtlabel\",\n            {success: timePassed <= 6000},\n            {info: timePassed > 6000 && timePassed <= 15000},\n            {warning: timePassed > 15000 && timePassed <= 25000},\n            {error: timePassed > 25000}\n        );\n\n        return blockTime ? (\n            <h3 className={textClass}>\n                <TimeAgo time={blockTime} />\n            </h3>\n        ) : null;\n    }\n}\n\nclass Blocks extends React.Component {\n    static propTypes = {\n        globalObject: ChainTypes.ChainObject.isRequired,\n        dynGlobalObject: ChainTypes.ChainObject.isRequired\n    };\n\n    static defaultProps = {\n        globalObject: \"2.0.0\",\n        dynGlobalObject: \"2.1.0\",\n        latestBlocks: {},\n        assets: {},\n        accounts: {},\n        height: 1\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            animateEnter: false,\n            operationsHeight: null,\n            blocksHeight: null\n        };\n\n        this._updateHeight = this._updateHeight.bind(this);\n    }\n\n    _getBlock(height, maxBlock) {\n        if (height) {\n            height = parseInt(height, 10);\n            BlockchainActions.getLatest(height, maxBlock);\n        }\n    }\n\n    componentWillMount() {\n        window.addEventListener(\"resize\", this._updateHeight, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._updateHeight);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.latestBlocks.size === 0) {\n            return this._getInitialBlocks();\n        } else if (!this.state.animateEnter) {\n            this.setState({\n                animateEnter: true\n            });\n        }\n\n        let maxBlock = nextProps.dynGlobalObject.get(\"head_block_number\");\n        if (\n            nextProps.latestBlocks.size >= 20 &&\n            nextProps.dynGlobalObject.get(\"head_block_number\") !==\n                nextProps.latestBlocks.get(0).id\n        ) {\n            return this._getBlock(maxBlock, maxBlock);\n        }\n    }\n\n    componentDidMount() {\n        this._getInitialBlocks();\n        let oc = this.refs.operations;\n        Ps.initialize(oc);\n        let blocks = this.refs.blocks;\n        Ps.initialize(blocks);\n        this._updateHeight();\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !Immutable.is(nextProps.latestBlocks, this.props.latestBlocks) ||\n            !utils.are_equal_shallow(nextState, this.state)\n        );\n    }\n\n    componentDidUpdate() {\n        this._updateHeight();\n    }\n\n    _getInitialBlocks() {\n        let maxBlock = parseInt(\n            this.props.dynGlobalObject.get(\"head_block_number\"),\n            10\n        );\n        if (maxBlock) {\n            for (let i = 19; i >= 0; i--) {\n                let exists = false;\n                if (this.props.latestBlocks.size > 0) {\n                    for (let j = 0; j < this.props.latestBlocks.size; j++) {\n                        if (\n                            this.props.latestBlocks.get(j).id ===\n                            maxBlock - i\n                        ) {\n                            exists = true;\n                            break;\n                        }\n                    }\n                }\n                if (!exists) {\n                    this._getBlock(maxBlock - i, maxBlock);\n                }\n            }\n        }\n    }\n\n    _updateHeight() {\n        let containerHeight = this.refs.outerWrapper.offsetHeight;\n        let operationsTextHeight = this.refs.operationsText.offsetHeight;\n        let blocksTextHeight = this.refs.blocksText.offsetHeight;\n\n        this.setState(\n            {\n                operationsHeight: containerHeight - operationsTextHeight,\n                blocksHeight: containerHeight - blocksTextHeight\n            },\n            this.psUpdate\n        );\n    }\n\n    psUpdate() {\n        let oc = this.refs.operations;\n        Ps.update(oc);\n        let blocks = this.refs.blocks;\n        Ps.update(blocks);\n    }\n\n    render() {\n        let {\n            latestBlocks,\n            latestTransactions,\n            globalObject,\n            dynGlobalObject,\n            coreAsset\n        } = this.props;\n        let {blocksHeight, operationsHeight} = this.state;\n        const dynamicObject = this.props.getDynamicObject(\n            coreAsset.get(\"dynamic_asset_data_id\")\n        );\n        let blocks = null,\n            transactions = null;\n        let headBlock = null;\n        let trxCount = 0,\n            blockCount = latestBlocks.size,\n            trxPerSec = 0,\n            blockTimes = [],\n            avgTime = 0;\n\n        if (latestBlocks && latestBlocks.size >= 20) {\n            let previousTime;\n\n            let lastBlock, firstBlock;\n\n            // Map out the block times for the latest blocks and count the number of transactions\n            latestBlocks\n                .filter((a, index) => {\n                    // Only use consecutive blocks counting back from head block\n                    return (\n                        a.id ===\n                        dynGlobalObject.get(\"head_block_number\") - index\n                    );\n                })\n                .sort((a, b) => {\n                    return a.id - b.id;\n                })\n                .forEach((block, index) => {\n                    trxCount += block.transactions.length;\n                    if (index > 0) {\n                        blockTimes.push([\n                            block.id,\n                            (block.timestamp - previousTime) / 1000\n                        ]);\n                        lastBlock = block.timestamp;\n                    } else {\n                        firstBlock = block.timestamp;\n                    }\n                    previousTime = block.timestamp;\n                });\n\n            // Output block rows for the last 20 blocks\n            blocks = latestBlocks\n                .sort((a, b) => {\n                    return b.id - a.id;\n                })\n                .take(20)\n                .map(block => {\n                    return (\n                        <tr key={block.id}>\n                            <td>\n                                <Link to={`/block/${block.id}`}>\n                                    #{utils.format_number(block.id, 0)}\n                                </Link>\n                            </td>\n                            <td>\n                                <FormattedDate\n                                    value={block.timestamp}\n                                    format=\"time\"\n                                />\n                            </td>\n                            <td>\n                                <LinkToWitnessById witness={block.witness} />\n                            </td>\n                            <td>\n                                {utils.format_number(\n                                    block.transactions.length,\n                                    0\n                                )}\n                            </td>\n                        </tr>\n                    );\n                })\n                .toArray();\n\n            let trxIndex = 0;\n\n            transactions = latestTransactions\n                .sort((a, b) => {\n                    return b.block_num - a.block_num;\n                })\n                .take(20)\n                .map(trx => {\n                    let opIndex = 0;\n                    return trx.operations\n                        .map(op => {\n                            if (trxIndex > 15) return null;\n                            return (\n                                <Operation\n                                    key={trxIndex++}\n                                    op={op}\n                                    result={trx.operation_results[opIndex++]}\n                                    block={trx.block_num}\n                                    hideFee={true}\n                                    hideOpLabel={false}\n                                    current={\"1.2.0\"}\n                                    hideDate\n                                    hidePending\n                                />\n                            );\n                        })\n                        .filter(a => !!a);\n                })\n                .toArray();\n\n            headBlock = latestBlocks.first().timestamp;\n            avgTime = blockTimes.reduce((previous, current, idx, array) => {\n                return previous + current[1] / array.length;\n            }, 0);\n\n            trxPerSec = trxCount / ((lastBlock - firstBlock) / 1000);\n        }\n\n        return (\n            <div ref=\"outerWrapper\" className=\"grid-block vertical\">\n                {/* First row of stats */}\n                <div className=\"align-center grid-block shrink small-horizontal blocks-row\">\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.current_block\"\n                                />\n                            </span>\n                            <h2>\n                                #{utils.format_number(\n                                    dynGlobalObject.get(\"head_block_number\"),\n                                    0\n                                )}\n                            </h2>\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.last_block\"\n                                />\n                            </span>\n                            <BlockTimeAgo blockTime={headBlock} />\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.trx_per_sec\"\n                                />\n                            </span>\n                            <h2>{utils.format_number(trxPerSec, 2)}</h2>\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.avg_conf_time\"\n                                />\n                            </span>\n                            <h2>{utils.format_number(avgTime / 2, 2)}s</h2>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Second row of stats */}\n                <div className=\"align-center grid-block shrink small-horizontal  blocks-row\">\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.active_witnesses\"\n                                />\n                            </span>\n                            <h2 className=\"txtlabel success\">\n                                {globalObject.get(\"active_witnesses\").size}\n                            </h2>\n                        </div>\n                    </div>\n\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.active_committee_members\"\n                                />\n                            </span>\n                            <h2 className=\"txtlabel success\">\n                                {\n                                    globalObject.get(\"active_committee_members\")\n                                        .size\n                                }\n                            </h2>\n                        </div>\n                    </div>\n\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.trx_per_block\"\n                                />\n                            </span>\n                            <h2>\n                                {utils.format_number(\n                                    trxCount / blockCount || 0,\n                                    2\n                                )}\n                            </h2>\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-6 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.recently_missed_blocks\"\n                                />\n                            </span>\n                            <h2\n                                className=\"txtlabel warning\"\n                                style={{fontWeight: \"100\"}}\n                            >\n                                {dynGlobalObject.get(\"recently_missed_count\")}\n                            </h2>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Third row: graphs */}\n                <div className=\"align-center grid-block shrink small-vertical medium-horizontal blocks-row\">\n                    <div className=\"grid-block text-center small-12 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.asset.summary.current_supply\"\n                                />\n                            </span>\n                            <h3 className=\"txtlabel\">\n                                {dynamicObject ? (\n                                    <FormattedAsset\n                                        amount={dynamicObject.get(\n                                            \"current_supply\"\n                                        )}\n                                        asset={coreAsset.get(\"id\")}\n                                        decimalOffset={5}\n                                    />\n                                ) : null}\n                            </h3>\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-12 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <div className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.block_times\"\n                                />\n                            </div>\n                            <BlocktimeChart\n                                blockTimes={blockTimes}\n                                head_block_number={dynGlobalObject.get(\n                                    \"head_block_number\"\n                                )}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-12 medium-3\">\n                        <div className=\"grid-content no-overflow\">\n                            <div className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.blocks.trx_per_block\"\n                                />\n                            </div>\n                            <TransactionChart\n                                blocks={latestBlocks}\n                                head_block={dynGlobalObject.get(\n                                    \"head_block_number\"\n                                )}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"grid-block text-center small-12 medium-3\">\n                        <div className=\"grid-content no-overflow clear-fix\">\n                            <span className=\"txtlabel\">\n                                <Translate\n                                    component=\"span\"\n                                    content=\"explorer.asset.summary.stealth_supply\"\n                                />\n                            </span>\n                            <h3 className=\"txtlabel\">\n                                {dynamicObject ? (\n                                    <FormattedAsset\n                                        amount={dynamicObject.get(\n                                            \"confidential_supply\"\n                                        )}\n                                        asset={coreAsset.get(\"id\")}\n                                        decimalOffset={5}\n                                    />\n                                ) : null}\n                            </h3>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Fourth row: transactions and blocks */}\n                <div ref=\"transactionsBlock\" className=\"grid-block no-overflow\">\n                    <div\n                        className=\"grid-block small-12 medium-6 vertical no-overflow\"\n                        style={{paddingBottom: 0}}\n                    >\n                        <div className=\"grid-block vertical no-overflow generic-bordered-box\">\n                            <div ref=\"operationsText\">\n                                <div className=\"block-content-header\">\n                                    <Translate content=\"account.recent\" />\n                                </div>\n                                <table className=\"table fixed-height-2rem\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <Translate content=\"account.votes.info\" />\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                </table>\n                            </div>\n                            <div\n                                className=\"grid-block\"\n                                style={{\n                                    maxHeight: operationsHeight || \"400px\",\n                                    overflow: \"hidden\"\n                                }}\n                                ref=\"operations\"\n                            >\n                                <table className=\"table fixed-height-2rem\">\n                                    <tbody>{transactions}</tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        className=\"grid-block medium-6 show-for-medium vertical no-overflow\"\n                        style={{paddingBottom: 0, paddingLeft: 5}}\n                    >\n                        <div className=\"grid-block vertical no-overflow generic-bordered-box\">\n                            <div ref=\"blocksText\">\n                                <div className=\"block-content-header\">\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"explorer.blocks.recent\"\n                                    />\n                                </div>\n                            </div>\n                            <div\n                                className=\"grid-block vertical\"\n                                style={{\n                                    maxHeight: blocksHeight || \"438px\",\n                                    overflow: \"hidden\"\n                                }}\n                                ref=\"blocks\"\n                            >\n                                <table className=\"table fixed-height-2rem\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <Translate\n                                                    component=\"span\"\n                                                    content=\"explorer.block.id\"\n                                                />\n                                            </th>\n                                            <th>\n                                                <Translate\n                                                    component=\"span\"\n                                                    content=\"explorer.block.date\"\n                                                />\n                                            </th>\n                                            <th>\n                                                <Translate\n                                                    component=\"span\"\n                                                    content=\"explorer.block.witness\"\n                                                />\n                                            </th>\n                                            <th>\n                                                <Translate\n                                                    component=\"span\"\n                                                    content=\"explorer.block.count\"\n                                                />\n                                            </th>\n                                        </tr>\n                                    </thead>\n\n                                    <TransitionWrapper\n                                        component=\"tbody\"\n                                        transitionName=\"newrow\"\n                                    >\n                                        {blocks}\n                                    </TransitionWrapper>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nBlocks = BindToChainState(Blocks, {show_loader: true});\nBlocks = AssetWrapper(Blocks, {\n    propNames: [\"coreAsset\"],\n    withDynamic: true\n});\nexport default Blocks;\n","import React from \"react\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport LinkToAccountById from \"./LinkToAccountById\";\n\nclass LinkToWitnessById extends React.Component {\n    static propTypes = {\n        witness: ChainTypes.ChainObject.isRequired\n    };\n\n    render() {\n        let witness_account = this.props.witness.get(\"witness_account\");\n        return <LinkToAccountById account={witness_account} />;\n    }\n}\nLinkToWitnessById = BindToChainState(LinkToWitnessById);\n\nexport default LinkToWitnessById;\n","import React from \"react\";\nimport ReactHighchart from \"react-highcharts\";\nimport counterpart from \"counterpart\";\n\nclass TransactionChart extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.blocks.size < 20) {\n            return false;\n        }\n        let chart = this.refs.trx_chart ? this.refs.trx_chart.chart : null;\n        if (chart && nextProps.blocks !== this.props.blocks) {\n            let {trxData, colors} = this._getData(nextProps);\n            let series = chart.series[0];\n            let finalValue = series.xData[series.xData.length - 1];\n\n            // console.log(\"chart:\", chart, \"series:\", series.data, \"finalValue:\", finalValue);\n            if (series.xData.length) {\n                trxData.forEach(point => {\n                    if (point[0] > finalValue) {\n                        series.addPoint(\n                            point,\n                            false,\n                            series.xData.length >= 30\n                        );\n                    }\n                });\n\n                chart.options.plotOptions.column.colors = colors;\n\n                chart.redraw();\n                return false;\n            }\n        }\n        return (\n            nextProps.blocks !== this.props.blocks ||\n            nextProps.head_block !== this.props.head_block\n        );\n    }\n\n    _getData(props) {\n        let {blocks, head_block} = props;\n\n        let trxData = [];\n        let max = 0;\n        trxData = blocks\n            .filter(a => {\n                return a.id >= head_block - 30;\n            })\n            .sort((a, b) => {\n                return a.id - b.id;\n            })\n            .takeLast(30)\n            .map(block => {\n                max = Math.max(block.transactions.length, max);\n                return [block.id, block.transactions.length];\n            })\n            .toArray();\n\n        let colors = trxData.map(entry => {\n            // console.log(\"entry:\", entry);\n            if (entry[1] <= 5) {\n                return \"#50D2C2\";\n            } else if (entry[1] <= 10) {\n                return \"#A0D3E8\";\n            } else if (entry[1] <= 20) {\n                return \"#FCAB53\";\n            } else {\n                return \"#deb869\";\n            }\n        });\n\n        return {\n            colors,\n            trxData,\n            max\n        };\n    }\n\n    render() {\n        let {trxData, colors, max} = this._getData(this.props);\n\n        let tooltipLabel = counterpart.translate(\n            \"explorer.blocks.transactions\"\n        );\n\n        let config = {\n            chart: {\n                type: \"column\",\n                backgroundColor: \"rgba(255, 0, 0, 0)\",\n                spacing: [0, 0, 5, 0],\n                height: 100\n            },\n            title: {\n                text: null\n            },\n            credits: {\n                enabled: false\n            },\n            legend: {\n                enabled: false\n            },\n            rangeSelector: {\n                enabled: false\n            },\n            navigator: {\n                enabled: false\n            },\n            scrollbar: {\n                enabled: false\n            },\n            tooltip: {\n                shared: false,\n                formatter: function() {\n                    return tooltipLabel + \": \" + this.y;\n                }\n            },\n            series: [\n                {\n                    name: \"Transactions\",\n                    data: trxData,\n                    color: \"#50D2C2\"\n                }\n            ],\n            xAxis: {\n                labels: {\n                    enabled: false\n                },\n                title: {\n                    text: null\n                }\n            },\n            yAxis: {\n                min: 0,\n                max: Math.max(1.5, max + 0.5),\n                title: {\n                    text: null\n                },\n                labels: {\n                    enabled: false\n                },\n                gridLineWidth: 0,\n                currentPriceIndicator: {\n                    enabled: false\n                }\n            },\n            plotOptions: {\n                column: {\n                    animation: true,\n                    minPointLength: 5,\n                    colorByPoint: true,\n                    colors: colors,\n                    borderWidth: 0\n                }\n            }\n        };\n\n        return trxData.length ? (\n            <ReactHighchart ref=\"trx_chart\" config={config} />\n        ) : null;\n    }\n}\n\nexport default TransactionChart;\n","import React from \"react\";\nimport ReactHighchart from \"react-highcharts\";\nimport {takeRight} from \"lodash-es\";\nimport counterpart from \"counterpart\";\n\nclass BlocktimeChart extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.blockTimes.length < 19) {\n            return false;\n        } else if (this.props.blockTimes.length === 0) {\n            return true;\n        }\n\n        let chart = this.refs.chart ? this.refs.chart.chart : null;\n        if (chart) {\n            let {blockTimes, colors} = this._getData(nextProps);\n            let series = chart.series[0];\n            let finalValue = series.xData[series.xData.length - 1];\n\n            if (series.xData.length) {\n                // console.log(chart, \"series:\", series.data, \"finalValue:\", finalValue);\n                blockTimes.forEach(point => {\n                    if (point[0] > finalValue) {\n                        series.addPoint(\n                            point,\n                            false,\n                            series.xData.length >= 30\n                        );\n                    }\n                });\n\n                chart.options.plotOptions.column.colors = colors;\n\n                chart.redraw();\n                return false;\n            }\n        }\n\n        return (\n            nextProps.blockTimes[nextProps.blockTimes.length - 1][0] !==\n                this.props.blockTimes[this.props.blockTimes.length - 1][0] ||\n            nextProps.blockTimes.length !== this.props.blockTimes.length\n        );\n    }\n\n    _getData() {\n        let {blockTimes, head_block} = this.props;\n\n        blockTimes.filter(a => {\n            return a[0] >= head_block - 30;\n        });\n\n        if (blockTimes && blockTimes.length) {\n            blockTimes = takeRight(blockTimes, 30);\n        }\n\n        let colors = blockTimes.map(entry => {\n            if (entry[1] <= 5) {\n                return \"#50D2C2\";\n            } else if (entry[1] <= 10) {\n                return \"#A0D3E8\";\n            } else if (entry[1] <= 20) {\n                return \"#FCAB53\";\n            } else {\n                return \"#deb869\";\n            }\n        });\n\n        return {\n            blockTimes,\n            colors\n        };\n    }\n\n    render() {\n        let {blockTimes, colors} = this._getData(this.props);\n\n        let tooltipLabel = counterpart.translate(\"explorer.blocks.block_time\");\n\n        let config = {\n            chart: {\n                type: \"column\",\n                backgroundColor: \"rgba(255, 0, 0, 0)\",\n                spacing: [0, 0, 5, 0],\n                height: 100\n            },\n            title: {\n                text: null\n            },\n            credits: {\n                enabled: false\n            },\n            legend: {\n                enabled: false\n            },\n            rangeSelector: {\n                enabled: false\n            },\n            navigator: {\n                enabled: false\n            },\n            scrollbar: {\n                enabled: false\n            },\n            tooltip: {\n                shared: false,\n                formatter: function() {\n                    return tooltipLabel + \": \" + this.y + \"s\";\n                }\n            },\n            series: [\n                {\n                    name: \"Block time\",\n                    data: blockTimes,\n                    color: \"#50D2C2\"\n                }\n            ],\n            xAxis: {\n                labels: {\n                    enabled: false\n                },\n                title: {\n                    text: null\n                }\n            },\n            yAxis: {\n                min: 0,\n                title: {\n                    text: null\n                },\n                labels: {\n                    enabled: false\n                },\n                gridLineWidth: 0,\n                currentPriceIndicator: {\n                    enabled: false\n                }\n            },\n            plotOptions: {\n                column: {\n                    animation: true,\n                    minPointLength: 3,\n                    colorByPoint: true,\n                    colors: colors,\n                    borderWidth: 0\n                }\n            }\n        };\n\n        return blockTimes.length ? (\n            <ReactHighchart ref=\"chart\" config={config} />\n        ) : null;\n    }\n}\n\nexport default BlocktimeChart;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements taken from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.takeRight([1, 2, 3]);\n * // => [3]\n *\n * _.takeRight([1, 2, 3], 2);\n * // => [2, 3]\n *\n * _.takeRight([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.takeRight([1, 2, 3], 0);\n * // => []\n */\nfunction takeRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default takeRight;\n","import React from \"react\";\nimport AssetStore from \"stores/AssetStore\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport AltContainer from \"alt-container\";\nimport Assets from \"./Assets\";\n\nclass AssetsContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[AssetStore, SettingsStore]}\n                inject={{\n                    assets: () => {\n                        return AssetStore.getState().assets;\n                    },\n                    filterMPA: () => {\n                        return SettingsStore.getState().viewSettings.get(\n                            \"filterMPA\"\n                        );\n                    },\n                    filterUIA: () => {\n                        return SettingsStore.getState().viewSettings.get(\n                            \"filterUIA\"\n                        );\n                    }\n                }}\n            >\n                <Assets />\n            </AltContainer>\n        );\n    }\n}\n\nexport default AssetsContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AssetActions from \"actions/AssetActions\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport {Link} from \"react-router-dom\";\nimport Immutable from \"immutable\";\nimport Translate from \"react-translate-component\";\nimport LinkToAccountById from \"../Utility/LinkToAccountById\";\nimport assetUtils from \"common/asset_utils\";\nimport counterpart from \"counterpart\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport AssetName from \"../Utility/AssetName\";\nimport {ChainStore} from \"bitsharesjs\";\nimport cnames from \"classnames\";\nimport utils from \"common/utils\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport ls from \"common/localStorage\";\n\nlet accountStorage = new ls(\"__graphene__\");\n\nclass Assets extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            foundLast: false,\n            lastAsset: \"\",\n            isLoading: false,\n            totalAssets:\n                typeof accountStorage.get(\"totalAssets\") != \"object\"\n                    ? accountStorage.get(\"totalAssets\")\n                    : 3000,\n            assetsFetched: 0,\n            activeFilter: \"market\",\n            filterUIA: props.filterUIA || \"\",\n            filterMPA: props.filterMPA || \"\",\n            filterPM: props.filterPM || \"\"\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !Immutable.is(nextProps.assets, this.props.assets) ||\n            !utils.are_equal_shallow(nextState, this.state)\n        );\n    }\n\n    componentWillMount() {\n        this._checkAssets(this.props.assets, true);\n    }\n\n    _checkAssets(assets, force) {\n        this.setState({isLoading: true});\n        let lastAsset = assets\n            .sort((a, b) => {\n                if (a.symbol > b.symbol) {\n                    return 1;\n                } else if (a.symbol < b.symbol) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            })\n            .last();\n\n        if (assets.size === 0 || force) {\n            AssetActions.getAssetList.defer(\"A\", 100);\n            this.setState({assetsFetched: 100});\n        } else if (assets.size >= this.state.assetsFetched) {\n            AssetActions.getAssetList.defer(lastAsset.symbol, 100);\n            this.setState({assetsFetched: this.state.assetsFetched + 99});\n        }\n\n        if (assets.size > this.state.totalAssets) {\n            accountStorage.set(\"totalAssets\", assets.size);\n        }\n\n        if (this.state.assetsFetched >= this.state.totalAssets - 100) {\n            this.setState({isLoading: false});\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.assets !== this.props.assets) {\n            this._checkAssets(nextProps.assets);\n        }\n    }\n\n    linkToAccount(name_or_id) {\n        if (!name_or_id) {\n            return <span>-</span>;\n        }\n\n        return <LinkToAccountById account={name_or_id} />;\n    }\n\n    _toggleFilter(filter) {\n        this.setState({\n            activeFilter: filter\n        });\n    }\n\n    _onFilter(type, e) {\n        this.setState({[type]: e.target.value.toUpperCase()});\n        SettingsActions.changeViewSetting({\n            [type]: e.target.value.toUpperCase()\n        });\n    }\n\n    render() {\n        let {assets} = this.props;\n        let {activeFilter} = this.state;\n\n        let placeholder = counterpart.translate(\"markets.filter\").toUpperCase();\n        let coreAsset = ChainStore.getAsset(\"1.3.0\");\n\n        let uia;\n        let mia;\n        let pm;\n\n        if (activeFilter == \"user\") {\n            uia = assets\n                .filter(a => {\n                    return (\n                        !a.market_asset &&\n                        a.symbol.indexOf(this.state.filterUIA) !== -1\n                    );\n                })\n                .map(asset => {\n                    let description = assetUtils.parseDescription(\n                        asset.options.description\n                    );\n\n                    let marketID =\n                        asset.symbol +\n                        \"_\" +\n                        (description.market\n                            ? description.market\n                            : coreAsset\n                                ? coreAsset.get(\"symbol\")\n                                : \"BTS\");\n\n                    return (\n                        <tr key={asset.symbol}>\n                            <td>\n                                <Link to={`/asset/${asset.symbol}`}>\n                                    <AssetName name={asset.symbol} />\n                                </Link>\n                            </td>\n                            <td>{this.linkToAccount(asset.issuer)}</td>\n                            <td>\n                                <FormattedAsset\n                                    amount={asset.dynamic.current_supply}\n                                    asset={asset.id}\n                                    hide_asset={true}\n                                />\n                            </td>\n                            <td>\n                                <Link\n                                    className=\"button outline\"\n                                    to={`/market/${marketID}`}\n                                >\n                                    <Translate content=\"header.exchange\" />\n                                </Link>\n                            </td>\n                        </tr>\n                    );\n                })\n                .sort((a, b) => {\n                    if (a.key > b.key) {\n                        return 1;\n                    } else if (a.key < b.key) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                })\n                .toArray();\n        }\n\n        if (activeFilter == \"market\") {\n            mia = assets\n                .filter(a => {\n                    return (\n                        a.bitasset_data &&\n                        !a.bitasset_data.is_prediction_market &&\n                        a.symbol.indexOf(this.state.filterMPA) !== -1\n                    );\n                })\n                .map(asset => {\n                    let description = assetUtils.parseDescription(\n                        asset.options.description\n                    );\n\n                    let marketID =\n                        asset.symbol +\n                        \"_\" +\n                        (description.market\n                            ? description.market\n                            : coreAsset\n                                ? coreAsset.get(\"symbol\")\n                                : \"BTS\");\n\n                    return (\n                        <tr key={asset.symbol}>\n                            <td>\n                                <Link to={`/asset/${asset.symbol}`}>\n                                    <AssetName name={asset.symbol} />\n                                </Link>\n                            </td>\n                            <td>{this.linkToAccount(asset.issuer)}</td>\n                            <td>\n                                <FormattedAsset\n                                    amount={asset.dynamic.current_supply}\n                                    asset={asset.id}\n                                    hide_asset={true}\n                                />\n                            </td>\n                            <td>\n                                <Link\n                                    className=\"button outline\"\n                                    to={`/market/${marketID}`}\n                                >\n                                    <Translate content=\"header.exchange\" />\n                                </Link>\n                            </td>\n                        </tr>\n                    );\n                })\n                .sort((a, b) => {\n                    if (a.key > b.key) {\n                        return 1;\n                    } else if (a.key < b.key) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                })\n                .toArray();\n        }\n\n        if (activeFilter == \"prediction\") {\n            pm = assets\n                .filter(a => {\n                    let description = assetUtils.parseDescription(\n                        a.options.description\n                    );\n\n                    return (\n                        a.bitasset_data &&\n                        a.bitasset_data.is_prediction_market &&\n                        (a.symbol\n                            .toLowerCase()\n                            .indexOf(this.state.filterPM.toLowerCase()) !==\n                            -1 ||\n                            description.main\n                                .toLowerCase()\n                                .indexOf(this.state.filterPM.toLowerCase()) !==\n                                -1)\n                    );\n                })\n                .map(asset => {\n                    let description = assetUtils.parseDescription(\n                        asset.options.description\n                    );\n                    let marketID =\n                        asset.symbol +\n                        \"_\" +\n                        (description.market\n                            ? description.market\n                            : coreAsset\n                                ? coreAsset.get(\"symbol\")\n                                : \"BTS\");\n\n                    return (\n                        <tr key={asset.id.split(\".\")[2]}>\n                            <td style={{width: \"80%\"}}>\n                                <div\n                                    style={{paddingTop: 10, fontWeight: \"bold\"}}\n                                >\n                                    <Link to={`/asset/${asset.symbol}`}>\n                                        <AssetName name={asset.symbol} />\n                                    </Link>\n                                    {description.condition ? (\n                                        <span> ({description.condition})</span>\n                                    ) : null}\n                                </div>\n                                {description ? (\n                                    <div\n                                        style={{\n                                            padding: \"10px 20px 5px 0\",\n                                            lineHeight: \"18px\"\n                                        }}\n                                    >\n                                        {description.main}\n                                    </div>\n                                ) : null}\n                                <div\n                                    style={{\n                                        padding: \"0 20px 5px 0\",\n                                        lineHeight: \"18px\"\n                                    }}\n                                >\n                                    <LinkToAccountById account={asset.issuer} />\n                                    <span>\n                                        {\" \"}\n                                        -{\" \"}\n                                        <FormattedAsset\n                                            amount={\n                                                asset.dynamic.current_supply\n                                            }\n                                            asset={asset.id}\n                                        />\n                                    </span>\n                                    {description.expiry ? (\n                                        <span> - {description.expiry}</span>\n                                    ) : null}\n                                </div>\n                            </td>\n                            <td style={{width: \"20%\"}}>\n                                <Link\n                                    className=\"button outline\"\n                                    to={`/market/${marketID}`}\n                                >\n                                    <Translate content=\"header.exchange\" />\n                                </Link>\n                            </td>\n                        </tr>\n                    );\n                })\n                .sort((a, b) => {\n                    if (a.key > b.key) {\n                        return -1;\n                    } else if (a.key < b.key) {\n                        return 1;\n                    } else {\n                        return 0;\n                    }\n                })\n                .toArray();\n        }\n\n        return (\n            <div className=\"grid-block vertical\">\n                <div className=\"grid-block vertical\">\n                    <div className=\"grid-block main-content small-12 medium-10 medium-offset-1 main-content vertical\">\n                        <div className=\"generic-bordered-box tab-content\">\n                            <div className=\"header-selector\">\n                                <div className=\"selector\">\n                                    <div\n                                        className={cnames(\"inline-block\", {\n                                            inactive: activeFilter != \"market\"\n                                        })}\n                                        onClick={this._toggleFilter.bind(\n                                            this,\n                                            \"market\"\n                                        )}\n                                    >\n                                        <Translate content=\"explorer.assets.market\" />\n                                    </div>\n                                    <div\n                                        className={cnames(\"inline-block\", {\n                                            inactive: activeFilter != \"user\"\n                                        })}\n                                        onClick={this._toggleFilter.bind(\n                                            this,\n                                            \"user\"\n                                        )}\n                                    >\n                                        <Translate content=\"explorer.assets.user\" />\n                                    </div>\n                                    <div\n                                        className={cnames(\"inline-block\", {\n                                            inactive:\n                                                activeFilter != \"prediction\"\n                                        })}\n                                        onClick={this._toggleFilter.bind(\n                                            this,\n                                            \"prediction\"\n                                        )}\n                                    >\n                                        <Translate content=\"explorer.assets.prediction\" />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.state.isLoading ? <LoadingIndicator /> : null}\n                            {activeFilter == \"market\" ? (\n                                <div className=\"grid-block shrink\">\n                                    <div className=\"grid-content\">\n                                        <input\n                                            style={{maxWidth: \"500px\"}}\n                                            placeholder={placeholder}\n                                            type=\"text\"\n                                            value={this.state.filterMPA}\n                                            onChange={this._onFilter.bind(\n                                                this,\n                                                \"filterMPA\"\n                                            )}\n                                        />\n                                    </div>\n                                </div>\n                            ) : null}\n                            {activeFilter == \"market\" ? (\n                                <div\n                                    className=\"grid-block\"\n                                    style={{paddingBottom: 20}}\n                                >\n                                    <div className=\"grid-content\">\n                                        <table className=\"table\">\n                                            <thead>\n                                                <tr>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"explorer.assets.symbol\"\n                                                        />\n                                                    </th>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"explorer.assets.issuer\"\n                                                        />\n                                                    </th>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"markets.supply\"\n                                                        />\n                                                    </th>\n                                                    <th />\n                                                </tr>\n                                            </thead>\n                                            <tbody>{mia}</tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            ) : null}\n\n                            {activeFilter == \"user\" ? (\n                                <div className=\"grid-block shrink\">\n                                    <div className=\"grid-content\">\n                                        <input\n                                            style={{maxWidth: \"500px\"}}\n                                            placeholder={placeholder}\n                                            type=\"text\"\n                                            value={this.state.filterUIA}\n                                            onChange={this._onFilter.bind(\n                                                this,\n                                                \"filterUIA\"\n                                            )}\n                                        />\n                                    </div>\n                                </div>\n                            ) : null}\n\n                            {activeFilter == \"user\" ? (\n                                <div\n                                    className=\"grid-block\"\n                                    style={{paddingBottom: 20}}\n                                >\n                                    <div className=\"grid-content\">\n                                        <table className=\"table\">\n                                            <thead>\n                                                <tr>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"explorer.assets.symbol\"\n                                                        />\n                                                    </th>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"explorer.assets.issuer\"\n                                                        />\n                                                    </th>\n                                                    <th>\n                                                        <Translate\n                                                            component=\"span\"\n                                                            content=\"markets.supply\"\n                                                        />\n                                                    </th>\n                                                    <th />\n                                                </tr>\n                                            </thead>\n\n                                            <tbody>{uia}</tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            ) : null}\n\n                            {activeFilter == \"prediction\" ? (\n                                <div className=\"grid-block shrink\">\n                                    <div className=\"grid-content\">\n                                        <input\n                                            style={{maxWidth: \"500px\"}}\n                                            placeholder={counterpart\n                                                .translate(\"markets.search\")\n                                                .toUpperCase()}\n                                            type=\"text\"\n                                            value={this.state.filterPM}\n                                            onChange={this._onFilter.bind(\n                                                this,\n                                                \"filterPM\"\n                                            )}\n                                        />\n                                    </div>\n                                </div>\n                            ) : null}\n\n                            {activeFilter == \"prediction\" ? (\n                                <div\n                                    className=\"grid-block\"\n                                    style={{paddingBottom: 20}}\n                                >\n                                    <div className=\"grid-content\">\n                                        <table className=\"table\">\n                                            <tbody>{pm}</tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAssets.defaultProps = {\n    assets: {}\n};\n\nAssets.propTypes = {\n    assets: PropTypes.object.isRequired\n};\n\nexport default Assets;\n","import React from \"react\";\nimport AccountStore from \"stores/AccountStore\";\nimport AltContainer from \"alt-container\";\nimport Accounts from \"./Accounts\";\n\nclass AccountsContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[AccountStore]}\n                inject={{\n                    searchAccounts: () => {\n                        return AccountStore.getState().searchAccounts;\n                    },\n                    searchTerm: () => {\n                        return AccountStore.getState().searchTerm;\n                    }\n                }}\n            >\n                <Accounts />\n            </AltContainer>\n        );\n    }\n}\n\nexport default AccountsContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\nimport Immutable from \"immutable\";\nimport Translate from \"react-translate-component\";\nimport AccountActions from \"actions/AccountActions\";\nimport {debounce} from \"lodash-es\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport Icon from \"../Icon/Icon\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport BalanceComponent from \"../Utility/BalanceComponent\";\nimport AccountStore from \"stores/AccountStore\";\nimport {connect} from \"alt-react\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nclass AccountRow extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired\n    };\n\n    static defaultProps = {\n        tempComponent: \"tr\",\n        autosubscribe: false\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.contacts !== this.props.contacts ||\n            nextProps.account !== this.props.account\n        );\n    }\n\n    _onAddContact(account, e) {\n        e.preventDefault();\n        AccountActions.addAccountContact(account);\n    }\n\n    _onRemoveContact(account, e) {\n        e.preventDefault();\n        AccountActions.removeAccountContact(account);\n    }\n\n    render() {\n        let {account, contacts} = this.props;\n\n        if (!account) return null;\n        let balance = account.getIn([\"balances\", \"1.3.0\"]) || null;\n        let accountName = account.get(\"name\");\n\n        return (\n            <tr key={account.get(\"id\")}>\n                <td>{account.get(\"id\")}</td>\n                {contacts.has(accountName) ? (\n                    <td onClick={this._onRemoveContact.bind(this, accountName)}>\n                        <Icon\n                            name=\"minus-circle\"\n                            title=\"icons.minus_circle.remove_contact\"\n                        />\n                    </td>\n                ) : (\n                    <td onClick={this._onAddContact.bind(this, accountName)}>\n                        <Icon\n                            name=\"plus-circle\"\n                            title=\"icons.plus_circle.add_contact\"\n                        />\n                    </td>\n                )}\n                <td>\n                    <Link to={`/account/${accountName}/overview`}>\n                        {accountName}\n                    </Link>\n                </td>\n                <td>\n                    {!balance ? \"n/a\" : <BalanceComponent balance={balance} />}\n                </td>\n                <td>\n                    {!balance ? (\n                        \"n/a\"\n                    ) : (\n                        <BalanceComponent\n                            balance={balance}\n                            asPercentage={true}\n                        />\n                    )}\n                </td>\n            </tr>\n        );\n    }\n}\nAccountRow = BindToChainState(AccountRow);\n\nlet AccountRowWrapper = props => {\n    return <AccountRow {...props} />;\n};\n\nAccountRowWrapper = connect(\n    AccountRowWrapper,\n    {\n        listenTo() {\n            return [AccountStore];\n        },\n        getProps() {\n            return {\n                contacts: AccountStore.getState().accountContacts\n            };\n        }\n    }\n);\n\nclass Accounts extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            searchTerm: props.searchTerm,\n            isLoading: false\n        };\n\n        this._searchAccounts = debounce(this._searchAccounts, 200);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !Immutable.is(\n                nextProps.searchAccounts,\n                this.props.searchAccounts\n            ) ||\n            nextState.searchTerm !== this.state.searchTerm ||\n            nextState.isLoading !== this.state.isLoading\n        );\n    }\n\n    _onSearchChange(e) {\n        this.setState({\n            searchTerm: e.target.value.toLowerCase(),\n            isLoading: true\n        });\n        this._searchAccounts(e.target.value);\n    }\n\n    _searchAccounts(searchTerm) {\n        AccountActions.accountSearch(searchTerm);\n        this.setState({isLoading: false});\n    }\n\n    render() {\n        let {searchAccounts} = this.props;\n        let {searchTerm} = this.state;\n        let accountRows = null;\n\n        if (searchAccounts.size > 0 && searchTerm && searchTerm.length > 0) {\n            accountRows = searchAccounts\n                .filter(a => {\n                    /*\n                    * This appears to return false negatives, perhaps from\n                    * changed account name rules when moving to graphene?. Either\n                    * way, trying to resolve invalid names fails in the ChainStore,\n                    * which in turn breaks the BindToChainState wrapper\n                    */\n                    // if (!ChainValidation.is_account_name(a, true)) {\n                    //     return false;\n                    // }\n                    return a.indexOf(searchTerm) !== -1;\n                })\n                .sort((a, b) => {\n                    if (a > b) {\n                        return 1;\n                    } else if (a < b) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                })\n                .map((account, id) => {\n                    return <AccountRowWrapper key={id} account={account} />;\n                })\n                .toArray();\n        }\n\n        return (\n            <div className=\"grid-block\">\n                <div className=\"grid-block vertical medium-6 medium-offset-3\">\n                    <div className=\"grid-content shrink\">\n                        <Translate\n                            component=\"h3\"\n                            content=\"explorer.accounts.title\"\n                        />\n                        <input\n                            type=\"text\"\n                            value={this.state.searchTerm}\n                            onChange={this._onSearchChange.bind(this)}\n                        />\n                    </div>\n                    <div className=\"grid-content\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <Translate\n                                            component=\"span\"\n                                            content=\"explorer.assets.id\"\n                                        />\n                                    </th>\n                                    <th>\n                                        <Icon\n                                            name=\"user\"\n                                            title=\"icons.user.account\"\n                                        />\n                                    </th>\n                                    <th>\n                                        <Translate\n                                            component=\"span\"\n                                            content=\"account.name\"\n                                        />\n                                    </th>\n                                    <th>\n                                        <Translate\n                                            component=\"span\"\n                                            content=\"gateway.balance\"\n                                        />\n                                    </th>\n                                    <th>\n                                        <Translate\n                                            component=\"span\"\n                                            content=\"account.percent\"\n                                        />\n                                    </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {this.state.isLoading ? (\n                                    <tr colSpan=\"5\" />\n                                ) : (\n                                    accountRows\n                                )}\n                            </tbody>\n                        </table>\n                        {this.state.isLoading ? (\n                            <div style={{textAlign: \"center\", padding: 10}}>\n                                <LoadingIndicator type=\"three-bounce\" />\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAccounts.defaultProps = {\n    searchAccounts: {}\n};\n\nAccounts.propTypes = {\n    searchAccounts: PropTypes.object.isRequired\n};\n\nexport default Accounts;\n","import React from \"react\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport AssetStore from \"stores/AssetStore\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport AltContainer from \"alt-container\";\nimport Markets from \"./Markets\";\n\nclass MarketsContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[SettingsStore, AssetStore, MarketsStore]}\n                inject={{\n                    starredMarkets: () => {\n                        return SettingsStore.getState().starredMarkets;\n                    },\n                    viewSettings: () => {\n                        return SettingsStore.getState().viewSettings;\n                    },\n                    lookupResults: () => {\n                        return AssetStore.getState().lookupResults;\n                    },\n                    marketBase: () => {\n                        return MarketsStore.getState().marketBase;\n                    }\n                }}\n            >\n                <Markets />\n            </AltContainer>\n        );\n    }\n}\n\nexport default MarketsContainer;\n","import React from \"react\";\nimport MyMarkets from \"./MyMarkets\";\n\nclass Markets extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            height: null\n        };\n\n        this._setDimensions = this._setDimensions.bind(this);\n    }\n\n    componentWillMount() {\n        window.addEventListener(\"resize\", this._setDimensions, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    componentDidMount() {\n        this._setDimensions();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._setDimensions);\n    }\n\n    _setDimensions() {\n        let height = this.refs.wrapper.offsetHeight;\n\n        if (height !== this.state.height) {\n            this.setState({height});\n        }\n    }\n\n    render() {\n        return (\n            <div ref=\"wrapper\" className=\"grid-block page-layout no-overflow\">\n                <MyMarkets\n                    style={{width: \"100%\", padding: 20}}\n                    listHeight={\n                        this.state.height ? this.state.height - 82 : null\n                    }\n                    className=\"no-overflow\"\n                    headerStyle={{paddingTop: 0, borderTop: \"none\"}}\n                    columns={[\n                        {name: \"star\", index: 1},\n                        {name: \"market\", index: 2},\n                        {name: \"quoteSupply\", index: 3},\n                        {name: \"vol\", index: 4},\n                        {name: \"price\", index: 5},\n                        {name: \"change\", index: 6}\n                    ]}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Markets;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAJA;AAtCA;AAHA;AAiDA;AACA;;;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AARA;AAWA;;;;AAnFA;AACA;AAqFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAFA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAFA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAnBA;AADA;AARA;AAJA;AAJA;AA8CA;;;;AAjFA;AACA;AADA;AAEA;AADA;AACA;AAiFA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AARA;AAiBA;;;;AApEA;AACA;AADA;AAEA;AADA;AACA;AAoEA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAOA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AApBA;AA0BA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AArCA;AADA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAlDA;AAqDA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;;;;AArMA;AACA;AADA;AAEA;AADA;AACA;AAqMA;AACA;AADA;AACA;AAGA;;;AAWA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAEA;AAFA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAIA;AALA;AADA;AAJA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAJA;AAFA;AAJA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAJA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AARA;AARA;AA3EA;AADA;AAiGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAnGA;AADA;AAkHA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AARA;AADA;AADA;AAnHA;AADA;AAqIA;;;;AA1LA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAFA;AACA;AAqLA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AAXA;AACA;AAcA;;;;;;;AChlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AAGA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAJA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAGA;AALA;AAFA;AADA;AATA;AAJA;AAJA;AAiCA;;;;AAvDA;AACA;AADA;AAEA;AADA;AACA;AAuDA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAXA;AAkBA;;;;AA5CA;AACA;AADA;AAEA;AADA;AACA;AA4CA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAOA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AApBA;AA0BA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AAEA;AACA;AACA;AAHA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AASA;AAAA;AAAA;AACA;AADA;AAtBA;AADA;AA4BA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAgCA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;;;;AA9KA;AACA;AADA;AAEA;AADA;AACA;AA8KA;AACA;AADA;AACA;AAGA;;;AASA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAVA;AADA;AAyBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAWA;AAAA;AAAA;AACA;AACA;AAGA;AAGA;AACA;AARA;AADA;AAZA;AA1BA;AADA;AAuDA;;;;AAlHA;AACA;AADA;AAEA;AADA;AADA;AAMA;AADA;AACA;AA8GA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAJA;AAQA;AAbA;AACA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;AC7bA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AANA;AASA;;;;AAZA;AACA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AAKA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAQA;AAAA;AAAA;AACA;AACA;AAFA;AAlBA;AA6BA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AANA;AAgBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAVA;AADA;AAgBA;AAjBA;AAFA;AAuBA;;;;AArLA;AACA;AADA;AAEA;AADA;AADA;AAMA;AADA;AACA;AAiLA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAJA;AAPA;AAeA;;;;AAlCA;AACA;AAoCA;;;;;;;;;;;;;;;;;;;;;;;ACxPA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAXA;AAcA;;;;AAjBA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AADA;AAIA;;;;AAxBA;AACA;AA0BA;;;AAeA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAfA;AAuBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAPA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAvCA;AAqDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AAEA;AAFA;AAPA;AADA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAPA;AADA;AAhDA;AAmEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AALA;AAFA;AAPA;AADA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AAPA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AAPA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;AALA;AAFA;AAPA;AADA;AAtDA;AA8EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AADA;AAJA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AARA;AAfA;AAJA;AAiCA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAnBA;AADA;AA6BA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AA9BA;AARA;AATA;AAJA;AAlCA;AAxMA;AA0SA;;;;AA1iBA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAqiBA;AACA;AACA;AACA;AAFA;AAIA;;;;;;;;;;;;;;;;;;;;;;ACnmBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;;;;AARA;AACA;AADA;AAEA;AADA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AAVA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AA5DA;AACA;AAsEA;AAGA;;;;AA3JA;AACA;AA6JA;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AATA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AA3DA;AACA;AAqEA;AAGA;;;;AAnJA;AACA;AAqJA;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAbA;AAFA;AAkBA;AAlBA;AAqBA;;;;AAxBA;AACA;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAZA;AAFA;AAgBA;AACA;;;AACA;AACA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAGA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAdA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AAGA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAdA;AAwBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAYA;AAEA;AAGA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AANA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAGA;AAJA;AAHA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAlBA;AArBA;AA2CA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AA5CA;AAsDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AASA;AATA;AAWA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AASA;AATA;AAWA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AALA;AAUA;AAVA;AAvBA;AADA;AAsCA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AADA;AAeA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAnBA;AADA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAxBA;AADA;AAJA;AAmCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AADA;AAgBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAnBA;AADA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAzBA;AADA;AAJA;AAoCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAPA;AADA;AADA;AAkBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAJA;AAtKA;AADA;AADA;AADA;AAyLA;;;;AA3fA;AACA;AA6fA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC1hBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAXA;AAcA;;;;AAjBA;AACA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAUA;AACA;AAIA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAIA;AACA;AAFA;AAJA;AAzBA;AAqCA;;;;AAxEA;AACA;AADA;AAEA;AADA;AADA;AAMA;AACA;AAFA;AACA;AAoEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAWA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAPA;AAQA;AACA;;;AACA;AACA;AAQA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAzBA;AADA;AAmCA;AAAA;AAAA;AACA;AADA;AApCA;AA4CA;AACA;AAAA;AACA;AADA;AA9CA;AAZA;AADA;AAmEA;;;;AAzIA;AACA;AA2IA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;ACjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAFA;AAiBA;AAjBA;AAoBA;;;;AAvBA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AACA;AAGA;AANA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAPA;AADA;AAmBA;;;;AAtDA;AACA;AAwDA;;;;A","sourceRoot":""}