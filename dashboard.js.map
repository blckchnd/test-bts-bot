{"version":3,"file":"dashboard.196fa71c739010a24503.js","sources":["webpack:///app/components/Dashboard/DashboardContainer.jsx","webpack:///app/components/Dashboard/Dashboard.jsx","webpack:///app/components/Dashboard/MarketCard.jsx"],"sourcesContent":["import React from \"react\";\nimport AccountStore from \"stores/AccountStore\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport MarketsStore from \"stores/MarketsStore\";\n\nimport AltContainer from \"alt-container\";\nimport Dashboard from \"./Dashboard\";\n\nclass DashboardContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[AccountStore, SettingsStore, MarketsStore]}\n                inject={{\n                    linkedAccounts: () => {\n                        return AccountStore.getState().linkedAccounts;\n                    },\n                    myHiddenAccounts: () => {\n                        return AccountStore.getState().myHiddenAccounts;\n                    },\n                    accountsReady: () => {\n                        return (\n                            AccountStore.getState().accountsLoaded &&\n                            AccountStore.getState().refsLoaded\n                        );\n                    },\n                    passwordAccount: () => {\n                        return AccountStore.getState().passwordAccount;\n                    },\n                    lowVolumeMarkets: () => {\n                        return MarketsStore.getState().lowVolumeMarkets;\n                    },\n                    currentEntry: SettingsStore.getState().viewSettings.get(\n                        \"dashboardEntry\",\n                        \"accounts\"\n                    )\n                }}\n            >\n                <Dashboard {...this.props} />\n            </AltContainer>\n        );\n    }\n}\n\nexport default DashboardContainer;\n","import React from \"react\";\nimport Immutable from \"immutable\";\nimport DashboardList from \"./DashboardList\";\nimport {RecentTransactions} from \"../Account/RecentTransactions\";\nimport Translate from \"react-translate-component\";\nimport MarketCard from \"./MarketCard\";\nimport utils from \"common/utils\";\nimport {Apis} from \"bitsharesjs-ws\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport LoginSelector from \"../LoginSelector\";\nimport cnames from \"classnames\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport {connect} from \"alt-react\";\nimport {getFeaturedMarkets} from \"../../branding\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super();\n        let marketsByChain = {\n            \"4018d784\": getFeaturedMarkets(),\n            \"39f5e2ed\": [[\"TEST\", \"PEG.FAKEUSD\"], [\"TEST\", \"BTWTY\"]]\n        };\n        let chainID = Apis.instance().chain_id;\n        if (chainID) chainID = chainID.substr(0, 8);\n\n        this.state = {\n            width: null,\n            showIgnored: false,\n            featuredMarkets:\n                marketsByChain[chainID] || marketsByChain[\"4018d784\"],\n            newAssets: [],\n            currentEntry: props.currentEntry\n        };\n\n        this._setDimensions = this._setDimensions.bind(this);\n        // this._sortMarketsByVolume = this._sortMarketsByVolume.bind(this);\n    }\n\n    componentDidMount() {\n        this._setDimensions();\n\n        window.addEventListener(\"resize\", this._setDimensions, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !utils.are_equal_shallow(\n                nextState.featuredMarkets,\n                this.state.featuredMarkets\n            ) ||\n            !utils.are_equal_shallow(\n                nextProps.lowVolumeMarkets,\n                this.props.lowVolumeMarkets\n            ) ||\n            !utils.are_equal_shallow(\n                nextState.newAssets,\n                this.state.newAssets\n            ) ||\n            nextProps.linkedAccounts !== this.props.linkedAccounts ||\n            // nextProps.marketStats !== this.props.marketStats ||\n            nextProps.ignoredAccounts !== this.props.ignoredAccounts ||\n            nextProps.passwordAccount !== this.props.passwordAccount ||\n            nextState.width !== this.state.width ||\n            nextProps.accountsReady !== this.props.accountsReady ||\n            nextState.showIgnored !== this.state.showIgnored ||\n            nextState.currentEntry !== this.state.currentEntry\n        );\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._setDimensions);\n    }\n\n    _setDimensions() {\n        let width = window.innerWidth;\n\n        if (width !== this.state.width) {\n            this.setState({width});\n        }\n    }\n\n    _onToggleIgnored() {\n        this.setState({\n            showIgnored: !this.state.showIgnored\n        });\n    }\n\n    _onSwitchType(type) {\n        this.setState({\n            currentEntry: type\n        });\n        SettingsActions.changeViewSetting({\n            dashboardEntry: type\n        });\n    }\n\n    render() {\n        let {\n            linkedAccounts,\n            myHiddenAccounts,\n            accountsReady,\n            passwordAccount\n        } = this.props;\n        let {\n            width,\n            showIgnored,\n            featuredMarkets,\n            newAssets,\n            currentEntry\n        } = this.state;\n\n        if (passwordAccount && !linkedAccounts.has(passwordAccount)) {\n            linkedAccounts = linkedAccounts.add(passwordAccount);\n        }\n        let names = linkedAccounts.toArray().sort();\n        if (passwordAccount && names.indexOf(passwordAccount) === -1)\n            names.push(passwordAccount);\n        let ignored = myHiddenAccounts.toArray().sort();\n\n        let accountCount =\n            linkedAccounts.size +\n            myHiddenAccounts.size +\n            (passwordAccount ? 1 : 0);\n\n        if (!accountsReady) {\n            return <LoadingIndicator />;\n        }\n\n        let validMarkets = 0;\n\n        let markets = featuredMarkets\n            .map(pair => {\n                let isLowVolume =\n                    this.props.lowVolumeMarkets.get(pair[1] + \"_\" + pair[0]) ||\n                    this.props.lowVolumeMarkets.get(pair[0] + \"_\" + pair[1]);\n                // HACK: Show all defined markets\n                isLowVolume = false;\n                if (!isLowVolume) validMarkets++;\n                let className = \"\";\n                if (validMarkets > 15) {\n                    className += ` show-for-${\n                        !accountCount ? \"xlarge\" : \"large\"\n                    }`;\n                } else if (validMarkets > 12) {\n                    className += ` show-for-${\n                        !accountCount ? \"large\" : \"medium\"\n                    }`;\n                }\n\n                return (\n                    <MarketCard\n                        key={pair[0] + \"_\" + pair[1]}\n                        marketId={pair[1] + \"_\" + pair[0]}\n                        new={newAssets.indexOf(pair[1]) !== -1}\n                        className={className}\n                        quote={pair[0]}\n                        base={pair[1]}\n                        invert={pair[2]}\n                        isLowVolume={isLowVolume}\n                        hide={validMarkets > 29}\n                    />\n                );\n            })\n            .filter(a => !!a);\n\n        if (!accountCount) {\n            return <LoginSelector />;\n        }\n\n        const entries = [\"accounts\", \"contacts\", \"recent\"];\n\n        return (\n            <div ref=\"wrapper\" className=\"grid-block vertical\">\n                <div\n                    ref=\"container\"\n                    className=\"grid-container\"\n                    style={{padding: \"2rem 8px\"}}\n                >\n                    {this.props.onlyAccounts ? null : (\n                        <div\n                            className=\"block-content-header\"\n                            style={{marginBottom: 15, paddingTop: 0}}\n                        >\n                            <Translate content=\"exchange.featured\" />\n                        </div>\n                    )}\n                    {this.props.onlyAccounts ? null : (\n                        <div className=\"grid-block small-up-1 medium-up-3 large-up-4 no-overflow fm-outer-container\">\n                            {markets}\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nlet DashboardWrapper = props => {\n    return <Dashboard {...props} />;\n};\n\nexport default (DashboardWrapper = connect(\n    DashboardWrapper,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {\n                viewSettings: SettingsStore.getState().viewSettings\n            };\n        }\n    }\n));\n","import React from \"react\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport AssetName from \"../Utility/AssetName\";\nimport cnames from \"classnames\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport {connect} from \"alt-react\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport PropTypes from \"prop-types\";\n\nclass MarketCard extends React.Component {\n    static contextTypes = {\n        router: PropTypes.object.isRequired\n    };\n\n    static propTypes = {\n        quote: ChainTypes.ChainAsset.isRequired,\n        base: ChainTypes.ChainAsset.isRequired,\n        invert: PropTypes.bool\n    };\n\n    static defaultProps = {\n        invert: true\n    };\n\n    constructor() {\n        super();\n\n        this.statsInterval = null;\n\n        this.state = {\n            imgError: false\n        };\n    }\n\n    _checkStats(newStats = {close: {}}, oldStats = {close: {}}) {\n        return (\n            newStats.volumeBase !== oldStats.volumeBase ||\n            !utils.are_equal_shallow(\n                newStats.close && newStats.close.base,\n                oldStats.close && oldStats.close.base\n            ) ||\n            !utils.are_equal_shallow(\n                newStats.close && newStats.close.quote,\n                oldStats.close && oldStats.close.quote\n            )\n        );\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            this._checkStats(np.marketStats, this.props.marketStats) ||\n            np.base.get(\"id\") !== this.props.base.get(\"id\") ||\n            np.quote.get(\"id\") !== this.props.quote.get(\"id\") ||\n            ns.imgError !== this.state.imgError\n        );\n    }\n\n    componentWillMount() {\n        MarketsActions.getMarketStats.defer(this.props.quote, this.props.base);\n        this.statsChecked = new Date();\n        this.statsInterval = setInterval(\n            MarketsActions.getMarketStats.bind(\n                this,\n                this.props.quote,\n                this.props.base\n            ),\n            35 * 1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.statsInterval);\n    }\n\n    goToMarket(e) {\n        e.preventDefault();\n\n        var history = this.context.router.history;\n\n        history.push(\n            `/market/${this.props.base.get(\"symbol\")}_${this.props.quote.get(\n                \"symbol\"\n            )}`\n        );\n    }\n\n    _onError(imgName) {\n        if (!this.state.imgError) {\n            this.refs[imgName.toLowerCase()].src = \"asset-symbols/bts.png\";\n            this.setState({\n                imgError: true\n            });\n        }\n    }\n\n    render() {\n        let {hide, isLowVolume, base, quote, marketStats} = this.props;\n        if (isLowVolume || hide) return null;\n\n        function getImageName(asset) {\n            let symbol = asset.get(\"symbol\");\n            return symbol;\n            // if (symbol === \"OPEN.BTC\" || symbol === \"GDEX.BTC\") return symbol;\n            // if (symbol.startsWith(\"ESCROW.\")) return symbol;\n            // let imgName = asset.get(\"symbol\").split(\".\");\n            // return imgName.length === 2 ? imgName[1] : imgName[0];\n        }\n        let imgName = getImageName(base);\n\n        // let marketID = base.get(\"symbol\") + \"_\" + quote.get(\"symbol\");\n        // let stats = marketStats;\n        let changeClass = !marketStats\n            ? \"\"\n            : parseFloat(marketStats.change) > 0\n                ? \"change-up\"\n                : parseFloat(marketStats.change) < 0\n                    ? \"change-down\"\n                    : \"\";\n\n        return (\n            <div\n                className={cnames(\n                    \"grid-block no-overflow fm-container\",\n                    this.props.className\n                )}\n                onClick={this.goToMarket.bind(this)}\n            >\n                <div className=\"grid-block vertical shrink\">\n                    <div className=\"v-align\">\n                        <img\n                            className=\"align-center\"\n                            ref={imgName.toLowerCase()}\n                            onError={this._onError.bind(this, imgName)}\n                            style={{maxWidth: 70}}\n                            src={`${__BASE_URL__}asset-symbols/${imgName.toLowerCase()}.png`}\n                        />\n                    </div>\n                </div>\n                <div className=\"grid-block vertical no-overflow\">\n                    <div className=\"fm-name\">\n                        <AssetName dataPlace=\"top\" name={base.get(\"symbol\")} />{\" \"}\n                        :{\" \"}\n                        <AssetName dataPlace=\"top\" name={quote.get(\"symbol\")} />\n                    </div>\n                    <div className=\"fm-volume\">\n                        <Translate content=\"exchange.price\" />:{\" \"}\n                        <div className=\"float-right\">\n                            {marketStats && marketStats.price\n                                ? utils.price_text(\n                                      marketStats.price.toReal(),\n                                      base,\n                                      quote\n                                  )\n                                : null}\n                        </div>\n                    </div>\n                    <div className=\"fm-volume\">\n                        <Translate content=\"exchange.volume\" />:{\" \"}\n                        <div className=\"float-right\">\n                            {!marketStats\n                                ? null\n                                : utils.format_volume(\n                                      marketStats.volumeBase,\n                                      quote.get(\"precision\")\n                                  )}\n                        </div>\n                    </div>\n                    <div className=\"fm-change\">\n                        <Translate content=\"exchange.change\" />:{\" \"}\n                        <div className={cnames(\"float-right\", changeClass)}>\n                            {!marketStats ? null : marketStats.change}%\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMarketCard = BindToChainState(MarketCard);\n\nclass MarketCardWrapper extends React.Component {\n    render() {\n        return <MarketCard {...this.props} />;\n    }\n}\n\nexport default connect(\n    MarketCardWrapper,\n    {\n        listenTo() {\n            return [MarketsStore];\n        },\n        getProps(props) {\n            return {\n                marketStats: MarketsStore.getState().allMarketStats.get(\n                    props.marketId\n                )\n            };\n        }\n    }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAFA;AA2BA;AA3BA;AA8BA;;;;AAjCA;AACA;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AANA;AACA;AAQA;AACA;AAnBA;AAoBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAcA;AACA;AAOA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AADA;AAdA;AADA;AAsBA;;;;AAtLA;AACA;AAwLA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AADA;AALA;AAQA;AACA;;;AACA;AAAA;AAAA;AACA;AAAA;AAWA;;;AAEA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;AAQA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAIA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAFA;AAYA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAFA;AAWA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAFA;AA7BA;AAlBA;AAwDA;;;;AAvKA;AACA;AADA;AAEA;AADA;AADA;AAMA;AACA;AACA;AAHA;AALA;AAYA;AADA;AACA;AACA;AA6JA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAVA;;;;A","sourceRoot":""}