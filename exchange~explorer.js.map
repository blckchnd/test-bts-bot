{"version":3,"file":"exchange~explorer.007ff2e7fc9ce2e6a528.js","sources":["webpack:///app/components/Utility/TransitionWrapper.jsx","webpack:///app/components/Exchange/MyMarkets.jsx","webpack:///app/components/Exchange/MarketRow.jsx","webpack:///app/components/Utility/AccountName.jsx","webpack:///app/components/Exchange/QuoteSelectionModal.jsx"],"sourcesContent":["import React from \"react\";\nimport CSSTransitionGroup from \"react-transition-group/CSSTransitionGroup\";\n\nexport default class TransitionWrapper extends React.Component {\n    static defaultProps = {\n        component: \"span\",\n        enterTimeout: 2000\n    };\n\n    constructor() {\n        super();\n\n        this.state = {\n            animateEnter: false\n        };\n\n        this.timer = null;\n    }\n\n    componentDidMount() {\n        this.enableAnimation();\n    }\n\n    resetAnimation() {\n        this.setState({\n            animateEnter: false\n        });\n\n        this.enableAnimation();\n    }\n\n    enableAnimation() {\n        this.timer = setTimeout(() => {\n            if (this.timer) {\n                this.setState({\n                    animateEnter: true\n                });\n            }\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n        this.timer = null;\n    }\n\n    render() {\n        if (!this.props.children) {\n            return React.createElement(this.props.component);\n        } else {\n            return (\n                <CSSTransitionGroup\n                    className={this.props.className}\n                    component={this.props.component}\n                    transitionName={this.props.transitionName}\n                    transitionEnterTimeout={this.props.enterTimeout}\n                    transitionEnter={this.state.animateEnter}\n                    transitionLeave={false}\n                >\n                    {this.props.children}\n                </CSSTransitionGroup>\n            );\n        }\n    }\n}\n","import React from \"react\";\nimport Immutable from \"immutable\";\nimport Ps from \"perfect-scrollbar\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport TranslateWithLinks from \"../Utility/TranslateWithLinks\";\nimport {connect} from \"alt-react\";\nimport MarketRow from \"./MarketRow\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport AssetStore from \"stores/AssetStore\";\nimport AssetName from \"../Utility/AssetName\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AssetActions from \"actions/AssetActions\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport cnames from \"classnames\";\nimport {debounce} from \"lodash-es\";\nimport AssetSelector from \"../Utility/AssetSelector\";\nimport counterpart from \"counterpart\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport {ChainValidation, ChainStore} from \"bitsharesjs\";\nimport debounceRender from \"react-debounce-render\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {gatewayPrefixes} from \"common/gateways\";\nimport QuoteSelectionModal from \"./QuoteSelectionModal\";\n\nclass MarketGroup extends React.Component {\n    static defaultProps = {\n        maxRows: 20,\n        onlyLiquid: false\n    };\n\n    constructor(props) {\n        super();\n        this.state = this._getInitialState(props);\n    }\n\n    _getInitialState(props) {\n        let open = props.findMarketTab\n            ? true\n            : props.viewSettings.get(`myMarketsBase_${props.index}`);\n        return {\n            open: open !== undefined ? open : true,\n            inverseSort: props.viewSettings.get(\"myMarketsInvert\", true),\n            sortBy: props.viewSettings.get(\"myMarketsSort\", \"volume\")\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.findMarketTab !== this.props.findMarketTab) {\n            this.setState(this._getInitialState(nextProps));\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!nextProps.markets || !this.props.markets) {\n            return true;\n        }\n        return (\n            !utils.are_equal_shallow(nextState, this.state) ||\n            !utils.are_equal_shallow(nextProps.markets, this.props.markets) ||\n            nextProps.starredMarkets !== this.props.starredMarkets ||\n            nextProps.marketStats !== this.props.marketStats ||\n            nextProps.userMarkets !== this.props.userMarkets\n        );\n    }\n\n    _inverseSort() {\n        SettingsActions.changeViewSetting({\n            myMarketsInvert: !this.state.myMarketsInvert\n        });\n        this.setState({\n            inverseSort: !this.state.inverseSort\n        });\n    }\n\n    _changeSort(type) {\n        if (type !== this.state.sortBy) {\n            SettingsActions.changeViewSetting({\n                myMarketsSort: type\n            });\n            this.setState({\n                sortBy: type\n            });\n        } else {\n            this._inverseSort();\n        }\n    }\n\n    // _onSelectBase(e) {\n    //     e.preventDefault();\n    //     e.stopPropagation();\n\n    //     SettingsActions.changeBase(this.props.index, e.target.value);\n    // }\n\n    _onToggle() {\n        if (!this.props.findMarketTab) {\n            let open = !this.state.open;\n            this.setState({\n                open: open\n            });\n\n            let setting = {};\n            setting[`myMarketsBase_${this.props.index}`] = open;\n            SettingsActions.changeViewSetting(setting);\n        }\n    }\n\n    _onToggleUserMarket(market) {\n        let [base, quote] = market.split(\"_\");\n        let newValue = !this.props.userMarkets.get(market);\n        SettingsActions.setUserMarket(base, quote, newValue);\n    }\n\n    render() {\n        let {\n            columns,\n            markets,\n            base,\n            marketStats,\n            starredMarkets,\n            current\n        } = this.props;\n        let {sortBy, inverseSort, open} = this.state;\n\n        if (!markets || !markets.length) {\n            return null;\n        }\n\n        let headers = columns.map(header => {\n            switch (header.name) {\n                case \"market\":\n                    return (\n                        <th\n                            key={header.name}\n                            className=\"clickable\"\n                            onClick={this._changeSort.bind(this, \"name\")}\n                        >\n                            <Translate content=\"exchange.market\" />\n                        </th>\n                    );\n\n                case \"vol\":\n                    return (\n                        <th\n                            key={header.name}\n                            className=\"clickable\"\n                            onClick={this._changeSort.bind(this, \"volume\")}\n                            style={{textAlign: \"right\"}}\n                        >\n                            <Translate content=\"exchange.vol_short\" />\n                        </th>\n                    );\n\n                case \"price\":\n                    return (\n                        <th key={header.name} style={{textAlign: \"right\"}}>\n                            <Translate content=\"exchange.price\" />\n                        </th>\n                    );\n\n                case \"quoteSupply\":\n                    return (\n                        <th key={header.name}>\n                            <Translate content=\"exchange.base_supply\" />\n                        </th>\n                    );\n\n                case \"baseSupply\":\n                    return (\n                        <th key={header.name}>\n                            <Translate content=\"exchange.quote_supply\" />\n                        </th>\n                    );\n\n                case \"change\":\n                    return (\n                        <th\n                            key={header.name}\n                            className=\"clickable\"\n                            onClick={this._changeSort.bind(this, \"change\")}\n                            style={{textAlign: \"right\"}}\n                        >\n                            <Translate content=\"exchange.change\" />\n                        </th>\n                    );\n\n                case \"issuer\":\n                    return (\n                        <th key={header.name}>\n                            <Translate content=\"explorer.assets.issuer\" />\n                        </th>\n                    );\n\n                case \"add\":\n                    return (\n                        <th key={header.name} style={{textAlign: \"right\"}}>\n                            <Translate content=\"account.perm.confirm_add\" />\n                        </th>\n                    );\n\n                default:\n                    return <th key={header.name} />;\n            }\n        });\n\n        let marketRows = markets\n            .map(market => {\n                if (\n                    this.props.onlyLiquid &&\n                    marketStats.get(market.id) &&\n                    marketStats.get(market.id).volumeBase == 0\n                ) {\n                    return null;\n                }\n                return (\n                    <MarketRow\n                        key={market.id}\n                        name={\n                            base === \"others\" ? (\n                                <span>\n                                    <AssetName name={market.quote} />:<AssetName\n                                        name={market.base}\n                                    />\n                                </span>\n                            ) : (\n                                <AssetName\n                                    dataPlace=\"left\"\n                                    name={market.quote}\n                                />\n                            )\n                        }\n                        quote={market.quote}\n                        base={market.base}\n                        columns={columns}\n                        leftAlign={true}\n                        compact={true}\n                        noSymbols={true}\n                        stats={marketStats.get(market.id)}\n                        starred={starredMarkets.has(market.id)}\n                        current={current === market.id}\n                        isChecked={this.props.userMarkets.has(market.id)}\n                        isDefault={\n                            this.props.defaultMarkets &&\n                            this.props.defaultMarkets.has(market.id)\n                        }\n                        onCheckMarket={this._onToggleUserMarket.bind(this)}\n                        location={this.props.location}\n                        history={this.props.history}\n                    />\n                );\n            })\n            .filter(a => {\n                return a !== null;\n            })\n            .sort((a, b) => {\n                let a_symbols = a.key.split(\"_\");\n                let b_symbols = b.key.split(\"_\");\n                let aStats = marketStats.get(a_symbols[0] + \"_\" + a_symbols[1]);\n                let bStats = marketStats.get(b_symbols[0] + \"_\" + b_symbols[1]);\n\n                switch (sortBy) {\n                    case \"name\":\n                        if (a_symbols[0] > b_symbols[0]) {\n                            return inverseSort ? -1 : 1;\n                        } else if (a_symbols[0] < b_symbols[0]) {\n                            return inverseSort ? 1 : -1;\n                        } else {\n                            if (a_symbols[1] > b_symbols[1]) {\n                                return inverseSort ? -1 : 1;\n                            } else if (a_symbols[1] < b_symbols[1]) {\n                                return inverseSort ? 1 : -1;\n                            } else {\n                                return 0;\n                            }\n                        }\n\n                    case \"volume\":\n                        if (aStats && bStats) {\n                            if (inverseSort) {\n                                return bStats.volumeBase - aStats.volumeBase;\n                            } else {\n                                return aStats.volumeBase - bStats.volumeBase;\n                            }\n                        } else {\n                            return 0;\n                        }\n\n                    case \"change\":\n                        if (aStats && bStats) {\n                            if (inverseSort) {\n                                return bStats.change - aStats.change;\n                            } else {\n                                return aStats.change - bStats.change;\n                            }\n                        } else {\n                            return 0;\n                        }\n                }\n            });\n\n        return (\n            <div style={{paddingRight: 10}}>\n                {open ? (\n                    <table className=\"table table-hover text-right\">\n                        <thead>\n                            <tr>{headers}</tr>\n                        </thead>\n                        {marketRows && marketRows.length ? (\n                            <tbody>{marketRows}</tbody>\n                        ) : null}\n                    </table>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nclass MyMarkets extends React.Component {\n    static defaultProps = {\n        activeTab: \"my-market\",\n        setMinWidth: false\n    };\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            inverseSort: props.viewSettings.get(\"myMarketsInvert\", true),\n            sortBy: props.viewSettings.get(\"myMarketsSort\", \"volume\"),\n            activeTab: props.viewSettings.get(\"favMarketTab\", \"my-market\"),\n            activeMarketTab: props.viewSettings.get(\"activeMarketTab\", 0),\n            lookupQuote: null,\n            lookupBase: null,\n            inputValue: \"\",\n            minWidth: \"100%\",\n            findBaseInput: \"USD\",\n            activeFindBase: \"USD\"\n        };\n\n        this._setMinWidth = this._setMinWidth.bind(this);\n        this.getAssetList = debounce(AssetActions.getAssetList.defer, 150);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !Immutable.is(nextProps.searchAssets, this.props.searchAssets) ||\n            !Immutable.is(nextProps.markets, this.props.markets) ||\n            !Immutable.is(\n                nextProps.starredMarkets,\n                this.props.starredMarkets\n            ) ||\n            !Immutable.is(\n                nextProps.defaultMarkets,\n                this.props.defaultMarkets\n            ) ||\n            !Immutable.is(nextProps.marketStats, this.props.marketStats) ||\n            !utils.are_equal_shallow(nextState, this.state) ||\n            nextProps.current !== this.props.current ||\n            nextProps.minWidth !== this.props.minWidth ||\n            nextProps.listHeight !== this.props.listHeight ||\n            nextProps.preferredBases !== this.props.preferredBases ||\n            nextProps.onlyStars !== this.props.onlyStars ||\n            nextProps.onlyLiquid !== this.props.onlyLiquid ||\n            nextProps.assetsLoading !== this.props.assetsLoading ||\n            nextProps.userMarkets !== this.props.userMarkets\n        );\n    }\n\n    componentWillMount() {\n        if (this.props.setMinWidth) {\n            window.addEventListener(\"resize\", this._setMinWidth, {\n                capture: false,\n                passive: true\n            });\n        }\n\n        if (this.props.currrent) {\n            const currentBase = this.props.current.split(\"_\")[1];\n            const currentIndex = this.props.preferredBases.findIndex(\n                a => a === currentBase\n            );\n            if (\n                currentIndex !== -1 &&\n                currentIndex !== this.state.activeMarketTab\n            ) {\n                this.setState({activeMarketTab: currentIndex});\n            }\n        }\n    }\n\n    componentDidMount() {\n        let historyContainer = this.refs.favorites;\n        Ps.initialize(historyContainer);\n\n        this._setMinWidth();\n    }\n\n    componentWillUnmount() {\n        if (this.props.setMinWidth) {\n            window.removeEventListener(\"resize\", this._setMinWidth);\n        }\n        clearTimeout(this.timer);\n    }\n\n    componentWillReceiveProps(np) {\n        if (this.props.myMarketTab && !np.myMarketTab) {\n            if (this.refs.findSearchInput) this.refs.findSearchInput.focus();\n        }\n    }\n\n    _setMinWidth() {\n        if (\n            this.props.setMinWidth &&\n            this.refs.favorites &&\n            this.props.activeTab === \"my-market\"\n        ) {\n            if (this.state.minWidth !== this.refs.favorites.offsetWidth) {\n                this.setState({\n                    minWidth: this.refs.favorites.offsetWidth\n                });\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.refs.favorites) {\n            let historyContainer = this.refs.favorites;\n            Ps.update(historyContainer);\n        }\n    }\n\n    _inverseSort() {\n        SettingsActions.changeViewSetting({\n            myMarketsInvert: !this.state.myMarketsInvert\n        });\n        this.setState({\n            inverseSort: !this.state.inverseSort\n        });\n    }\n\n    _changeSort(type) {\n        if (type !== this.state.sortBy) {\n            SettingsActions.changeViewSetting({\n                myMarketsSort: type\n            });\n            this.setState({\n                sortBy: type\n            });\n        } else {\n            this._inverseSort();\n        }\n    }\n\n    _goMarkets() {\n        this.props.history.push(\"/markets\");\n    }\n\n    _changeTab(tab) {\n        SettingsActions.changeViewSetting({\n            favMarketTab: tab\n        });\n        this.setState({\n            activeTab: tab\n        });\n\n        this._setMinWidth();\n    }\n\n    _onInputName(getBackedAssets, e) {\n        let toFind = e.target.value.trim().toUpperCase();\n        let isValidName = !ChainValidation.is_valid_symbol_error(toFind, true);\n\n        this.setState({\n            inputValue: toFind\n        });\n        /* Don't lookup invalid asset names */\n        if (toFind && toFind.length >= 2 && !isValidName) return;\n\n        if (this.state.inputValue !== toFind) {\n            this.timer && clearTimeout(this.timer);\n        }\n\n        this.timer = setTimeout(() => {\n            this._lookupAssets(toFind, getBackedAssets);\n        }, 1500);\n    }\n\n    _lookupAssets(value, gatewayAssets = false) {\n        if (!value && value !== \"\") return;\n\n        let symbols = value.toUpperCase().split(\":\");\n        let quote = symbols[0];\n        let base = symbols.length === 2 ? symbols[1] : null;\n\n        this.setState({\n            lookupQuote: quote,\n            lookupBase: base\n        });\n\n        SettingsActions.changeViewSetting.defer({\n            marketLookupInput: value.toUpperCase()\n        });\n\n        this.getAssetList(quote, 50, gatewayAssets);\n    }\n\n    toggleActiveMarketTab(index) {\n        SettingsActions.changeViewSetting({\n            activeMarketTab: index\n        });\n\n        this.setState({\n            activeMarketTab: index\n        });\n    }\n\n    _onInputBaseAsset(asset) {\n        this.setState({\n            findBaseInput: asset.toUpperCase(),\n            error: null\n        });\n    }\n\n    _onFoundBaseAsset(asset) {\n        if (asset) {\n            this.setState({activeFindBase: asset.get(\"symbol\")});\n        }\n    }\n\n    clearInput = () => {\n        this.setState({myMarketFilter: \"\"});\n    };\n\n    handleSearchUpdate = e => {\n        this.setState({\n            myMarketFilter: e.target.value && e.target.value.toUpperCase()\n        });\n    };\n\n    _getMarkets() {\n        const {\n            searchAssets,\n            defaultMarkets,\n            onlyStars,\n            userMarkets,\n            preferredBases,\n            starredMarkets\n        } = this.props;\n        const {\n            activeTab,\n            lookupQuote,\n            lookupBase,\n            myMarketFilter,\n            activeMarketTab\n        } = this.state;\n        const possibleGatewayAssets = gatewayPrefixes.reduce(\n            (assets, prefix) => {\n                preferredBases.forEach(a => {\n                    assets.push(`${prefix}.${a}`);\n                });\n                return assets;\n            },\n            []\n        );\n\n        let bases = this._getBases();\n        let allMarkets = [],\n            baseGroups = {};\n        let otherMarkets = [];\n\n        const myMarketTab = activeTab === \"my-market\";\n\n        if (searchAssets.size) {\n            searchAssets\n                .filter(a => {\n                    try {\n                        if (a.options.description) {\n                            let description = JSON.parse(a.options.description);\n                            if (\"visible\" in description) {\n                                if (!description.visible) return false;\n                            }\n                        }\n                    } catch (e) {}\n\n                    return (\n                        a.symbol.indexOf(lookupQuote) !== -1 &&\n                        a.symbol.length >= lookupQuote.length\n                    );\n                })\n                .forEach(asset => {\n                    bases.forEach(base => {\n                        let marketID = asset.symbol + \"_\" + base;\n\n                        if (base !== asset.symbol) {\n                            allMarkets.push([\n                                marketID,\n                                {quote: asset.symbol, base: base}\n                            ]);\n                        }\n                    });\n                });\n        }\n\n        allMarkets = allMarkets.filter(a => {\n            // If a base asset is specified, limit the quote asset to the exact search term\n            if (lookupBase) {\n                return a[1].quote === lookupQuote;\n            }\n            return true;\n        });\n\n        let activeMarkets = myMarketTab\n            ? defaultMarkets\n            : Immutable.Map(allMarkets);\n        if (myMarketTab && userMarkets.size) {\n            userMarkets.forEach((market, key) => {\n                if (!activeMarkets.has(key))\n                    activeMarkets = activeMarkets.set(key, market);\n            });\n        }\n\n        function filterAndSeparateMarkets(\n            base,\n            matchBases,\n            markets,\n            baseGroups,\n            otherMarkets\n        ) {\n            let others = markets\n                .filter(a => {\n                    if (a.base === a.quote) return false;\n                    /* Return search results in the Find Markets Tab */\n                    if (!myMarketTab) {\n                        if (lookupQuote.length < 1) {\n                            return false;\n                        }\n\n                        return a.quote.indexOf(lookupQuote) !== -1;\n                    } else {\n                        /* Return filtered markets if a filter is input */\n                        const ID = a.quote + \"_\" + a.base;\n                        if (!!myMarketFilter) {\n                            return ID.indexOf(myMarketFilter) !== -1;\n                        }\n                        /* Return only starred markets if that option is checked */\n                        if (onlyStars && !starredMarkets.has(ID)) {\n                            return false;\n                        }\n                        /* Else return all markets */\n                        return true;\n                    }\n                })\n                .map(market => {\n                    let marketID = market.quote + \"_\" + market.base;\n                    if (matchBases.indexOf(market.base) !== -1) {\n                        if (!baseGroups[base]) {\n                            baseGroups[base] = [];\n                        }\n                        let marketObject = {\n                            id: marketID,\n                            quote: market.quote,\n                            base: market.base\n                        };\n                        if (!baseGroups[base].find(m => m.id === marketID))\n                            baseGroups[base].push(marketObject);\n                        return null;\n                    } else if (\n                        !preferredBases.includes(market.base) &&\n                        possibleGatewayAssets.indexOf(market.base) === -1\n                    ) {\n                        // console.log(\"Adding to other markets:\", base, market.base, preferredBases.toJS())\n                        return {\n                            id: marketID,\n                            quote: market.quote,\n                            base: market.base\n                        };\n                    }\n                })\n                .filter(a => !!a)\n                .take(myMarketTab ? 100 : 20)\n                .toArray();\n            return {otherMarkets: others.concat(otherMarkets), baseGroups};\n        }\n\n        if (activeMarkets.size > 0) {\n            const currentBase = myMarketTab\n                ? preferredBases.get(activeMarketTab)\n                : this.state.activeFindBase;\n\n            ({otherMarkets, baseGroups} = filterAndSeparateMarkets(\n                currentBase,\n                [currentBase],\n                activeMarkets,\n                baseGroups,\n                otherMarkets\n            ));\n\n            /* Check for possible gateway versions of the asset */\n            gatewayPrefixes.forEach(prefix => {\n                let possibleGatewayAssetName = `${prefix}.${currentBase}`;\n                let gatewayAsset = ChainStore.getAsset(\n                    possibleGatewayAssetName\n                );\n                /* If the gateway offers an asset for this base, add it to the list */\n                if (!!gatewayAsset) {\n                    let gatewayMarkets = activeMarkets\n                        .map(m => {\n                            if (m.quote === m.base) return null;\n                            let newID = `${\n                                m.quote\n                            }_${possibleGatewayAssetName}`;\n                            if (activeMarkets.has(newID)) return null;\n                            return {\n                                base: possibleGatewayAssetName,\n                                quote: m.quote\n                            };\n                        }, {})\n                        .filter(m => !!m);\n                    ({otherMarkets, baseGroups} = filterAndSeparateMarkets(\n                        currentBase,\n                        [currentBase, possibleGatewayAssetName],\n                        gatewayMarkets,\n                        baseGroups,\n                        otherMarkets\n                    ));\n                }\n            });\n        }\n\n        return {baseGroups, otherMarkets};\n    }\n\n    _getBases() {\n        let {preferredBases, searchAssets} = this.props;\n        let {lookupQuote, lookupBase} = this.state;\n\n        let bases = searchAssets\n            .filter(a => {\n                if (lookupBase && lookupBase.length) {\n                    return a.symbol.indexOf(lookupBase) === 0;\n                }\n                return a.symbol.indexOf(lookupQuote) !== -1;\n            })\n            .map(asset => {\n                if (lookupBase && lookupBase.length) {\n                    if (asset.symbol.indexOf(lookupBase) === 0) {\n                        return asset.symbol;\n                    }\n                } else if (preferredBases.includes(asset.symbol)) {\n                    if (\n                        asset.symbol.length >= lookupQuote.length &&\n                        asset.symbol.length < lookupQuote.length + 3\n                    ) {\n                        return asset.symbol;\n                    }\n                }\n            })\n            .filter(a => !!a)\n            .toArray();\n\n        bases = bases.concat(\n            preferredBases\n                .filter(a => {\n                    if (!lookupBase || !lookupBase.length) {\n                        return true;\n                    }\n                    return a.indexOf(lookupBase) === 0;\n                })\n                .toArray()\n        );\n\n        bases = bases.filter(base => {\n            if (lookupBase && lookupBase.length > 1) {\n                return base.indexOf(lookupBase) === 0;\n            } else {\n                return true;\n            }\n        });\n\n        return bases;\n    }\n\n    render() {\n        let {\n            starredMarkets,\n            marketStats,\n            columns,\n            assetsLoading,\n            preferredBases,\n            current,\n            viewSettings,\n            listHeight\n        } = this.props;\n        let {activeMarketTab, activeTab} = this.state;\n\n        const myMarketTab = activeTab === \"my-market\";\n        let defaultBases = preferredBases.map(a => a);\n\n        if (!myMarketTab) {\n            preferredBases = preferredBases.clear();\n            preferredBases = preferredBases.push(this.state.activeFindBase);\n        }\n\n        // Add some default base options\n        // let preferredBases = [coreSymbol, \"BTC\", \"USD\", \"CNY\"];\n\n        /* In the find-market tab, only use market tab 0 */\n        if (!myMarketTab) activeMarketTab = 0;\n\n        let {baseGroups, otherMarkets} = this._getMarkets();\n        const hasOthers = otherMarkets && otherMarkets.length;\n        let hc = \"mymarkets-header clickable\";\n        let starClass = cnames(hc, {inactive: !myMarketTab});\n        let allClass = cnames(hc, {inactive: myMarketTab});\n\n        let listStyle = {\n            minWidth: this.state.minWidth,\n            minHeight: \"6rem\"\n        };\n        if (listHeight) {\n            listStyle.height = listHeight;\n        }\n\n        const translator = require(\"counterpart\");\n\n        return (\n            <div className={this.props.className} style={this.props.style}>\n                <div\n                    style={this.props.headerStyle}\n                    className=\"grid-block shrink left-orderbook-header bottom-header\"\n                >\n                    <div\n                        ref=\"myMarkets\"\n                        className={starClass}\n                        onClick={this._changeTab.bind(this, \"my-market\")}\n                        data-intro={translator.translate(\n                            \"walkthrough.my_markets_tab\"\n                        )}\n                    >\n                        <Translate content=\"exchange.market_name\" />\n                    </div>\n                    <div\n                        className={allClass}\n                        onClick={this._changeTab.bind(this, \"find-market\")}\n                        data-intro={translator.translate(\n                            \"walkthrough.find_markets_tab\"\n                        )}\n                    >\n                        <Translate content=\"exchange.more\" />\n                    </div>\n                </div>\n\n                {this.props.controls ? (\n                    <div\n                        className=\"small-12 medium-6\"\n                        style={{padding: \"1rem 0\"}}\n                    >\n                        {this.props.controls ? (\n                            <div style={{paddingBottom: \"0.5rem\"}}>\n                                {this.props.controls}\n                            </div>\n                        ) : null}\n                        {/* {!myMarketTab ? <input type=\"text\" value={this.state.inputValue} onChange={this._lookupAssets.bind(this)} placeholder=\"SYMBOL:SYMBOL\" /> : null} */}\n                    </div>\n                ) : null}\n\n                {myMarketTab ? (\n                    <div\n                        className=\"grid-block vertical shrink\"\n                        style={{\n                            width: \"100%\",\n                            textAlign: \"left\",\n                            padding: \"0.75rem 0.5rem\"\n                        }}\n                    >\n                        <div>\n                            <label style={{margin: \"3px 0 0\"}}>\n                                <input\n                                    style={{position: \"relative\", top: 3}}\n                                    className=\"no-margin\"\n                                    type=\"checkbox\"\n                                    checked={this.props.onlyLiquid}\n                                    onChange={() => {\n                                        SettingsActions.changeViewSetting({\n                                            onlyLiquid: !this.props.onlyLiquid\n                                        });\n                                    }}\n                                />\n                                <span style={{paddingLeft: \"0.4rem\"}}>\n                                    <Translate content=\"exchange.show_only_liquid\" />\n                                </span>\n                            </label>\n                            <label style={{margin: \"3px 0 0\"}}>\n                                <input\n                                    style={{position: \"relative\", top: 3}}\n                                    className=\"no-margin\"\n                                    type=\"checkbox\"\n                                    checked={this.props.onlyStars}\n                                    onChange={() => {\n                                        MarketsActions.toggleStars();\n                                    }}\n                                />\n                                <span style={{paddingLeft: \"0.4rem\"}}>\n                                    <TranslateWithLinks\n                                        string=\"exchange.show_only_star_formatter\"\n                                        keys={[\n                                            {\n                                                type: \"icon\",\n                                                value: \"fi-star\",\n                                                className: \"gold-star\",\n                                                arg: \"star_icon\"\n                                            }\n                                        ]}\n                                    />\n                                </span>\n                            </label>\n                        </div>\n                        <div className=\"search-wrapper\">\n                            <form>\n                                <input\n                                    autoComplete=\"off\"\n                                    style={{\n                                        fontSize: \"0.9rem\",\n                                        height: \"inherit\",\n                                        position: \"relative\",\n                                        top: 1,\n                                        padding: 2\n                                    }}\n                                    type=\"text\"\n                                    className=\"no-margin market-filter-input\"\n                                    placeholder={counterpart.translate(\n                                        \"exchange.filter\"\n                                    )}\n                                    maxLength=\"16\"\n                                    name=\"focus\"\n                                    required=\"required\"\n                                    value={this.state.myMarketFilter}\n                                    onChange={this.handleSearchUpdate}\n                                />\n                                <button\n                                    className=\"clear-text\"\n                                    type=\"reset\"\n                                    onClick={this.clearInput}\n                                />\n                            </form>\n                        </div>\n                    </div>\n                ) : (\n                    <div\n                        style={{\n                            width: \"100%\",\n                            textAlign: \"left\",\n                            padding: \"0.75rem 0.5rem\"\n                        }}\n                    >\n                        <table>\n                            <tbody>\n                                <tr style={{width: \"100%\"}}>\n                                    <td>\n                                        <AssetSelector\n                                            onAssetSelect={this._onFoundBaseAsset.bind(\n                                                this\n                                            )}\n                                            assets={defaultBases}\n                                            onChange={this._onInputBaseAsset.bind(\n                                                this\n                                            )}\n                                            asset={this.state.findBaseInput}\n                                            assetInput={\n                                                this.state.findBaseInput\n                                            }\n                                            tabIndex={1}\n                                            style={{\n                                                width: \"100%\",\n                                                paddingBottom: \"1.5rem\"\n                                            }}\n                                            onFound={this._onFoundBaseAsset.bind(\n                                                this\n                                            )}\n                                            label=\"exchange.quote\"\n                                            noLabel\n                                            inputStyle={{fontSize: \"0.9rem\"}}\n                                        />\n                                    </td>\n                                </tr>\n                                <tr style={{width: \"100%\"}}>\n                                    <td>\n                                        <label>\n                                            <Translate content=\"account.user_issued_assets.name\" />:\n                                        </label>\n                                        <input\n                                            style={{\n                                                fontSize: \"0.9rem\",\n                                                position: \"relative\",\n                                                top: 1\n                                            }}\n                                            type=\"text\"\n                                            value={this.state.inputValue}\n                                            onChange={this._onInputName.bind(\n                                                this,\n                                                true\n                                            )}\n                                            placeholder={counterpart.translate(\n                                                \"exchange.search\"\n                                            )}\n                                            maxLength=\"16\"\n                                            tabIndex={2}\n                                            ref=\"findSearchInput\"\n                                        />\n                                        {this.state.assetNameError ? (\n                                            <div\n                                                className=\"error-area\"\n                                                style={{paddingTop: 10}}\n                                            >\n                                                <span\n                                                    style={{\n                                                        wordBreak: \"break-all\"\n                                                    }}\n                                                >\n                                                    <Translate\n                                                        content=\"explorer.asset.invalid\"\n                                                        name={\n                                                            this.state\n                                                                .inputValue\n                                                        }\n                                                    />\n                                                </span>\n                                            </div>\n                                        ) : null}\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                )}\n\n                <ul className=\"mymarkets-tabs\">\n                    {!myMarketTab && !this.state.inputValue\n                        ? null\n                        : preferredBases.map((base, index) => {\n                              if (!base) return null;\n                              return (\n                                  <li\n                                      key={base}\n                                      onClick={this.toggleActiveMarketTab.bind(\n                                          this,\n                                          index\n                                      )}\n                                      className={cnames(\"mymarkets-tab\", {\n                                          active: activeMarketTab === index\n                                      })}\n                                  >\n                                      {base.replace(\"RUDEX.\", \"\")}\n                                  </li>\n                              );\n                          })}\n                    {myMarketTab && hasOthers ? (\n                        <li\n                            key={\"others\"}\n                            style={{textTransform: \"uppercase\"}}\n                            onClick={this.toggleActiveMarketTab.bind(\n                                this,\n                                preferredBases.size + 1\n                            )}\n                            className={cnames(\"mymarkets-tab\", {\n                                active:\n                                    activeMarketTab === preferredBases.size + 1\n                            })}\n                        >\n                            <Translate content=\"exchange.others\" />\n                        </li>\n                    ) : null}\n\n                    {/* Quote edit tab */}\n                    <li\n                        key=\"quote_edit\"\n                        style={{textTransform: \"uppercase\"}}\n                        onClick={() => {\n                            ZfApi.publish(\"quote_selection\", \"open\");\n                        }}\n                        className=\"mymarkets-tab\"\n                    >\n                        &nbsp;+&nbsp;\n                    </li>\n                </ul>\n\n                <div\n                    style={listStyle}\n                    className=\"table-container grid-block vertical mymarkets-list\"\n                    ref=\"favorites\"\n                >\n                    {assetsLoading ? (\n                        <div\n                            style={{\n                                position: \"absolute\",\n                                paddingTop: \"3rem\",\n                                textAlign: \"center\",\n                                width: \"100%\"\n                            }}\n                        >\n                            <LoadingIndicator type=\"three-bounce\" />\n                        </div>\n                    ) : null}\n                    {preferredBases\n                        .filter(a => {\n                            return a === preferredBases.get(activeMarketTab);\n                        })\n                        .map((base, index) => {\n                            return (\n                                <MarketGroup\n                                    userMarkets={this.props.userMarkets}\n                                    defaultMarkets={this.props.defaultMarkets}\n                                    index={index}\n                                    allowChange={false}\n                                    key={base}\n                                    current={current}\n                                    starredMarkets={starredMarkets}\n                                    marketStats={marketStats}\n                                    viewSettings={viewSettings}\n                                    columns={\n                                        myMarketTab\n                                            ? columns\n                                            : this.props.findColumns || columns\n                                    }\n                                    markets={baseGroups[base]}\n                                    base={base}\n                                    maxRows={myMarketTab ? 20 : 10}\n                                    findMarketTab={!myMarketTab}\n                                    location={this.props.location}\n                                    history={this.props.history}\n                                    onlyLiquid={\n                                        this.props.onlyLiquid && myMarketTab\n                                    }\n                                />\n                            );\n                        })}\n                    {activeMarketTab === preferredBases.size + 1 &&\n                    myMarketTab &&\n                    hasOthers ? (\n                        <MarketGroup\n                            userMarkets={this.props.userMarkets}\n                            index={preferredBases.size}\n                            current={current}\n                            starredMarkets={starredMarkets}\n                            marketStats={marketStats}\n                            viewSettings={viewSettings}\n                            columns={columns}\n                            markets={otherMarkets}\n                            base=\"others\"\n                            maxRows={myMarketTab ? 20 : 10}\n                            findMarketTab={!myMarketTab}\n                            location={this.props.location}\n                            history={this.props.history}\n                        />\n                    ) : null}\n                </div>\n                <QuoteSelectionModal quotes={this.props.preferredBases} />\n            </div>\n        );\n    }\n}\n\nMyMarkets = debounceRender(MyMarkets, 50, {leading: false});\n\nclass MyMarketsWrapper extends React.Component {\n    render() {\n        return <MyMarkets {...this.props} />;\n    }\n}\n\nexport default connect(\n    MyMarketsWrapper,\n    {\n        listenTo() {\n            return [SettingsStore, MarketsStore, AssetStore];\n        },\n        getProps() {\n            return {\n                starredMarkets: SettingsStore.getState().starredMarkets,\n                onlyLiquid: SettingsStore.getState().viewSettings.get(\n                    \"onlyLiquid\",\n                    false\n                ),\n                defaultMarkets: SettingsStore.getState().defaultMarkets,\n                viewSettings: SettingsStore.getState().viewSettings,\n                preferredBases: SettingsStore.getState().preferredBases,\n                marketStats: MarketsStore.getState().allMarketStats,\n                userMarkets: SettingsStore.getState().userMarkets,\n                searchAssets: AssetStore.getState().assets,\n                onlyStars: MarketsStore.getState().onlyStars,\n                assetsLoading: AssetStore.getState().assetsLoading\n            };\n        }\n    }\n);\n","import React from \"react\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport AssetWrapper from \"../Utility/AssetWrapper\";\nimport AccountName from \"../Utility/AccountName\";\nimport AssetImage from \"../Utility/AssetImage\";\nimport utils from \"common/utils\";\nimport Icon from \"../Icon/Icon\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport {withRouter} from \"react-router-dom\";\n\nclass MarketRow extends React.Component {\n    static defaultProps = {\n        noSymbols: false\n    };\n\n    constructor() {\n        super();\n\n        this.statsInterval = null;\n    }\n\n    _onClick(marketID) {\n        const newPath = `/market/${marketID}`;\n        if (newPath !== this.props.location.pathname) {\n            MarketsActions.switchMarket();\n            this.props.history.push(`/market/${marketID}`);\n        }\n    }\n\n    componentDidMount() {\n        this.statsChecked = new Date();\n        this.statsInterval = MarketsActions.getMarketStatsInterval(\n            35 * 1000,\n            this.props.base,\n            this.props.quote\n        );\n    }\n\n    componentWillUnmount() {\n        if (this.statsInterval) this.statsInterval();\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return !utils.are_equal_shallow(nextProps, this.props);\n    }\n\n    _onStar(quote, base, e) {\n        e.preventDefault();\n        if (!this.props.starred) {\n            SettingsActions.addStarMarket(quote, base);\n        } else {\n            SettingsActions.removeStarMarket(quote, base);\n        }\n    }\n\n    render() {\n        let {quote, base, noSymbols, stats, starred} = this.props;\n        if (!quote || !base) {\n            return null;\n        }\n\n        let marketID = quote.get(\"symbol\") + \"_\" + base.get(\"symbol\");\n        let marketName = quote.get(\"symbol\") + \":\" + base.get(\"symbol\");\n        let dynamic_data = this.props.getDynamicObject(\n            quote.get(\"dynamic_asset_data_id\")\n        );\n        let base_dynamic_data = this.props.getDynamicObject(\n            base.get(\"dynamic_asset_data_id\")\n        );\n\n        let price = utils.convertPrice(quote, base);\n\n        let rowStyles = {};\n        if (this.props.leftAlign) {\n            rowStyles.textAlign = \"left\";\n        }\n\n        let buttonClass = \"button outline\";\n        let buttonStyle = null;\n        if (this.props.compact) {\n            buttonClass += \" no-margin\";\n            buttonStyle = {\n                marginBottom: 0,\n                fontSize: \"0.75rem\",\n                padding: \"4px 10px\",\n                borderRadius: \"0px\",\n                letterSpacing: \"0.05rem\"\n            };\n        }\n\n        let columns = this.props.columns\n            .map(column => {\n                switch (column.name) {\n                    case \"star\":\n                        let starClass = starred ? \"gold-star\" : \"grey-star\";\n                        return (\n                            <td\n                                onClick={this._onStar.bind(\n                                    this,\n                                    quote.get(\"symbol\"),\n                                    base.get(\"symbol\")\n                                )}\n                                key={column.index}\n                            >\n                                <Icon\n                                    className={starClass}\n                                    name=\"fi-star\"\n                                    title=\"icons.fi_star.symbol\"\n                                />\n                            </td>\n                        );\n\n                    case \"vol\":\n                        let amount = stats ? stats.volumeBase : 0;\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                className=\"text-right\"\n                                key={column.index}\n                            >\n                                {utils.format_volume(amount)}\n                            </td>\n                        );\n\n                    case \"change\":\n                        let change = utils.format_number(\n                            stats && stats.change ? stats.change : 0,\n                            2\n                        );\n                        let changeClass =\n                            change === \"0.00\"\n                                ? \"\"\n                                : change > 0\n                                    ? \"change-up\"\n                                    : \"change-down\";\n\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                className={\"text-right \" + changeClass}\n                                key={column.index}\n                            >\n                                {change + \"%\"}\n                            </td>\n                        );\n\n                    case \"marketName\":\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                key={column.index}\n                            >\n                                <div\n                                    className={buttonClass}\n                                    style={buttonStyle}\n                                >\n                                    {marketName}\n                                </div>\n                            </td>\n                        );\n\n                    case \"market\":\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                key={column.index}\n                            >\n                                <AssetImage\n                                    replaceNoneToBts={false}\n                                    maxWidth={20}\n                                    name={quote.get(\"symbol\")}\n                                />\n                                {this.props.name}\n                            </td>\n                        );\n\n                    case \"price\":\n                        let finalPrice =\n                            stats && stats.price\n                                ? stats.price.toReal()\n                                : stats &&\n                                  stats.close &&\n                                  (stats.close.quote.amount &&\n                                      stats.close.base.amount)\n                                    ? utils.get_asset_price(\n                                          stats.close.quote.amount,\n                                          quote,\n                                          stats.close.base.amount,\n                                          base,\n                                          true\n                                      )\n                                    : utils.get_asset_price(\n                                          price.quote.amount,\n                                          quote,\n                                          price.base.amount,\n                                          base,\n                                          true\n                                      );\n\n                        let highPrecisionAssets = [\n                            \"BTC\",\n                            \"OPEN.BTC\",\n                            \"TRADE.BTC\",\n                            \"GOLD\",\n                            \"SILVER\"\n                        ];\n                        let precision = 6;\n                        if (\n                            highPrecisionAssets.indexOf(base.get(\"symbol\")) !==\n                            -1\n                        ) {\n                            precision = 8;\n                        }\n\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                className=\"text-right\"\n                                key={column.index}\n                            >\n                                {utils.format_number(\n                                    finalPrice,\n                                    finalPrice > 1000\n                                        ? 0\n                                        : finalPrice > 10\n                                            ? 2\n                                            : precision\n                                )}\n                            </td>\n                        );\n\n                    case \"quoteSupply\":\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                key={column.index}\n                            >\n                                {dynamic_data ? (\n                                    <FormattedAsset\n                                        style={{fontWeight: \"bold\"}}\n                                        amount={parseInt(\n                                            dynamic_data.get(\"current_supply\"),\n                                            10\n                                        )}\n                                        asset={quote.get(\"id\")}\n                                    />\n                                ) : null}\n                            </td>\n                        );\n\n                    case \"baseSupply\":\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                key={column.index}\n                            >\n                                {base_dynamic_data ? (\n                                    <FormattedAsset\n                                        style={{fontWeight: \"bold\"}}\n                                        amount={parseInt(\n                                            base_dynamic_data.get(\n                                                \"current_supply\"\n                                            ),\n                                            10\n                                        )}\n                                        asset={base.get(\"id\")}\n                                    />\n                                ) : null}\n                            </td>\n                        );\n\n                    case \"issuer\":\n                        return (\n                            <td\n                                onClick={this._onClick.bind(this, marketID)}\n                                key={column.index}\n                            >\n                                <AccountName account={quote.get(\"issuer\")} />\n                            </td>\n                        );\n\n                    case \"add\":\n                        return (\n                            <td\n                                style={{textAlign: \"right\"}}\n                                key={column.index}\n                                onClick={this.props.onCheckMarket.bind(\n                                    this,\n                                    marketID\n                                )}\n                            >\n                                <input\n                                    type=\"checkbox\"\n                                    checked={\n                                        !!this.props.isChecked ||\n                                        this.props.isDefault\n                                    }\n                                    disabled={this.props.isDefault}\n                                    data-tip={\n                                        this.props.isDefault\n                                            ? \"This market is a default market and cannot be removed\"\n                                            : null\n                                    }\n                                />\n                            </td>\n                        );\n\n                    case \"remove\":\n                        return (\n                            <td\n                                key={column.index}\n                                className=\"clickable\"\n                                onClick={this.props.removeMarket}\n                            >\n                                <span\n                                    style={{\n                                        marginBottom: \"6px\",\n                                        marginRight: \"6px\",\n                                        zIndex: 999\n                                    }}\n                                    className=\"text float-right remove\"\n                                >\n                                    –\n                                </span>\n                            </td>\n                        );\n\n                    default:\n                        break;\n                }\n            })\n            .sort((a, b) => {\n                return a.key > b.key;\n            });\n\n        let className = \"clickable\";\n        if (this.props.current) {\n            className += \" activeMarket\";\n        }\n\n        return (\n            <tr className={className} style={rowStyles}>\n                {columns}\n            </tr>\n        );\n    }\n}\nMarketRow = withRouter(MarketRow);\n\nexport default AssetWrapper(MarketRow, {\n    propNames: [\"quote\", \"base\"],\n    defaultProps: {\n        tempComponent: \"tr\"\n    },\n    withDynamic: true\n});\n","import React from \"react\";\nimport ChainTypes from \"./ChainTypes\";\nimport BindToChainState from \"./BindToChainState\";\n\n/**\n *  Given an account id, displays the name of that account\n *\n *  Expects one property, 'account' which should be a account id\n */\n\nclass AccountName extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainObject.isRequired\n    };\n\n    static defaultProps = {\n        autosubscribe: false\n    };\n\n    render() {\n        if (!this.props.account) return null;\n        return <span>{this.props.account.get(\"name\")}</span>;\n    }\n}\n\nexport default BindToChainState(AccountName);\n","import React from \"react\";\nimport Icon from \"../Icon/Icon\";\nimport BaseModal from \"../Modal/BaseModal\";\nimport AssetSelector from \"../Utility/AssetSelector\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport Translate from \"react-translate-component\";\n\nexport default class QuoteSelectionModal extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            backingAsset: \"\",\n            error: false,\n            valid: false\n        };\n    }\n\n    _onMoveUp(quote) {\n        const idx = this.props.quotes.findIndex(q => q === quote);\n        SettingsActions.modifyPreferedBases({\n            oldIndex: idx,\n            newIndex: idx - 1\n        });\n    }\n\n    _onMoveDown(quote) {\n        const idx = this.props.quotes.findIndex(q => q === quote);\n        SettingsActions.modifyPreferedBases({\n            oldIndex: idx,\n            newIndex: idx + 1\n        });\n    }\n\n    _onRemove(quote) {\n        const idx = this.props.quotes.findIndex(q => q === quote);\n        if (idx >= 0) {\n            SettingsActions.modifyPreferedBases({\n                remove: idx\n            });\n        }\n    }\n\n    _onAdd(quote) {\n        const idx = this.props.quotes.findIndex(q => q === quote.get(\"symbol\"));\n        if (idx === -1) {\n            SettingsActions.modifyPreferedBases({\n                add: quote.get(\"symbol\")\n            });\n        }\n    }\n\n    _onInputBackingAsset(asset) {\n        this.setState({\n            backingAsset: asset.toUpperCase(),\n            error: null\n        });\n    }\n\n    _onFoundBackingAsset(asset) {\n        if (asset) {\n            console.log(\n                \"asset\",\n                asset.get(\"symbol\"),\n                this.props.quotes.includes(asset.get(\"symbol\"))\n            );\n            if (!this.props.quotes.includes(asset.get(\"symbol\"))) {\n                this.setState({isValid: true});\n            } else {\n                this.setState({\n                    error: \"Asset already being used\",\n                    isValid: false\n                });\n            }\n        }\n    }\n\n    render() {\n        const {error} = this.state;\n        const quoteCount = this.props.quotes.size;\n        return (\n            <BaseModal\n                id=\"quote_selection\"\n                overlay={true}\n                modalHeader=\"exchange.quote_selection\"\n                noLogo\n            >\n                <section className=\"block-list no-border-bottom\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th />\n                                <th>\n                                    <Translate content=\"account.quote\" />\n                                </th>\n                                <th style={{textAlign: \"center\"}}>\n                                    <Translate content=\"exchange.move_down\" />\n                                </th>\n                                <th style={{textAlign: \"center\"}}>\n                                    <Translate content=\"exchange.move_up\" />\n                                </th>\n                                <th style={{textAlign: \"center\"}}>\n                                    <Translate content=\"exchange.remove\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.props.quotes.map((q, idx) => {\n                                return (\n                                    <tr key={q}>\n                                        <td>{idx + 1}</td>\n                                        <td>{q}</td>\n                                        <td className=\"text-center\">\n                                            {idx !== quoteCount - 1 && (\n                                                <Icon\n                                                    onClick={this._onMoveDown.bind(\n                                                        this,\n                                                        q\n                                                    )}\n                                                    name=\"chevron-down\"\n                                                    className=\"clickable\"\n                                                />\n                                            )}\n                                        </td>\n                                        <td className=\"text-center\">\n                                            {idx !== 0 && (\n                                                <Icon\n                                                    onClick={this._onMoveUp.bind(\n                                                        this,\n                                                        q\n                                                    )}\n                                                    name=\"chevron-down\"\n                                                    className=\"clickable rotate180\"\n                                                />\n                                            )}\n                                        </td>\n                                        <td className=\"text-center\">\n                                            {quoteCount > 1 && (\n                                                <Icon\n                                                    onClick={this._onRemove.bind(\n                                                        this,\n                                                        q\n                                                    )}\n                                                    name=\"cross-circle\"\n                                                    className=\"clickable\"\n                                                />\n                                            )}\n                                        </td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n\n                    <br />\n                    <br />\n                    <br />\n\n                    <div>\n                        <AssetSelector\n                            label=\"exchange.custom_quote\"\n                            onChange={this._onInputBackingAsset.bind(this)}\n                            asset={this.state.backingAsset}\n                            assetInput={this.state.backingAsset}\n                            tabIndex={1}\n                            style={{width: \"100%\", paddingRight: \"10px\"}}\n                            onFound={this._onFoundBackingAsset.bind(this)}\n                            onAction={this._onAdd.bind(this)}\n                            action_label=\"exchange.add_quote\"\n                            disableActionButton={!!error}\n                            noLabel\n                        />\n                        <div className=\"error-area\">{error}</div>\n                    </div>\n                </section>\n            </BaseModal>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AARA;AAWA;AACA;;;;AA5DA;AACA;AADA;AAEA;AACA;AAFA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAOA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AACA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AACA;AASA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AACA;AASA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AAxEA;AA0EA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AADA;AADA;AAOA;AACA;AAFA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAhCA;AAmCA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AAAA;AALA;AAFA;AAaA;;;;AAlSA;AACA;AADA;AAEA;AACA;AAFA;AACA;AAmSA;;;AAMA;AAAA;AACA;AADA;AACA;AADA;AA+MA;AACA;AACA;AAjNA;AAmNA;AACA;AADA;AAGA;AACA;AApNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AAjBA;AAkBA;AACA;;;AACA;AACA;AAsBA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;;;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAWA;AAbA;AACA;AAIA;AAAA;AASA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAdA;AACA;AAaA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AACA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAQA;AARA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AAPA;AAdA;AAyBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AADA;AALA;AAaA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AATA;AAWA;AAAA;AAAA;AACA;AADA;AAZA;AAgBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAHA;AADA;AAVA;AAjBA;AA0CA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AAHA;AArBA;AADA;AAlDA;AAiFA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AACA;AAtBA;AADA;AADA;AA4BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAIA;AAGA;AACA;AACA;AAjBA;AAmBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAFA;AALA;AAJA;AAxBA;AADA;AA7BA;AADA;AAPA;AAwFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AADA;AANA;AAUA;AAVA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AADA;AAPA;AAYA;AAZA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAtCA;AAkDA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AARA;AAWA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AA0BA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AArDA;AAsEA;AA1UA;AA6UA;;;;AA10BA;AACA;AADA;AAEA;AACA;AAFA;AACA;AACA;AA00BA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AApBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AANA;AAQA;AACA;AACA;AACA;AAHA;AARA;AACA;AAeA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AACA;AAQA;AACA;AAIA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AACA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAJA;AACA;AAYA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AATA;AACA;AAYA;AACA;AACA;AAqBA;AAOA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AACA;AAeA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAIA;AANA;AALA;AACA;AAgBA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AAMA;AARA;AALA;AACA;AAkBA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AACA;AACA;AAIA;AACA;AAPA;AARA;AACA;AAuBA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AALA;AACA;AAiBA;AACA;AA5OA;AA8OA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AA/UA;AACA;AADA;AAEA;AADA;AACA;AA+UA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;;;;;;;;;;;;;;;;;;;;;AC9VA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;;;;;;AASA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAZA;AACA;AADA;AAEA;AADA;AADA;AAMA;AADA;AACA;AACA;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;;;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAXA;AADA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AANA;AAFA;AAYA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AANA;AAFA;AAYA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AANA;AAFA;AA3BA;AAyCA;AA5CA;AAlBA;AAkEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAAA;AAAA;AAAA;AAAA;AAdA;AAvEA;AANA;AAgGA;;;;AA1KA;AACA;AADA;;;;A","sourceRoot":""}