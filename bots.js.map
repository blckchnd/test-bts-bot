{"version":3,"file":"bots.b1495578e259bc355744.js","sources":["webpack:///app/components/Bots/Bots.jsx","webpack:///app/lib/bots/index.js","webpack:///app/lib/bots/SpreadTrade/index.js","webpack:///app/components/Bots/SpreadTrade/CreateForm.jsx","webpack:///app/lib/bots/apis.js","webpack:///app/components/Bots/SpreadTrade/StateForm.jsx","webpack:///app/lib/bots/assets.js","webpack:///app/lib/bots/account.js","webpack:///app/stores/BotsStorage.js"],"sourcesContent":["import React from \"react\";\nimport BotManager from \"lib/bots\";\nimport AccountStore from \"stores/AccountStore\";\nimport {connect} from \"alt-react\";\n\nclass Bots extends React.Component {\n    constructor() {\n        super();\n\n        this.strategies = BotManager.strategies;\n        this.state = {\n            selectStrategy: Object.keys(this.strategies)[0],\n            bots: [],\n            selectBot: 0,\n            enableCreate: false,\n            botRun: false\n        };\n    }\n\n    componentDidMount() {\n        let bots = BotManager.getBots(this.props.currentAccount);\n        this.setState({\n            bots,\n            selectBot: 0,\n            botRun: bots[0].run\n        });\n    }\n\n    handleChangeStrategy = event => {\n        this.setState({selectStrategy: event.target.value});\n    };\n\n    handleChangeBot = event => {\n        let selectBot = event.target.value;\n\n        this.setState({\n            selectBot,\n            botRun: this.state.bots[selectBot].run\n        });\n    };\n\n    handleCreate = event => {\n        event.preventDefault();\n        let bots = this.state.bots;\n\n        bots.push(\n            BotManager.create(\n                this.state.selectStrategy,\n                this.props.currentAccount,\n                this.createForm.state\n            )\n        );\n        this.setState({bots});\n\n        if (this.createForm.validate)\n            this.createForm.validate(\"name\", this.createForm.state.name);\n    };\n\n    handleEnableCreate = enableCreate => {\n        if (this.state.enableCreate != enableCreate)\n            this.setState({enableCreate});\n    };\n\n    handleStartBot = async () => {\n        let bot = this.state.bots[this.state.selectBot];\n\n        await bot.start();\n        this.setState({botRun: bot.run});\n    };\n\n    handleStopBot = async () => {\n        let bot = this.state.bots[this.state.selectBot];\n\n        await bot.stop();\n        this.setState({botRun: bot.run});\n    };\n\n    handleDeleteBot = () => {\n        BotManager.delete(this.state.bots[this.state.selectBot]);\n\n        this.setState({\n            bots: BotManager.getBots(this.props.currentAccount),\n            selectBot: 0\n        });\n    };\n\n    render() {\n        //console.log(\"start render main page\", this.props)\n        if (this.props.currentAccount === null) return null;\n\n        let CreateForm = this.strategies[this.state.selectStrategy].create;\n\n        let bot = this.state.bots[this.state.selectBot] || null;\n\n        return (\n            <div className=\"grid-block vertical\">\n                <div className=\"grid-block shrink vertical medium-horizontal\">\n                    <form\n                        style={{paddingBottom: 20, overflow: \"visible\"}}\n                        className=\"grid-content small-12 medium-6 large-5 large-offset-1 full-width-content\"\n                        onSubmit={this.handleCreate}\n                        noValidate\n                    >\n                        <div className=\"left-label\" style={{marginTop: 30}}>\n                            Select strategy:\n                        </div>\n                        <div className=\"content-block\">\n                            <div className=\"content-block\">\n                                <select\n                                    className={\"form-control bts-select \"}\n                                    value={this.state.selectStrategy}\n                                    onChange={this.handleChangeStrategy}\n                                >\n                                    {Object.keys(this.strategies).map(name => (\n                                        <option key={name} value={name}>\n                                            {name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <hr />\n                        <div className=\"content-block\">\n                            <CreateForm\n                                ref={form => {\n                                    this.createForm = form;\n                                }}\n                                account={this.props.currentAccount}\n                                name={this.state.selectStrategy}\n                                enableCreate={this.handleEnableCreate}\n                            />\n                            <button\n                                className=\"button no-margin\"\n                                type=\"submit\"\n                                disabled={!this.state.enableCreate}\n                            >\n                                Create\n                            </button>\n                        </div>\n                    </form>\n                    <div className=\"content-block\">\n                        <div className=\"left-label\" style={{marginTop: 30}}>\n                            Bot state:\n                        </div>\n                        <select\n                            className={\"form-control bts-select\"}\n                            value={this.state.selectBot}\n                            onChange={this.handleChangeBot}\n                        >\n                            {this.state.bots.map((bot, index) => (\n                                <option key={bot.name} value={index}>\n                                    {`${bot.name} (${bot.constructor.name})`}\n                                </option>\n                            ))}\n                        </select>\n                        <div className=\"content-block\">\n                            {bot ? (\n                                <div>\n                                    <bot.state key={bot.name} bot={bot} />\n                                    <button\n                                        className=\"button\"\n                                        onClick={this.handleStartBot}\n                                        disabled={this.state.botRun}\n                                        style={{marginLeft: 50}}\n                                    >\n                                        Start\n                                    </button>\n                                    <button\n                                        className=\"button\"\n                                        onClick={this.handleStopBot}\n                                        disabled={!this.state.botRun}\n                                        style={{marginLeft: 50}}\n                                    >\n                                        Stop\n                                    </button>\n                                    <button\n                                        className=\"button\"\n                                        onClick={this.handleDeleteBot}\n                                        disabled={this.state.botRun}\n                                        style={{marginLeft: 50}}\n                                    >\n                                        Delete\n                                    </button>\n                                </div>\n                            ) : (\n                                <p>Please, select bot</p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    Bots,\n    {\n        listenTo() {\n            return [AccountStore];\n        },\n        getProps() {\n            return {\n                currentAccount: AccountStore.getState().currentAccount\n            };\n        }\n    }\n);\n","import SpreadTrade from \"./SpreadTrade\";\n//import RelativeOrders from \"./RelativeOrders\";\nimport Storage from \"stores/BotsStorage\";\n\nvar bots = {};\n\nexport default {\n    strategies: {\n        SpreadTrade\n        //RelativeOrders\n    },\n\n    create(strategy, account, initData) {\n        let storage = new Storage(`${account}::${strategy}[${initData.name}]`);\n\n        let bot = new this.strategies[strategy](account, storage, initData);\n        bots[`__bots__${storage.name}`] = bot;\n\n        return bot;\n    },\n\n    delete(bot) {\n        let name = `__bots__${bot.storage.name}`;\n\n        bots[name].delete();\n        delete bots[name];\n    },\n\n    getBots(account) {\n        //console.log(\"getBots\", Object.keys(bots))\n\n        return Storage.getAccountBot(account)\n            .map(key => {\n                if (bots[key]) return bots[key];\n\n                let [strategy, name] = key\n                    .replace(/^__bots__(.+)::(\\w+)\\[(\\w+)\\]/, \"$2,$3\")\n                    .split(\",\");\n\n                if (!strategy || !name) return null;\n\n                let storage = new Storage(`${account}::${strategy}[${name}]`);\n\n                let bot = new this.strategies[strategy](account, storage);\n                bots[key] = bot;\n                return bot;\n            })\n            .filter(el => el);\n    },\n\n    hasBot(account, strategy, name) {\n        console.log(\"check name stategy\", account, strategy, name);\n        return Storage.has(`${account}::${strategy}[${name}]`);\n    }\n};\n","import Create from \"components/Bots/SpreadTrade/CreateForm\";\nimport State from \"components/Bots/SpreadTrade/StateForm\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Apis from \"lib/bots/apis\";\nimport Assets from \"lib/bots/assets\";\nimport BigNumber from \"bignumber.js\";\nimport Account from \"lib/bots/account\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport WalletUnlockActions from \"actions/WalletUnlockActions\";\n\nclass SpreadTrade {\n    static create = Create;\n    state = State;\n\n    constructor(account, storage, initData) {\n        this.account = new Account(account);\n        this.storage = storage;\n\n        if (initData) {\n            storage.init({\n                name: initData.name,\n                base: {\n                    asset: initData.baseAsset,\n                    balance: initData.baseBalance,\n                    spread: initData.baseSpread,\n                    amount: initData.baseAmount,\n                    order: {\n                        //id, price and amount\n                    }\n                },\n                quote: {\n                    asset: initData.quoteAsset,\n                    balance: initData.quoteBalance,\n                    spread: initData.quoteSpread,\n                    amount: initData.quoteAmount,\n                    order: {\n                        //id, price and amount\n                    }\n                },\n                defaultPrice: initData.defaultPrice\n            });\n        }\n\n        this.name = storage.read().name;\n\n        this.logger = console;\n        this.queueEvents = Promise.resolve();\n        this.run = false;\n    }\n\n    async start() {\n        let state = this.storage.read();\n\n        this.base = await Assets[state.base.asset];\n        this.quote = await Assets[state.quote.asset];\n\n        if ([this.base.issuer, this.quote.issuer].includes(\"1.2.0\")) {\n            if ([this.base.id, this.quote.id].includes(\"1.3.0\"))\n                this.getFeed = this.getCoreFeed;\n            else if (this.base.issuer == this.quote.issuer)\n                this.getFeed = this.getSmartFeed;\n            else this.getFeed = this.getUIAFeed;\n        } else {\n            this.getFeed = this.getUIAFeed;\n        }\n\n        await WalletUnlockActions.unlock();\n        SettingsActions.changeSetting({\n            setting: \"walletLockTimeout\",\n            value: 0\n        });\n\n        ChainStore.subscribe(this.queue);\n        this.run = true;\n    }\n\n    async stop() {\n        ChainStore.unsubscribe(this.queue);\n        this.run = false;\n        await this.queueEvents;\n    }\n\n    delete() {\n        this.storage.delete();\n    }\n\n    queue = () => {\n        this.queueEvents = this.queueEvents\n            .then(this.checkOrders)\n            .catch(this.logger.error.bind(this.logger));\n    };\n\n    checkOrders = async () => {\n        let state = this.storage.read();\n        //console.log(\"state\", state);\n\n        this.defaultPrice = state.defaultPrice;\n\n        let feedPrice = await this.getFeed(),\n            buyPrice = feedPrice.div(1 + state.base.spread / 100).toNumber(),\n            sellPrice = feedPrice\n                .times(1 + state.quote.spread / 100)\n                .toNumber();\n\n        feedPrice = feedPrice.toNumber();\n\n        if (feedPrice == 0) return;\n\n        let buyOrder = state.base.order.id\n                ? (await Apis.db.get_objects([state.base.order.id]))[0]\n                : state.base.order.id,\n            sellOrder = state.quote.order.id\n                ? (await Apis.db.get_objects([state.quote.order.id]))[0]\n                : state.quote.order.id,\n            ticker = await Apis.db.get_ticker(\n                this.base.symbol,\n                this.quote.symbol\n            ),\n            accountBalances = (await this.account.balances(\n                this.base.id,\n                this.quote.id\n            )).reduce((acc, balance) => {\n                this.base.id === balance.asset_id\n                    ? (acc.base = BigNumber(balance.amount)\n                          .div(10 ** this.base.precision)\n                          .toNumber())\n                    : (acc.quote = BigNumber(balance.amount)\n                          .div(10 ** this.quote.precision)\n                          .toNumber());\n                return acc;\n            }, {}),\n            baseBalance =\n                state.base.balance === \"-\"\n                    ? 0\n                    : state.base.balance === \"\"\n                        ? accountBalances.base\n                        : Math.min(accountBalances.base, state.base.balance),\n            quoteBalance =\n                state.quote.balance === \"-\"\n                    ? 0\n                    : state.quote.balance === \"\"\n                        ? accountBalances.quote\n                        : Math.min(accountBalances.quote, state.quote.balance);\n\n        console.log(\"orders\", buyOrder, sellOrder);\n\n        if (buyOrder) {\n            //check Price\n            if (\n                Math.abs(buyPrice - state.base.order.price) >\n                    Math.abs(feedPrice - buyPrice) / 2 &&\n                ticker.lowest_ask > buyPrice\n            ) {\n                // move order\n\n                this.logger.info(\n                    `move buy order: ${buyPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                await this.account.cancelOrder(state.base.order.id);\n\n                // check amount in order\n                let orderAmount = BigNumber(buyOrder.for_sale)\n                    .div(10 ** this.base.precision)\n                    .toNumber();\n\n                ![\"\", \"-\"].includes(state.base.balance) &&\n                    (state.base.balance =\n                        Number(state.base.balance) + orderAmount);\n\n                // add to sell balance\n                if (\n                    state.base.order.amount > orderAmount &&\n                    ![\"\", \"-\"].incudes(state.quote.balance)\n                )\n                    state.quote.balance = BigNumber(\n                        state.base.order.amount - orderAmount\n                    )\n                        .div(state.base.order.price)\n                        .plus(state.quote.balance)\n                        .toNumber();\n\n                let amount = Math.min(baseBalance, state.base.amount);\n                try {\n                    let obj = await this.account.sell(\n                        this.base.symbol,\n                        this.quote.symbol,\n                        amount,\n                        BigNumber(1)\n                            .div(buyPrice)\n                            .toNumber()\n                    );\n                    state.base.order = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: buyPrice,\n                        amount\n                    };\n                    ![\"\", \"-\"].includes(state.base.balance) &&\n                        (state.base.balance -= amount);\n                } catch (error) {\n                    this.logger.error(error);\n                    state.base.order.id = undefined;\n                }\n            }\n        } else {\n            if (/^1.7.\\d*$/.test(state.base.order.id)) {\n                // fill order\n                ![\"\", \"-\"].includes(state.quote.balance) &&\n                    (state.quote.balance = BigNumber(state.base.order.amount)\n                        .div(state.base.order.price)\n                        .plus(state.quote.balance)\n                        .toNumber());\n\n                state.base.order.id = undefined;\n            }\n\n            if (\n                baseBalance >= state.base.amount &&\n                ticker.lowest_ask > buyPrice\n            ) {\n                //buy\n                this.logger.info(\n                    `buy: ${buyPrice} ${this.quote.symbol}/${this.base.symbol}`\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.base.symbol,\n                        this.quote.symbol,\n                        state.base.amount,\n                        BigNumber(1)\n                            .div(buyPrice)\n                            .toNumber()\n                    );\n                    state.base.order = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: buyPrice,\n                        amount: state.base.amount\n                    };\n                    ![\"\", \"-\"].includes(state.base.balance) &&\n                        (state.base.balance -= state.base.amount);\n                } catch (error) {\n                    this.logger.error(error);\n                }\n            }\n        }\n\n        if (sellOrder) {\n            //check Price\n            if (\n                Math.abs(sellPrice - state.quote.order.price) >\n                    Math.abs(feedPrice - sellPrice) / 2 &&\n                ticker.highest_bid < sellPrice\n            ) {\n                // move order\n\n                this.logger.info(\n                    `move sell order: ${sellPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                await this.account.cancelOrder(state.quote.order.id);\n\n                // check amount in order\n                let orderAmount = BigNumber(sellOrder.for_sale)\n                    .div(10 ** this.quote.precision)\n                    .toNumber();\n                ![\"\", \"-\"].includes(state.quote.balance) &&\n                    (state.quote.balance =\n                        Number(state.quote.balance) + orderAmount);\n\n                // add to buy balance\n                if (\n                    state.quote.order.amount > orderAmount &&\n                    ![\"\", \"-\"].includes(state.base.balance)\n                )\n                    state.base.balance = BigNumber(\n                        state.quote.order.amount - orderAmount\n                    )\n                        .times(state.quote.order.price)\n                        .plus(state.base.balance)\n                        .toNumber();\n\n                let amount = Math.min(quoteBalance, state.quote.amount);\n                try {\n                    let obj = await this.account.sell(\n                        this.quote.symbol,\n                        this.base.symbol,\n                        amount,\n                        sellPrice\n                    );\n                    state.quote.order = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: sellPrice,\n                        amount\n                    };\n                    ![\"\", \"-\"].includes(state.quote.balance) &&\n                        (state.quote.balance -= amount);\n                } catch (error) {\n                    this.logger.error(error);\n                    state.quote.order.id = undefined;\n                }\n            }\n        } else {\n            if (/^1.7.\\d*$/.test(state.quote.order.id)) {\n                // fill order\n                ![\"\", \"-\"].includes(state.base.balance) &&\n                    (state.base.balance = BigNumber(state.quote.order.amount)\n                        .times(state.quote.order.price)\n                        .plus(state.base.balance)\n                        .toNumber());\n                state.quote.order.id = undefined;\n            }\n\n            if (\n                quoteBalance >= state.quote.amount &&\n                ticker.highest_bid < sellPrice\n            ) {\n                //buy\n                this.logger.info(\n                    `sell: ${sellPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.quote.symbol,\n                        this.base.symbol,\n                        state.quote.amount,\n                        sellPrice\n                    );\n                    state.quote.order = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: sellPrice,\n                        amount: state.quote.amount\n                    };\n                    ![\"\", \"-\"].includes(state.quote.balance) &&\n                        (state.quote.balance -= state.quote.amount);\n                } catch (error) {\n                    this.logger.error(error);\n                }\n            }\n        }\n\n        this.storage.write(state);\n    };\n\n    async getCoreFeed() {\n        let rate;\n\n        if (this.base.id == \"1.3.0\") {\n            await this.quote.update();\n            rate = this.quote.options.core_exchange_rate;\n        } else {\n            await this.base.update();\n            rate = this.base.options.core_exchange_rate;\n        }\n\n        let [base, quote] =\n            rate.base.asset_id == this.base.id\n                ? [rate.base, rate.quote]\n                : [rate.quote, rate.base];\n\n        return BigNumber(base.amount)\n            .div(10 ** this.base.precision)\n            .div(BigNumber(quote.amount).div(10 ** this.quote.precision));\n    }\n\n    async getSmartFeed() {\n        let bts = await Assets[\"bts\"];\n        await this.base.update();\n        let rate = this.base.options.core_exchange_rate;\n        let [base, quote] =\n            rate.base.asset_id == \"1.3.0\"\n                ? [rate.base, rate.quote]\n                : [rate.quote, rate.base];\n\n        let basePrice = BigNumber(base.amount)\n            .div(10 ** bts.precision)\n            .div(BigNumber(quote.amount).div(10 ** this.base.precision));\n\n        await this.quote.update();\n        rate = this.quote.options.core_exchange_rate;\n        if (rate.base.asset_id == \"1.3.0\") {\n            base = rate.base;\n            quote = rate.quote;\n        } else {\n            base = rate.quote;\n            quote = rate.base;\n        }\n\n        let quotePrice = BigNumber(base.amount)\n            .div(10 ** bts.precision)\n            .div(BigNumber(quote.amount).div(10 ** this.quote.precision));\n\n        return quotePrice.div(basePrice);\n    }\n\n    async getUIAFeed() {\n        return this.defaultPrice\n            ? BigNumber(this.defaultPrice)\n            : await this.binancePrice(this.base.symbol, this.quote.symbol);\n    }\n\n    async binancePrice(base, quote) {\n        let asset = `${quote.split(\".\").slice(-1)[0]}${\n            base.split(\".\").slice(-1)[0]\n        }`\n            .toUpperCase()\n            .replace(\"USD\", \"USDT\");\n        console.log(`get asset: ${asset}`);\n        this.priceArray = this.priceArray || [];\n\n        try {\n            //asset = \"BTCUSDT\"\n            let response = await fetch(\n                `https://api.binance.com/api/v1/trades?symbol=${asset}&limit=1`\n            );\n            let data = await response.json();\n            this.priceArray.push(data[0].price);\n            //this.priceArray.push(10)\n        } catch (error) {\n            this.logger.error(\n                `Error Binance request: ${asset}, error: ${error}`\n            );\n        }\n\n        if (this.priceArray.length > 10) this.priceArray.shift();\n\n        return this.priceArray.length > 0\n            ? this.priceArray\n                  .reduce((a, b) => a.plus(b), BigNumber(0))\n                  .div(this.priceArray.length)\n            : BigNumber(0);\n    }\n}\n\nexport default SpreadTrade;\n","import React from \"react\";\nimport BotManager from \"lib/bots\";\nimport Apis from \"lib/bots/apis\";\nimport {debounce} from \"lodash-es\";\n//import FloatingDropdown from \"components/Utility/FloatingDropdown\";\n\nclass CreateForm extends React.Component {\n    state = {\n        name: \"\",\n        baseAsset: \"USD\",\n        quoteAsset: \"OPEN.BTC\",\n        baseAmount: 10,\n        quoteAmount: 0.01,\n        baseSpread: 10,\n        quoteSpread: 10,\n        baseBalance: 100,\n        quoteBalance: 0.1,\n        validate: [\"name\"]\n    };\n\n    componentDidMount() {\n        this.assetValidate = debounce(this.assetValidate, 200);\n    }\n\n    assetValidate = async name => {\n        let asset = this.state[name];\n        let blockchainAssets = (await Apis.db.list_assets(asset, 1))[0];\n        let validate = this.state.validate;\n\n        if (asset !== blockchainAssets.symbol) validate.push(name);\n        else {\n            validate = validate.filter(input => input !== name);\n        }\n\n        this.setState({validate});\n        this.props.enableCreate(this.state.validate.length == 0);\n    };\n\n    handleChange = event => {\n        //console.log(event.target.name, event.target.value);\n        let name = event.target.name,\n            value = event.target.value;\n\n        if ([\"baseAsset\", \"quoteAsset\"].includes(name))\n            value = value.toUpperCase();\n\n        this.setState({[name]: value}, () => this.validate(name, value));\n    };\n\n    validate = (name, value) => {\n        let validate = this.state.validate;\n\n        switch (name) {\n            case \"name\":\n                if (\n                    !/^\\w+$/.test(value) ||\n                    BotManager.hasBot(\n                        this.props.account,\n                        this.props.name,\n                        value\n                    )\n                ) {\n                    validate.push(name);\n                    this.setState({validate});\n                } else {\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                }\n                break;\n            case \"baseAsset\":\n            case \"quoteAsset\":\n                if (value.length !== 0) {\n                    this.assetValidate(name);\n                } else {\n                    validate.push(name);\n                    this.setState({validate});\n                }\n                break;\n            case \"baseBalance\":\n            case \"quoteBalance\":\n                if (value !== \"-\" && isNaN(+value)) {\n                    validate.push(name);\n                    this.setState({validate});\n                } else {\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                }\n                break;\n            case \"baseAmount\":\n            case \"quoteAmount\":\n            case \"baseSpread\":\n            case \"quoteSpread\":\n                if (value === \"\" || isNaN(+value)) {\n                    validate.push(name);\n                    this.setState({validate});\n                } else {\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                }\n                break;\n            case \"defaultPrice\":\n                if (!isNaN(+value))\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                else {\n                    validate.push(name);\n                    this.setState({validate});\n                }\n                break;\n        }\n\n        console.log(this.state.validate);\n        this.props.enableCreate(this.state.validate.length == 0);\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Name</label>\n                    <input\n                        name=\"name\"\n                        id=\"name\"\n                        type=\"text\"\n                        ref=\"input\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                        autoComplete=\"name\"\n                        style={{\n                            border: this.state.validate.includes(\"name\")\n                                ? \"1px solid red\"\n                                : \"none\"\n                        }}\n                    />\n                </div>\n                <div className=\"grid-block horizontal\">\n                    <div className=\"content-block\" style={{marginLeft: 50}}>\n                        <label style={{textAlign: \"center\"}}>Base</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"baseAsset\"\n                            id=\"baseAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.baseAsset}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseAsset\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseAsset\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"baseBalance\"\n                            id=\"baseBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.baseBalance}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseBalance\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseBalance\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Amount in order</label>\n                        <input\n                            name=\"baseAmount\"\n                            id=\"baseAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.baseAmount}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseAmount\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseAmount\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Spread, %</label>\n                        <input\n                            name=\"baseSpread\"\n                            id=\"baseSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.baseSpread}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseSpread\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseSpread\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                    </div>\n                    <div className=\"content-block\" style={{marginLeft: 50}}>\n                        <label style={{textAlign: \"center\"}}>Quote</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"quoteAsset\"\n                            id=\"quoteAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quoteAsset}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteAsset\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteAsset\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"quoteBalance\"\n                            id=\"quoteBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quoteBalance}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteBalance\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteBalance\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Amount in order</label>\n                        <input\n                            name=\"quoteAmount\"\n                            id=\"quoteAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quoteAmount}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteAmount\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteAmount\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Spread, %</label>\n                        <input\n                            name=\"quoteSpread\"\n                            id=\"quoteSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quoteSpread}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteSpread\"\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteSpread\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Default Price</label>\n                    <input\n                        name=\"defaultPrice\"\n                        id=\"defaultPrice\"\n                        type=\"text\"\n                        ref=\"input\"\n                        value={this.state.defaultPrice}\n                        onChange={this.handleChange}\n                        autoComplete=\"defaultPrice\"\n                        style={{\n                            border: this.state.validate.includes(\"defaultPrice\")\n                                ? \"1px solid red\"\n                                : \"none\"\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateForm;\n","import {Apis} from \"bitsharesjs-ws\";\n\nexport default {\n    db: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                //console.log(`call Apis.db.${method}(${[...arguments]})`);\n                return apis\n                    .instance()\n                    .db_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    history: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .history_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    network: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .network_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    crypto: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .crypto_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    orders: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .orders_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    })\n};\n","import React from \"react\";\n\nclass StateForm extends React.Component {\n    componentWillMount() {\n        this.setState(\n            Object.assign({validate: []}, this.props.bot.storage.read())\n        );\n    }\n\n    handleChange = event => {\n        let name = event.target.name,\n            value = event.target.value,\n            base,\n            quote;\n\n        switch (name) {\n            case \"baseAmount\":\n                base = this.state.base;\n                base.amount = value;\n                this.setState({base});\n                break;\n            case \"baseBalance\":\n                base = this.state.base;\n                base.balance = value;\n                this.setState({base});\n                break;\n            case \"baseSpread\":\n                base = this.state.base;\n                base.spread = value;\n                this.setState({base});\n                break;\n            case \"quoteAmount\":\n                quote = this.state.quote;\n                quote.amount = value;\n                this.setState({quote});\n                break;\n            case \"quoteBalance\":\n                quote = this.state.quote;\n                quote.balance = value;\n                this.setState({quote});\n                break;\n            case \"quoteSpread\":\n                quote = this.state.quote;\n                quote.spread = value;\n                this.setState({quote});\n                break;\n            case \"defaultPrice\":\n                this.setState({defaultPrice: value});\n                break;\n        }\n\n        //this.setState({[name]: value}, () => this.validate(name, value));\n    };\n\n    handleUpdateBot = () => {\n        let stateNow = this.props.bot.storage.read();\n        this.state.base.order = stateNow.base.order;\n        this.state.quote.order = stateNow.quote.order;\n\n        this.props.bot.storage.write(this.state);\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"grid-block horizontal\">\n                    <div\n                        className=\"content-block\"\n                        style={{\n                            marginLeft: 50,\n                            marginTop: 30\n                        }}\n                    >\n                        <label style={{textAlign: \"center\"}}>Base</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"baseAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.base.asset}\n                            disabled\n                            style={{\n                                marginBottom: 30\n                            }}\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"baseBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.base.balance}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseBalance\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseBalance\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Amount</label>\n                        <input\n                            name=\"baseAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.base.amount}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseAmount\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseAmount\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Spread</label>\n                        <input\n                            name=\"baseSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.base.spread}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseSpread\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"baseSpread\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                    </div>\n                    <div\n                        className=\"content-block\"\n                        style={{\n                            marginLeft: 50,\n                            marginTop: 30\n                        }}\n                    >\n                        <label style={{textAlign: \"center\"}}>Quote</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"quoteAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quote.asset}\n                            disabled\n                            style={{\n                                marginBottom: 30\n                            }}\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"quoteBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quote.balance}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteBalance\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteBalance\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Amount</label>\n                        <input\n                            name=\"quoteAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quote.amount}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteAmount\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteAmount\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Spread</label>\n                        <input\n                            name=\"quoteSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.quote.spread}\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteSpread\"\n                            disabled={this.props.bot.run}\n                            style={{\n                                marginBottom: 30,\n                                border: this.state.validate.includes(\n                                    \"quoteSpread\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Default Price</label>\n                    <input\n                        name=\"defaultPrice\"\n                        type=\"text\"\n                        ref=\"input\"\n                        value={this.state.defaultPrice}\n                        onChange={this.handleChange}\n                        autoComplete=\"defaultPrice\"\n                        disabled={this.props.bot.run}\n                        style={{\n                            border: this.state.validate.includes(\"defaultPrice\")\n                                ? \"1px solid red\"\n                                : \"none\"\n                        }}\n                    />\n                </div>\n                <button\n                    className=\"button\"\n                    onClick={this.handleUpdateBot}\n                    disabled={this.props.bot.run}\n                    style={{marginLeft: 50, marginBottom: 30}}\n                >\n                    Update\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default StateForm;\n","import Apis from \"lib/bots/apis\";\n\nclass Asset {\n    static get(obj, name) {\n        if (this[name]) return this[name];\n\n        return this.getAsset(name);\n    }\n\n    static async getAsset(_symbol) {\n        let symbol = _symbol.toUpperCase();\n\n        this.map = this.map || {};\n\n        if (this.map[symbol]) return this.map[symbol];\n\n        let obj = (await Apis.db.list_assets(symbol, 1))[0];\n\n        if (!obj || obj.symbol !== symbol)\n            throw new Error(\n                `Not found asset ${symbol}! Blockchain return ${\n                    obj ? obj.symbol : obj\n                }`\n            );\n\n        this.map[symbol] = new this(obj);\n        return this.map[symbol];\n    }\n\n    static async id(id) {\n        this.map = this.map || {};\n        let asset = Object.keys(this.map).find(\n            symbol => this.map[symbol].id == id\n        );\n\n        if (asset) return this.map[asset];\n\n        asset = (await Apis.db.get_assets([id]))[0];\n\n        if (!asset) throw new Error(`Not found asset by id ${id}!`);\n\n        this.map[asset.symbol] = new this(asset);\n        return this.map[asset.symbol];\n    }\n\n    static async fromParam(param) {\n        return {amount: param.amount, asset: await this.id(param.asset_id)};\n    }\n\n    static async update() {\n        this.map = this.map || {};\n\n        let assets = await Apis.db.get_assets(\n            Object.keys(this.map).map(symbol => this.map[symbol].id)\n        );\n        assets.forEach(asset => Object.assign(this.map[asset.symbol], asset));\n    }\n\n    constructor(rpcObj) {\n        Object.assign(this, rpcObj);\n    }\n\n    toParam(number = 0) {\n        return {amount: number, asset_id: this.id};\n    }\n\n    fee() {\n        return this.options.market_fee_percent / 100 / 100;\n    }\n\n    async update() {\n        Object.assign(this, (await Apis.db.get_assets([this.id]))[0]);\n    }\n}\n\nexport default new Proxy({}, Asset);\n","import Apis from \"lib/bots/apis\";\nimport Assets from \"lib/bots/assets\";\nimport BigNumber from \"bignumber.js\";\nimport WalletDb from \"stores/WalletDb\";\nimport WalletUnlockActions from \"actions/WalletUnlockActions\";\nimport {TransactionBuilder} from \"bitsharesjs\";\n\nclass Account {\n    constructor(name, feeSymbol = \"BTS\") {\n        this.promise = Promise.all([\n            Apis.db.get_account_by_name(name),\n            Assets[feeSymbol]\n        ]).then(([acc, fee]) => {\n            this.acc = acc;\n            this.feeAsset = fee;\n        });\n    }\n\n    async cancelOrder(id) {\n        await this.promise;\n\n        return this.sendTransaction(\"limit_order_cancel\", {\n            fee: this.feeAsset.toParam(),\n            fee_paying_account: this.acc.id,\n            order: id,\n            extensions: []\n        });\n    }\n\n    async buy(\n        buySymbol,\n        baseSymbol,\n        amount,\n        price,\n        fill_or_kill = false,\n        expire = \"2020-02-02T02:02:02\"\n    ) {\n        await this.promise;\n\n        let buyAsset = await Assets[buySymbol],\n            baseAsset = await Assets[baseSymbol],\n            buyAmount = Math.floor(amount * 10 ** buyAsset.precision),\n            sellAmount = Math.floor(\n                BigNumber(amount)\n                    .times(price * 10 ** baseAsset.precision)\n                    .toString()\n            );\n\n        if (buyAmount == 0 || sellAmount == 0)\n            throw new Error(\"Amount equal 0!\");\n\n        let tx = await this.sendTransaction(\"limit_order_create\", {\n            fee: this.feeAsset.toParam(),\n            seller: this.acc.id,\n            amount_to_sell: baseAsset.toParam(sellAmount),\n            min_to_receive: buyAsset.toParam(buyAmount),\n            expiration: expire,\n            fill_or_kill: fill_or_kill,\n            extensions: []\n        });\n\n        return (await Apis.db.get_objects([\n            tx[0].trx.operation_results[0][1]\n        ]))[0];\n    }\n\n    async sell(\n        sellSymbol,\n        baseSymbol,\n        amount,\n        price,\n        fill_or_kill = false,\n        expire = \"2020-02-02T02:02:02\"\n    ) {\n        await this.promise;\n\n        let sellAsset = await Assets[sellSymbol],\n            baseAsset = await Assets[baseSymbol],\n            sellAmount = Math.floor(amount * 10 ** sellAsset.precision),\n            buyAmount = Math.floor(\n                BigNumber(amount)\n                    .times(price * 10 ** baseAsset.precision)\n                    .toString()\n            );\n\n        if (buyAmount == 0 || sellAmount == 0)\n            throw new Error(\"Amount equal 0!\");\n\n        let tx = await this.sendTransaction(\"limit_order_create\", {\n            fee: this.feeAsset.toParam(),\n            seller: this.acc.id,\n            amount_to_sell: sellAsset.toParam(sellAmount),\n            min_to_receive: baseAsset.toParam(buyAmount),\n            expiration: expire,\n            fill_or_kill: fill_or_kill,\n            extensions: []\n        });\n\n        return (await Apis.db.get_objects([\n            tx[0].trx.operation_results[0][1]\n        ]))[0];\n    }\n\n    async balances() {\n        await this.promise;\n        return Apis.db.get_account_balances(this.acc.id, [...arguments]);\n    }\n\n    async sendTransaction(type, operation) {\n        let tr = new TransactionBuilder();\n        tr.add_type_operation(type, operation);\n        await tr.set_required_fees();\n\n        await WalletUnlockActions.unlock();\n        let private_key = WalletDb.getPrivateKey(\n            this.acc.active.key_auths[0][0]\n        );\n        tr.add_signer(\n            private_key,\n            private_key.toPublicKey().toPublicKeyString()\n        );\n\n        return tr.broadcast();\n    }\n}\n\nexport default Account;\n","import ls from \"common/localStorage\";\n\nvar bots = ls(\"__bots__\");\n\nclass Storage {\n    static getAccountBot(account) {\n        let re = new RegExp(`^__bots__${account}::`);\n        return Object.keys(localStorage).filter(key => re.test(key));\n    }\n\n    static has(name) {\n        return bots.has(name);\n    }\n\n    constructor(name) {\n        //bots.has(name)\n        this.name = name;\n        //if (!bots.has(name))\n        //bots.set(name, {})\n    }\n\n    init(data) {\n        if (!bots.has(name)) bots.set(this.name, data);\n    }\n\n    read() {\n        return bots.get(this.name);\n    }\n\n    write(newState) {\n        bots.set(this.name, newState);\n    }\n\n    delete() {\n        bots.remove(this.name);\n    }\n}\n\nexport default Storage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAuBA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAlCA;AAoCA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAnDA;AAqDA;AAEA;AACA;AAxDA;AAyDA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzDA;AAgEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAjEA;AAwEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA5EA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAWA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AA4DA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AADA;AADA;AAeA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AATA;AAzBA;AA2CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AAWA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAlBA;AA4BA;AAAA;AAAA;AAAA;AA9BA;AAfA;AA5CA;AADA;AAiGA;;;;AA3LA;AACA;AA6LA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;ACrMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AA/CA;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAyEA;AAGA;AACA;AA7EA;AA8EA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAmBA;AAnBA;AAAA;AACA;AADA;AAsBA;AAtBA;AAAA;AACA;AADA;AAAA;AA8BA;AAOA;AACA;AACA;AAvCA;AA0BA;AAaA;AAMA;AACA;AACA;AAKA;AACA;AArDA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA4DA;AACA;AACA;AA/DA;AAAA;AACA;AADA;AACA;AAqEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAUA;AA3FA;AAAA;AAAA;AACA;AADA;AA6FA;AACA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AA1GA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA4GA;AACA;AACA;AA/GA;AAAA;AAAA;AACA;AADA;AAkHA;AACA;AACA;AACA;AAKA;AACA;AACA;AA5HA;AAAA;AAAA;AAAA;AACA;AAgIA;AACA;AAlIA;AAAA;AAAA;AACA;AADA;AAsIA;AACA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AAnJA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqJA;AACA;AAvJA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiKA;AACA;AACA;AApKA;AAAA;AACA;AADA;AACA;AA0KA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAUA;AA/LA;AAAA;AAAA;AACA;AADA;AAiMA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AA5MA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA8MA;AACA;AACA;AAjNA;AAAA;AAAA;AACA;AADA;AAoNA;AACA;AACA;AAKA;AACA;AACA;AA7NA;AAAA;AAAA;AAAA;AACA;AAiOA;AACA;AAnOA;AAAA;AAAA;AACA;AADA;AAyOA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AApPA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAsPA;AACA;AAxPA;AACA;AA2PA;AACA;AA7PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AALA;AASA;AApBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;;AACA;AACA;;AAAA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;;;;;;;;;AAwQA;AACA;AACA;;;;;;AACA;AACA;;AAAA;;;;;;AAEA;AACA;;AAAA;AACA;;AAGA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;;AADA;;AACA;AACA;;AAAA;AAEA;AAIA;;AAIA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AACA;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;AACA;AAIA;AACA;AACA;;;AAGA;AACA;;AADA;;AAGA;AACA;;AADA;AACA;AAAA;AACA;;;;;;;;AAEA;AACA;;;AAIA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAtaA;AACA;AACA;AAyaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrbA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAaA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AA5DA;AACA;AA8DA;AACA;AACA;;;;;AAjGA;AACA;AACA;;;AAiGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAFA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAzDA;AA2EA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAzDA;AA5EA;AAwJA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAFA;AA1KA;AA6LA;;;;AAhTA;AACA;AAkTA;;;;;;;;ACzTA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AA9CA;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AACA;AAmCA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;AAzDA;AACA;AAGA;;;AAuDA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAxDA;AA0EA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAxDA;AA3EA;AAsJA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAFA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAxKA;AAkLA;;;;AAhPA;AACA;AAkPA;;;;;;;;;;;;;;;;ACrPA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;AAAA;AACA;;;AACA;AACA;;AADA;AACA;AACA;;;;;AACA;AACA;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;AAAA;AACA;;;AACA;AACA;;AADA;AACA;AACA;;;;;AAAA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;;AAAA;AACA;;;;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;;AACA;AACA;AAAA;AACA;;AAFA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;;;;;;;;;AAGA;AAAA;;AAAA;AACA;;AADA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AACA;;;;;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;;;;;;;;;;;;;;;;;;AAQA;AAIA;AACA;;;;;;;AAEA;AACA;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAKA;;;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;AADA;;AAUA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;AAGA;AAIA;AACA;;;;;;;AAEA;AACA;;;AACA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AACA;AAKA;;;;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;AADA;;AAUA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AAAA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;AACA;AAAA;;AACA;AACA;;;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;;AC9HA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}