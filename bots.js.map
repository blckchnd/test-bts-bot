{"version":3,"file":"bots.74c3c0b4436ac383324d.js","sources":["webpack:///app/components/Bots/Bots.jsx","webpack:///app/lib/bots/index.js","webpack:///app/lib/bots/SpreadTrade/index.js","webpack:///app/components/Bots/SpreadTrade/CreateForm.jsx","webpack:///app/components/Bots/SpreadTrade/StateForm.jsx","webpack:///app/lib/bots/apis.js","webpack:///app/lib/bots/assets.js","webpack:///app/lib/bots/RelativeOrders/index.js","webpack:///app/components/Bots/RelativeOrders/Create.jsx","webpack:///app/components/Bots/RelativeOrders/State.jsx","webpack:///app/stores/BotsStorage.js"],"sourcesContent":["import React from \"react\";\nimport BotManager from \"lib/bots\";\nimport AccountStore from \"stores/AccountStore\";\n\nconst strategies = Object.keys(BotManager.strategies);\nconst accounts = Array.from(AccountStore.getState().myActiveAccounts);\n\nclass Bots extends React.Component {\n    state = {\n        selectStrategy: strategies[0],\n        bots: BotManager.getBots(accounts[0]),\n        selectBot: null\n    };\n\n    handleChangeStrategy = event => {\n        this.setState({selectStrategy: event.target.value});\n    };\n\n    handleChangeBot = event => {\n        this.setState({selectBot: event.target.value});\n    };\n\n    handleCreate = event => {\n        event.preventDefault();\n        let bots = this.state.bots;\n\n        bots.push(\n            BotManager.create(\n                this.state.selectStrategy,\n                accounts[0],\n                this.createForm.state\n            )\n        );\n        this.setState({bots});\n    };\n\n    render() {\n        console.log(\"selectStrategy\", this.state.selectStrategy);\n        //let CreateForm = BotManager.strategies[this.state.selectStrategy].create\n\n        let CreateForm = () => {\n            let Create =\n                BotManager.strategies[this.state.selectStrategy].create;\n\n            return (\n                <div className=\"content-block\">\n                    <Create\n                        ref={form => {\n                            this.createForm = form;\n                        }}\n                        account={accounts[0]}\n                        name={this.state.selectStrategy}\n                    />\n                    <button\n                        className=\"button float-right no-margin\"\n                        type=\"submit\"\n                        disabled={false}\n                    >\n                        Create\n                    </button>\n                </div>\n            );\n        };\n\n        let StateForm = () => {\n            if (this.state.selectBot) {\n                let State = this.state.bots[this.state.selectBot].state;\n                return (\n                    <div>\n                        <State bot={this.state.bots[this.state.selectBot]} />\n                        <button\n                            className=\"button\"\n                            onClick={() =>\n                                this.state.bots[this.state.selectBot].start()\n                            }\n                        >\n                            Start\n                        </button>\n                        <button\n                            className=\"button\"\n                            onClick={() =>\n                                this.state.bots[this.state.selectBot].stop()\n                            }\n                        >\n                            Stop\n                        </button>\n                        <button className=\"button\">Delete</button>\n                    </div>\n                );\n            } else {\n                return <p>Please, select bot</p>;\n            }\n        };\n        //console.log(\"state form\",StateForm)\n        //console.log(\"bots\", this.state.bots)\n\n        return (\n            <div className=\"grid-block vertical\">\n                <div className=\"grid-block shrink vertical medium-horizontal\">\n                    <form\n                        style={{paddingBottom: 20, overflow: \"visible\"}}\n                        className=\"grid-content small-12 medium-6 large-5 large-offset-1 full-width-content\"\n                        onSubmit={this.handleCreate}\n                        noValidate\n                    >\n                        <div className=\"content-block\">\n                            <div className=\"left-label\" style={{marginTop: 30}}>\n                                Select strategy:\n                            </div>\n                            <div className=\"content-block\">\n                                <select\n                                    className={\"form-control bts-select \"}\n                                    value={this.props.selectStrategy}\n                                    onChange={this.handleChangeStrategy}\n                                >\n                                    {strategies.map(name => (\n                                        <option key={name} value={name}>\n                                            {name}\n                                        </option>\n                                    ))}\n                                </select>\n                            </div>\n                        </div>\n                        <hr />\n                        <CreateForm />\n                    </form>\n                    <div className=\"content-block\">\n                        {\"Bot state:\"}\n                        <select\n                            className={\n                                \"form-control account-select bts-select \"\n                            }\n                            value={this.props.selectBot}\n                            onChange={this.handleChangeBot}\n                        >\n                            <option key=\"empty\" value={null}>\n                                Select bot\n                            </option>\n                            {this.state.bots.map((bot, index) => (\n                                <option key={bot.name} value={index}>\n                                    {bot.name}\n                                </option>\n                            ))}\n                        </select>\n                        <div className=\"content-block\">\n                            <StateForm />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Bots;\n","import SpreadTrade from \"./SpreadTrade\";\nimport RelativeOrders from \"./RelativeOrders\";\n//import Storage from \"./Storage\"\nimport Storage from \"stores/BotsStorage\";\n\nexport default {\n    strategies: {\n        SpreadTrade,\n        RelativeOrders\n    },\n    Storage,\n    account: \"\",\n\n    create(strategy, account, initData) {\n        //console.log(\"Hello, create function\", strategy, account, initData)\n        let storage = new Storage(`${account}::${strategy}[${initData.name}]`);\n\n        return new this.strategies[strategy](account, storage, initData);\n    },\n\n    getBots(account) {\n        return Storage.getAccountBot(account).map(key => {\n            let [strategy, name] = key\n                .replace(/^__bots__(.+)::(\\w+)\\[(\\w+)\\]/, \"$2,$3\")\n                .split(\",\");\n            let storage = new Storage(`${account}::${strategy}[${name}]`);\n\n            return new this.strategies[strategy](account, storage);\n        });\n    },\n\n    hasBot(account, strategy, name) {\n        console.log(\"check name stategy\", account, strategy, name);\n        return Storage.has(`${account}::${strategy}[${name}]`);\n    }\n};\n","import Create from \"components/Bots/SpreadTrade/CreateForm\";\nimport State from \"components/Bots/SpreadTrade/StateForm\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Apis from \"lib/bots/apis\";\nimport Assets from \"lib/bots/assets\";\nimport BigNumber from \"bignumber.js\";\n\nclass SpreadTrade {\n    static create = Create;\n    state = State;\n\n    constructor(account, storage, initData) {\n        this.account = account;\n        this.storage = storage;\n        //this.config = initData\n\n        //State.props.storage = storage\n        if (initData) storage.init(initData);\n\n        this.name = storage.read().name;\n\n        this.logger = console;\n        this.queueEvents = Promise.resolve();\n    }\n\n    async start() {\n        console.log(\"start\");\n        let state = this.storage.read();\n\n        this.base = await Assets[state.baseAsset];\n        this.quote = await Assets[state.quoteAsset];\n\n        if ([this.base.issuer, this.quote.issuer].includes(\"1.2.0\")) {\n            if ([this.base.id, this.quote.id].includes(\"1.3.0\"))\n                this.getFeed = this.getCoreFeed;\n            else if (this.base.issuer == this.quote.issuer)\n                this.getFeed = this.getSmartFeed;\n            else this.getFeed = this.getUIAFeed;\n        } else {\n            this.getFeed = this.getUIAFeed;\n        }\n\n        ChainStore.subscribe(this.queue);\n        this.queue();\n    }\n\n    async stop() {\n        ChainStore.unsubscribe(this.queue);\n    }\n\n    queue = () => {\n        this.queueEvents = this.queueEvents\n            .then(this.checkOrders)\n            .catch(this.logger.error.bind(this.logger));\n    };\n\n    checkOrders = async () => {\n        let state = this.storage.read();\n\n        let feedPrice = await this.getFeed(),\n            buyPrice = feedPrice.div(1 + state.baseSpread / 100).toNumber(),\n            sellPrice = feedPrice.times(1 + state.quoteSpread / 100).toNumber();\n\n        feedPrice = feedPrice.toNumber();\n\n        if (feedPrice == 0) return;\n\n        console.log(\"feed\", feedPrice, buyPrice, sellPrice);\n        return;\n\n        let buyOrder = state.buy.id\n                ? await this.account.getOrder(state.buy.id)\n                : state.buy.id,\n            sellOrder = state.sell.id\n                ? await this.account.getOrder(state.sell.id)\n                : state.sell.id;\n\n        if (buyOrder) {\n            //check Price\n            if (\n                new BigNumber(Math.abs(buyPrice - state.buy.price))\n                    .div(state.buy.price)\n                    .isGreaterThanOrEqualTo(this.conf.movePercent / 100)\n            ) {\n                // move order\n\n                this.logger.info(\n                    `move buy order: ${buyPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                await this.account.cancelOrder(state.buy.id);\n\n                // check amount in order\n                let orderAmount = new BigNumber(buyOrder.for_sale)\n                    .div(10 ** this.base.precision)\n                    .toNumber();\n                state.buy.balance += orderAmount;\n\n                // add to sell balance\n                if (state.buy.amount > orderAmount)\n                    state.sell.balance += new BigNumber(\n                        state.buy.amount - orderAmount\n                    )\n                        .div(state.buy.price)\n                        .toNumber();\n\n                let accountBalance =\n                    (await this.account.balances(this.base.symbol))[0].amount /\n                    10 ** this.base.precision;\n                let amount = Math.min(\n                    accountBalance,\n                    state.buy.balance,\n                    this.conf.base.amount\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.base.symbol,\n                        this.quote.symbol,\n                        amount,\n                        new BigNumber(1).div(buyPrice).toNumber()\n                    );\n                    state.buy = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: buyPrice,\n                        balance: state.buy.balance - amount,\n                        amount\n                    };\n                } catch (error) {\n                    this.logger.error(error);\n                    state.buy.id = undefined;\n                }\n            }\n        } else {\n            if (/^1.7.\\d*$/.test(state.buy.id)) {\n                // fill order\n                state.sell.balance += new BigNumber(state.buy.amount)\n                    .div(state.buy.price)\n                    .toNumber();\n                state.buy.id = undefined;\n            }\n\n            let accountBalance = new BigNumber(\n                (await this.account.balances(this.base.symbol))[0].amount\n            )\n                .div(10 ** this.base.precision)\n                .toNumber();\n\n            if (\n                Math.min(accountBalance, state.buy.balance) >=\n                this.conf.base.amount\n            ) {\n                //buy\n                this.logger.info(\n                    `buy: ${buyPrice} ${this.quote.symbol}/${this.base.symbol}`\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.base.symbol,\n                        this.quote.symbol,\n                        this.conf.base.amount,\n                        new BigNumber(1).div(buyPrice).toNumber()\n                    );\n                    state.buy = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: buyPrice,\n                        balance: state.buy.balance - this.conf.base.amount,\n                        amount: this.conf.base.amount\n                    };\n                } catch (error) {\n                    this.logger.error(error);\n                }\n            }\n        }\n\n        if (sellOrder) {\n            //check Price\n            if (\n                new BigNumber(Math.abs(sellPrice - state.sell.price))\n                    .div(state.sell.price)\n                    .isGreaterThanOrEqualTo(this.conf.movePercent / 100)\n            ) {\n                // move order\n\n                this.logger.info(\n                    `move sell order: ${sellPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                await this.account.cancelOrder(state.sell.id);\n\n                // check amount in order\n                let orderAmount = new BigNumber(sellOrder.for_sale)\n                    .div(10 ** this.quote.precision)\n                    .toNumber();\n                state.sell.balance += orderAmount;\n\n                // add to buy balance\n                if (state.sell.amount > orderAmount)\n                    state.buy.balance += new BigNumber(\n                        state.sell.amount - orderAmount\n                    )\n                        .times(state.sell.price)\n                        .toNumber();\n\n                let accountBalance = new BigNumber(\n                    (await this.account.balances(this.quote.symbol))[0].amount\n                )\n                    .div(10 ** this.quote.precision)\n                    .toNumber();\n                let amount = Math.min(\n                    accountBalance,\n                    state.sell.balance,\n                    this.conf.quote.amount\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.quote.symbol,\n                        this.base.symbol,\n                        amount,\n                        sellPrice\n                    );\n                    state.sell = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: sellPrice,\n                        balance: state.sell.balance - amount,\n                        amount\n                    };\n                } catch (error) {\n                    this.logger.error(error);\n                    state.sell.id = undefined;\n                }\n            }\n        } else {\n            if (/^1.7.\\d*$/.test(state.sell.id)) {\n                // fill order\n                state.buy.balance += new BigNumber(state.sell.amount)\n                    .times(state.sell.price)\n                    .toNumber();\n                state.sell.id = undefined;\n            }\n\n            let accountBalance = new BigNumber(\n                (await this.account.balances(this.quote.symbol))[0].amount\n            )\n                .div(10 ** this.quote.precision)\n                .toNumber();\n\n            if (\n                Math.min(accountBalance, state.sell.balance) >=\n                this.conf.quote.amount\n            ) {\n                //buy\n                this.logger.info(\n                    `sell: ${sellPrice} ${this.quote.symbol}/${\n                        this.base.symbol\n                    }`\n                );\n                try {\n                    let obj = await this.account.sell(\n                        this.quote.symbol,\n                        this.base.symbol,\n                        this.conf.quote.amount,\n                        sellPrice\n                    );\n                    state.sell = {\n                        id: obj ? obj.id : \"1.7.0\",\n                        price: sellPrice,\n                        balance: state.sell.balance - this.conf.quote.amount,\n                        amount: this.conf.quote.amount\n                    };\n                } catch (error) {\n                    this.logger.error(error);\n                }\n            }\n        }\n\n        this.storage.write(state);\n    };\n\n    async getCoreFeed() {\n        let rate;\n\n        if (this.base.id == \"1.3.0\") {\n            await this.quote.update();\n            rate = this.quote.options.core_exchange_rate;\n        } else {\n            await this.base.update();\n            rate = this.base.options.core_exchange_rate;\n        }\n\n        let [base, quote] =\n            rate.base.asset_id == this.base.id\n                ? [rate.base, rate.quote]\n                : [rate.quote, rate.base];\n\n        return new BigNumber(base.amount)\n            .div(10 ** this.base.precision)\n            .div(new BigNumber(quote.amount).div(10 ** this.quote.precision));\n    }\n\n    async getSmartFeed() {\n        let bts = await Assets[\"bts\"];\n        await this.base.update();\n        let rate = this.base.options.core_exchange_rate;\n        let [base, quote] =\n            rate.base.asset_id == \"1.3.0\"\n                ? [rate.base, rate.quote]\n                : [rate.quote, rate.base];\n\n        let basePrice = new BigNumber(base.amount)\n            .div(10 ** bts.precision)\n            .div(new BigNumber(quote.amount).div(10 ** this.base.precision));\n\n        await this.quote.update();\n        rate = this.quote.options.core_exchange_rate;\n        if (rate.base.asset_id == \"1.3.0\") {\n            base = rate.base;\n            quote = rate.quote;\n        } else {\n            base = rate.quote;\n            quote = rate.base;\n        }\n\n        let quotePrice = new BigNumber(base.amount)\n            .div(10 ** bts.precision)\n            .div(new BigNumber(quote.amount).div(10 ** this.quote.precision));\n\n        return quotePrice.div(basePrice);\n    }\n\n    async getUIAFeed() {\n        return this.defaultPrice\n            ? new BigNumber(this.defaultPrice)\n            : await this.binancePrice(this.base.symbol, this.quote.symbol);\n        //return BigNumber(this.conf.defaultPrice++)\n    }\n\n    async binancePrice(base, quote) {\n        let asset = `${quote.split(\".\").slice(-1)[0]}${\n            base.split(\".\").slice(-1)[0]\n        }`\n            .toUpperCase()\n            .replace(\"USD\", \"USDT\");\n        console.log(`get asset: ${asset}`);\n        this.priceArray = this.priceArray || [];\n\n        try {\n            let data = await axios.get(\n                \"https://api.binance.com/api/v1/trades\",\n                {params: {symbol: asset, limit: 1}}\n            );\n            this.priceArray.push(data.data[0].price);\n        } catch (error) {\n            this.logger.error(\n                `Error Binance request: ${asset}, error: ${error}`\n            );\n        }\n\n        if (this.priceArray.length > 10) this.priceArray.shift();\n\n        return this.priceArray.length > 0\n            ? this.priceArray\n                  .reduce((a, b) => a.plus(b), new BigNumber(0))\n                  .div(this.priceArray.length)\n            : new BigNumber(0);\n    }\n}\n\nexport default SpreadTrade;\n","import React from \"react\";\nimport BotManager from \"lib/bots\";\nimport {ChainStore} from \"bitsharesjs\";\n//import {debounce} from \"lodash-es\";\n\n/*\n{\n    name: \"RubleWorker\",\n    strategy: \"SpreadTrade\",\n    base: {\n      asset: \"bts\",\n      balance: 2,\n      amount: 1,\n      spread: 2,\n    },\n    quote: {\n      asset: \"ruble\",\n      balance: 1,\n      amount: 1,\n      spread: 2\n    },\n    movePercent: 2,\n    defaultPrice: 10\n}\n*/\nclass CreateForm extends React.Component {\n    state = {\n        name: \"\",\n        baseAsset: \"USD\",\n        quoteAsset: \"OPEN.BTC\",\n        validate: []\n    };\n\n    componentWillMount() {\n        Object.keys(this.state).forEach(name =>\n            this.validate(name, this.state[name])\n        );\n    }\n\n    handleChange = event => {\n        console.log(event.target.name, event.target.value);\n        let name = event.target.name,\n            value = event.target.value;\n\n        this.setState({[name]: value}, () => this.validate(name, value));\n    };\n\n    validate = (name, value) => {\n        let validate = this.state.validate;\n\n        switch (name) {\n            case \"name\":\n                if (\n                    value.length == 0 ||\n                    BotManager.hasBot(\n                        this.props.account,\n                        this.props.name,\n                        value\n                    )\n                ) {\n                    validate.push(name);\n                    this.setState({validate});\n                } else {\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                }\n                break;\n            case \"baseAsset\":\n            case \"quoteAsset\":\n                if (value.length == 0) {\n                    validate.push(name);\n                    this.setState({validate});\n                } else {\n                    this.setState({\n                        validate: validate.filter(input => input !== name)\n                    });\n                }\n                break;\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Name</label>\n                    <input\n                        name=\"name\"\n                        id=\"name\"\n                        type=\"text\"\n                        ref=\"input\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                        autoComplete=\"name\"\n                        style={{\n                            border: this.state.validate.includes(\"name\")\n                                ? \"1px solid red\"\n                                : \"none\"\n                        }}\n                    />\n                </div>\n                <div className=\"grid-block horizontal\">\n                    <div className=\"content-block\" style={{marginLeft: 50}}>\n                        <label style={{textAlign: \"center\"}}>Base</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"baseAsset\"\n                            id=\"baseAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            value={this.state.baseAsset}\n                            onChange={this.handleChange}\n                            autoComplete=\"baseAsset\"\n                            style={{\n                                border: this.state.validate.includes(\n                                    \"baseAsset\"\n                                )\n                                    ? \"1px solid red\"\n                                    : \"none\"\n                            }}\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"baseBalance\"\n                            id=\"baseBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"baseBalance\"\n                        />\n                        <label className=\"left-label\">Amount</label>\n                        <input\n                            name=\"baseAmount\"\n                            id=\"baseAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"baseAmount\"\n                        />\n                        <label className=\"left-label\">Spread</label>\n                        <input\n                            name=\"baseSpread\"\n                            id=\"baseSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"baseSpread\"\n                        />\n                    </div>\n                    <div className=\"content-block\" style={{marginLeft: 50}}>\n                        <label style={{textAlign: \"center\"}}>Quote</label>\n                        <label className=\"left-label\">Asset</label>\n                        <input\n                            name=\"quoteAsset\"\n                            id=\"quoteAsset\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteAsset\"\n                        />\n                        <label className=\"left-label\">Balance</label>\n                        <input\n                            name=\"quoteBalance\"\n                            id=\"quoteBalance\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteBalance\"\n                        />\n                        <label className=\"left-label\">Amount</label>\n                        <input\n                            name=\"quoteAmount\"\n                            id=\"quoteAmount\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteAmount\"\n                        />\n                        <label className=\"left-label\">Spread</label>\n                        <input\n                            name=\"quoteSpread\"\n                            id=\"quoteSpread\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"quoteSpread\"\n                        />\n                    </div>\n                </div>\n\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Move Percent</label>\n                    <input\n                        name=\"movePercent\"\n                        id=\"movePercent\"\n                        type=\"text\"\n                        ref=\"input\"\n                        onChange={this.handleChange}\n                        autoComplete=\"movePercent\"\n                    />\n                </div>\n                <div className=\"content-block\">\n                    <label className=\"left-label\">Default Price</label>\n                    <input\n                        name=\"defaultPrice\"\n                        id=\"defaultPrice\"\n                        type=\"text\"\n                        ref=\"input\"\n                        onChange={this.handleChange}\n                        autoComplete=\"defaultPrice\"\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CreateForm;\n","import React from \"react\";\n\nclass StateForm extends React.Component {\n    render() {\n        console.log(\"StateForm props\", this.props);\n        return (\n            <div>\n                <p>Hello State SpreadTrade! {this.props.bot.name}!!</p>\n                <div>\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">Name</label>\n                        <input\n                            name=\"name\"\n                            id=\"name\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"name\"\n                        />\n                    </div>\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">Base</label>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Asset</label>\n                            <input\n                                name=\"baseAsset\"\n                                id=\"baseAsset\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"baseAsset\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Balance</label>\n                            <input\n                                name=\"baseBalance\"\n                                id=\"baseBalance\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"baseBalance\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Amount</label>\n                            <input\n                                name=\"baseAmount\"\n                                id=\"baseAmount\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"baseAmount\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Spread</label>\n                            <input\n                                name=\"baseSpread\"\n                                id=\"baseSpread\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"baseSpread\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">Quote</label>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Asset</label>\n                            <input\n                                name=\"quoteAsset\"\n                                id=\"quoteAsset\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"quoteAsset\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Balance</label>\n                            <input\n                                name=\"quoteBalance\"\n                                id=\"quoteBalance\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"quoteBalance\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Amount</label>\n                            <input\n                                name=\"quoteAmount\"\n                                id=\"quoteAmount\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"quoteAmount\"\n                            />\n                        </div>\n                        <div className=\"content-block\">\n                            <label className=\"left-label\">Spread</label>\n                            <input\n                                name=\"quoteSpread\"\n                                id=\"quoteSpread\"\n                                type=\"text\"\n                                ref=\"input\"\n                                onChange={this.handleChange}\n                                autoComplete=\"quoteSpread\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">Move Percent</label>\n                        <input\n                            name=\"movePercent\"\n                            id=\"movePercent\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"movePercent\"\n                        />\n                    </div>\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">Default Price</label>\n                        <input\n                            name=\"defaultPrice\"\n                            id=\"defaultPrice\"\n                            type=\"text\"\n                            ref=\"input\"\n                            onChange={this.handleChange}\n                            autoComplete=\"defaultPrice\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default StateForm;\n","import {Apis} from \"bitsharesjs-ws\";\n\nexport default {\n    db: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                //console.log(`call Apis.db.${method}(${[...arguments]})`)\n                return apis\n                    .instance()\n                    .db_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    history: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .history_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    network: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .network_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    crypto: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .crypto_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    }),\n\n    orders: new Proxy(Apis, {\n        get(apis, method) {\n            return function() {\n                return apis\n                    .instance()\n                    .orders_api()\n                    .exec(method, [...arguments]);\n            };\n        }\n    })\n};\n","import Apis from \"lib/bots/apis\";\n\nclass Asset {\n    static get(obj, name) {\n        if (obj[name]) return obj[name];\n\n        return this.getAsset(name);\n    }\n\n    static async getAsset(_symbol) {\n        let symbol = _symbol.toUpperCase();\n\n        this.map = this.map || {};\n\n        if (this.map[symbol]) return this.map[symbol];\n\n        let obj = (await Apis.db.list_assets(symbol, 1))[0];\n\n        if (!obj || obj.symbol !== symbol)\n            throw new Error(\n                `Not found asset ${symbol}! Blockchain return ${\n                    obj ? obj.symbol : obj\n                }`\n            );\n\n        this.map[symbol] = new this(obj);\n        return this.map[symbol];\n    }\n\n    static async id(id) {\n        this.map = this.map || {};\n        let asset = Object.keys(this.map).find(\n            symbol => this.map[symbol].id == id\n        );\n\n        if (asset) return this.map[asset];\n\n        asset = (await Apis.db.get_assets([id]))[0];\n\n        if (!asset) throw new Error(`Not found asset by id ${id}!`);\n\n        this.map[asset.symbol] = new this(asset);\n        return this.map[asset.symbol];\n    }\n\n    static async fromParam(param) {\n        return {amount: param.amount, asset: await this.id(param.asset_id)};\n    }\n\n    static async update() {\n        this.map = this.map || {};\n\n        let assets = await Apis.db.get_assets(\n            Object.keys(this.map).map(symbol => this.map[symbol].id)\n        );\n        assets.forEach(asset => Object.assign(this.map[asset.symbol], asset));\n    }\n\n    constructor(rpcObj) {\n        Object.assign(this, rpcObj);\n    }\n\n    toParam(number = 0) {\n        return {amount: number, asset_id: this.id};\n    }\n\n    fee() {\n        return this.options.market_fee_percent / 100 / 100;\n    }\n\n    async update() {\n        Object.assign(this, (await Apis.db.get_assets([this.id]))[0]);\n    }\n}\n\nexport default new Proxy(Asset, Asset);\n","import Create from \"components/Bots/RelativeOrders/Create\";\nimport State from \"components/Bots/RelativeOrders/State\";\nclass RelativeOrders {\n    static create = Create;\n    static state = State;\n\n    constructor() {}\n}\n\nexport default RelativeOrders;\n","import React from \"react\";\n\nclass Create extends React.Component {\n    render() {\n        return <p>Hello Create RelativeOrders</p>;\n    }\n}\n\nexport default Create;\n","import React from \"react\";\n\nclass State extends React.Component {\n    render() {\n        return <p>Hello State RelativeOrders</p>;\n    }\n}\n\nexport default State;\n","import ls from \"common/localStorage\";\n\nvar bots = ls(\"__bots__\");\n\nclass Storage {\n    static getAccountBot(account) {\n        let re = new RegExp(`^__bots__${account}::`);\n        return Object.keys(localStorage).filter(key => re.test(key));\n    }\n\n    static has(name) {\n        return bots.has(name);\n    }\n\n    constructor(name) {\n        //bots.has(name)\n        this.name = name;\n        //if (!bots.has(name))\n        //bots.set(name, {})\n    }\n\n    init(data) {\n        if (!bots.has(name)) bots.set(this.name, data);\n    }\n\n    read() {\n        return bots.get(this.name);\n    }\n\n    write(newState) {\n        bots.set(this.name, newState);\n    }\n}\n\nexport default Storage;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AAOA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAOA;AACA;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AARA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAQA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAlBA;AAqBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AACA;AADA;AADA;AALA;AADA;AAJA;AAkBA;AACA;AAzBA;AA2BA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAOA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AADA;AAVA;AAgBA;AAAA;AAAA;AACA;AADA;AAlBA;AA5BA;AADA;AAsDA;;;;AAhJA;AACA;AAkJA;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA7BA;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAwCA;AAGA;AACA;AA5CA;AA6CA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AAUA;AAXA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA2BA;AACA;AACA;AA9BA;AAAA;AACA;AADA;AACA;AAoCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA7CA;AAAA;AACA;AADA;AAAA;AAAA;AAmDA;AAGA;AAtDA;AAAA;AAAA;AACA;AADA;AA4DA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAlEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAwEA;AACA;AACA;AA3EA;AAAA;AAAA;AACA;AADA;AA8EA;AACA;AACA;AAGA;AACA;AACA;AArFA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAsFA;AACA;AAvFA;AAAA;AAAA;AAAA;AACA;AA+FA;AACA;AAjGA;AAAA;AAAA;AACA;AADA;AAqGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AA3GA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAiHA;AACA;AAnHA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA6HA;AACA;AACA;AAhIA;AAAA;AACA;AADA;AACA;AAsIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/IA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqJA;AAKA;AA1JA;AAAA;AAAA;AACA;AADA;AAgKA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAtKA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA4KA;AACA;AACA;AA/KA;AAAA;AAAA;AACA;AADA;AAkLA;AACA;AACA;AAGA;AACA;AACA;AAzLA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA0LA;AACA;AA3LA;AAAA;AAAA;AAAA;AACA;AAmMA;AACA;AArMA;AAAA;AAAA;AACA;AADA;AA2MA;AACA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAjNA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuNA;AACA;AAzNA;AACA;AA4NA;AACA;AA9NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA;AACA;;AAEA;AACA;;AADA;;AACA;AACA;;AADA;AACA;AACA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA;AACA;AACA;;;;;;AACA;AACA;;AAAA;;;;;;AAEA;AACA;;AAAA;AACA;;AAGA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;AACA;;AADA;;AACA;AACA;;AAAA;AAEA;AAIA;;AAIA;AACA;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;AACA;;;;;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;AACA;AACA;AAIA;AACA;AACA;;;AAEA;AACA;;AADA;AACA;AAGA;;;;;;;;AAEA;AACA;;;AAIA;AACA;AACA;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AArWA;AACA;AACA;AAwWA;;;;;;;;;;;;;;;;;;;;;;;ACjXA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AAcA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AA5BA;AA8BA;;;;;AA/CA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;;;AA6CA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAFA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AARA;AAgBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAtCA;AA+CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AA9BA;AAhDA;AAyFA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAtHA;AAmIA;;;;AA9LA;AACA;AAgMA;;;;;;;;;;;;;;;;;;;AC1NA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAnCA;AA+CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAnCA;AA+CA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AArHA;AAFA;AAqIA;;;;AAzIA;AACA;AA2IA;;;;;;;;AC9IA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AACA;AAUA;AACA;AACA;AACA;AAIA;AACA;AARA;AA9CA;;;;;;;;;;;;;;;;ACFA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;;AAEA;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;AAAA;AACA;;;AACA;AACA;;AADA;AACA;AACA;;;;;AACA;AACA;;;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;AAAA;AACA;;;AACA;AACA;;AADA;AACA;AACA;;;;;AAAA;AACA;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;;;;;AACA;;AAAA;AACA;;;;AADA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;;AACA;AACA;AAAA;AACA;;AAFA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;;;;;;;;;AAGA;AAAA;;AAAA;AACA;;AADA;AACA;AADA;AACA;;;;;;;;;;;;;;;;;;;;AAGA;;;;;;;;;;;;;AC3EA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AALA;AAAA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAHA;AACA;AAKA;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAHA;AACA;AAKA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}