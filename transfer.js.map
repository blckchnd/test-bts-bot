{"version":3,"file":"transfer.6febdf9369b8d6cac8db.js","sources":["webpack:///app/components/Transfer/Transfer.jsx","webpack:///./node_modules/query-string/index.js","webpack:///./node_modules/strict-uri-encode/index.js","webpack:///./node_modules/decode-uri-component/index.js"],"sourcesContent":["import React from \"react\";\nimport BalanceComponent from \"../Utility/BalanceComponent\";\nimport AccountActions from \"actions/AccountActions\";\nimport Translate from \"react-translate-component\";\nimport AccountSelect from \"../Forms/AccountSelect\";\nimport AccountSelector from \"../Account/AccountSelector\";\nimport AccountStore from \"stores/AccountStore\";\nimport AmountSelector from \"../Utility/AmountSelector\";\nimport utils from \"common/utils\";\nimport counterpart from \"counterpart\";\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\nimport {RecentTransactions} from \"../Account/RecentTransactions\";\nimport Immutable from \"immutable\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {connect} from \"alt-react\";\nimport {\n    checkFeeStatusAsync,\n    checkBalance,\n    shouldPayFeeWithAssetAsync\n} from \"common/trxHelper\";\nimport {debounce, isNaN} from \"lodash-es\";\nimport classnames from \"classnames\";\nimport {Asset} from \"common/MarketClasses\";\nimport queryString from \"query-string\";\n\nclass Transfer extends React.Component {\n    constructor(props) {\n        super(props);\n        let state = Transfer.getInitialState();\n        let query = queryString.parse(props.location.search) || {};\n\n        if (query.from) {\n            state.from_name = query.from;\n            ChainStore.getAccount(query.from);\n        }\n        if (query.to) {\n            state.to_name = query.to;\n            ChainStore.getAccount(query.to);\n        }\n        if (query.amount) state.amount = query.amount;\n        if (query.asset) {\n            state.asset_id = query.asset;\n            state.asset = ChainStore.getAsset(query.asset);\n        }\n        if (query.memo) state.memo = query.memo;\n        let currentAccount = AccountStore.getState().currentAccount;\n        if (!state.from_name) state.from_name = currentAccount;\n\n        this.state = state;\n        this.onTrxIncluded = this.onTrxIncluded.bind(this);\n\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n        this._checkFeeStatus = this._checkFeeStatus.bind(this);\n        this._checkBalance = this._checkBalance.bind(this);\n    }\n\n    static getInitialState() {\n        return {\n            from_name: \"\",\n            to_name: \"\",\n            from_account: null,\n            to_account: null,\n            amount: \"\",\n            asset_id: null,\n            asset: null,\n            memo: \"\",\n            error: null,\n            propose: false,\n            propose_account: \"\",\n            feeAsset: null,\n            fee_asset_id: \"1.3.0\",\n            feeAmount: new Asset({amount: 0}),\n            feeStatus: {}\n        };\n    }\n\n    componentWillMount() {\n        this.nestedRef = null;\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    shouldComponentUpdate(np, ns) {\n        let {asset_types: current_types} = this._getAvailableAssets();\n        let {asset_types: next_asset_types} = this._getAvailableAssets(ns);\n\n        if (next_asset_types.length === 1) {\n            let asset = ChainStore.getAsset(next_asset_types[0]);\n            if (current_types.length !== 1) {\n                this.onAmountChanged({amount: ns.amount, asset});\n            }\n\n            if (next_asset_types[0] !== this.state.fee_asset_id) {\n                if (asset && this.state.fee_asset_id !== next_asset_types[0]) {\n                    this.setState({\n                        feeAsset: asset,\n                        fee_asset_id: next_asset_types[0]\n                    });\n                }\n            }\n        }\n        return true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.currentAccount !== this.state.from_name &&\n            np.currentAccount !== this.props.currentAccount\n        ) {\n            this.setState(\n                {\n                    from_name: np.currentAccount,\n                    from_account: ChainStore.getAccount(np.currentAccount),\n                    feeStatus: {},\n                    fee_asset_id: \"1.3.0\",\n                    feeAmount: new Asset({amount: 0})\n                },\n                () => {\n                    this._updateFee();\n                    this._checkFeeStatus(\n                        ChainStore.getAccount(np.currentAccount)\n                    );\n                }\n            );\n        }\n    }\n\n    _checkBalance() {\n        const {feeAmount, amount, from_account, asset} = this.state;\n        if (!asset || !from_account) return;\n        const balanceID = from_account.getIn([\"balances\", asset.get(\"id\")]);\n        const feeBalanceID = from_account.getIn([\n            \"balances\",\n            feeAmount.asset_id\n        ]);\n        if (!asset || !from_account) return;\n        if (!balanceID) return this.setState({balanceError: true});\n        let balanceObject = ChainStore.getObject(balanceID);\n        let feeBalanceObject = feeBalanceID\n            ? ChainStore.getObject(feeBalanceID)\n            : null;\n        if (!feeBalanceObject || feeBalanceObject.get(\"balance\") === 0) {\n            this.setState({fee_asset_id: \"1.3.0\"}, this._updateFee);\n        }\n        if (!balanceObject || !feeAmount) return;\n        const hasBalance = checkBalance(\n            amount,\n            asset,\n            feeAmount,\n            balanceObject\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n    }\n\n    _checkFeeStatus(account = this.state.from_account) {\n        if (!account) return;\n\n        const assets = Object.keys(account.get(\"balances\").toJS()).sort(\n            utils.sortID\n        );\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content: this.state.memo\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(this.state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    _updateFee(state = this.state) {\n        let {fee_asset_id, from_account, asset_id} = state;\n        const {fee_asset_types} = this._getAvailableAssets(state);\n        if (\n            fee_asset_types.length === 1 &&\n            fee_asset_types[0] !== fee_asset_id\n        ) {\n            fee_asset_id = fee_asset_types[0];\n        }\n        if (!from_account) return null;\n        checkFeeStatusAsync({\n            accountID: from_account.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content: state.memo\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) =>\n            shouldPayFeeWithAssetAsync(from_account, fee).then(\n                should =>\n                    should\n                        ? this.setState(\n                              {fee_asset_id: asset_id},\n                              this._updateFee\n                          )\n                        : this.setState({\n                              feeAmount: fee,\n                              fee_asset_id: fee.asset_id,\n                              hasBalance,\n                              hasPoolBalance,\n                              error: !hasBalance || !hasPoolBalance\n                          })\n            )\n        );\n    }\n\n    fromChanged(from_name) {\n        if (!from_name) this.setState({from_account: null});\n        this.setState({\n            from_name,\n            error: null,\n            propose: false,\n            propose_account: \"\"\n        });\n    }\n\n    toChanged(to_name) {\n        this.setState({to_name, error: null});\n    }\n\n    onFromAccountChanged(from_account) {\n        this.setState({from_account, error: null}, () => {\n            this._updateFee();\n            this._checkFeeStatus();\n        });\n    }\n\n    onToAccountChanged(to_account) {\n        this.setState({to_account, error: null});\n    }\n\n    onAmountChanged({amount, asset}) {\n        if (!asset) {\n            return;\n        }\n        this.setState(\n            {amount, asset, asset_id: asset.get(\"id\"), error: null},\n            this._checkBalance\n        );\n    }\n\n    onFeeChanged({asset}) {\n        this.setState(\n            {feeAsset: asset, fee_asset_id: asset.get(\"id\"), error: null},\n            this._updateFee\n        );\n    }\n\n    onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    onTrxIncluded(confirm_store_state) {\n        if (\n            confirm_store_state.included &&\n            confirm_store_state.broadcasted_transaction\n        ) {\n            // this.setState(Transfer.getInitialState());\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        } else if (confirm_store_state.closed) {\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        }\n    }\n\n    onPropose(propose, e) {\n        e.preventDefault();\n        this.setState({propose, propose_account: null});\n    }\n\n    onProposeAccount(propose_account) {\n        this.setState({propose_account});\n    }\n\n    resetForm() {\n        this.setState({memo: \"\", to_name: \"\", to_account: null, amount: \"\"});\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.setState({error: null});\n        const {asset, amount} = this.state;\n        const sendAmount = new Asset({\n            real: amount,\n            asset_id: asset.get(\"id\"),\n            precision: asset.get(\"precision\")\n        });\n\n        AccountActions.transfer(\n            this.state.from_account.get(\"id\"),\n            this.state.to_account.get(\"id\"),\n            sendAmount.getAmount(),\n            asset.get(\"id\"),\n            this.state.memo\n                ? new Buffer(this.state.memo, \"utf-8\")\n                : this.state.memo,\n            this.state.propose ? this.state.propose_account : null,\n            this.state.feeAsset ? this.state.feeAsset.get(\"id\") : \"1.3.0\"\n        )\n            .then(() => {\n                this.resetForm.call(this);\n                TransactionConfirmStore.unlisten(this.onTrxIncluded);\n                TransactionConfirmStore.listen(this.onTrxIncluded);\n            })\n            .catch(e => {\n                let msg = e.message\n                    ? e.message.split(\"\\n\")[1] || e.message\n                    : null;\n                console.log(\"error: \", e, msg);\n                this.setState({error: msg});\n            });\n    }\n\n    setNestedRef(ref) {\n        this.nestedRef = ref;\n    }\n\n    _setTotal(asset_id, balance_id) {\n        const {feeAmount} = this.state;\n        let balanceObject = ChainStore.getObject(balance_id);\n        let transferAsset = ChainStore.getObject(asset_id);\n\n        let balance = new Asset({\n            amount: balanceObject.get(\"balance\"),\n            asset_id: transferAsset.get(\"id\"),\n            precision: transferAsset.get(\"precision\")\n        });\n\n        if (balanceObject) {\n            if (feeAmount.asset_id === balance.asset_id) {\n                balance.minus(feeAmount);\n            }\n            this.setState(\n                {amount: balance.getAmount({real: true})},\n                this._checkBalance\n            );\n        }\n    }\n\n    _getAvailableAssets(state = this.state) {\n        const {feeStatus} = this.state;\n        function hasFeePoolBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        const {from_account, from_error} = state;\n        let asset_types = [],\n            fee_asset_types = [];\n        if (!(from_account && from_account.get(\"balances\") && !from_error)) {\n            return {asset_types, fee_asset_types};\n        }\n        let account_balances = state.from_account.get(\"balances\").toJS();\n        asset_types = Object.keys(account_balances).sort(utils.sortID);\n        fee_asset_types = Object.keys(account_balances).sort(utils.sortID);\n        for (let key in account_balances) {\n            let balanceObject = ChainStore.getObject(account_balances[key]);\n            if (balanceObject && balanceObject.get(\"balance\") === 0) {\n                asset_types.splice(asset_types.indexOf(key), 1);\n                if (fee_asset_types.indexOf(key) !== -1) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n        }\n\n        fee_asset_types = fee_asset_types.filter(a => {\n            return hasFeePoolBalance(a) && hasBalance(a);\n        });\n\n        return {asset_types, fee_asset_types};\n    }\n\n    render() {\n        let from_error = null;\n        let {\n            propose,\n            from_account,\n            to_account,\n            asset,\n            asset_id,\n            propose_account,\n            feeAmount,\n            amount,\n            error,\n            to_name,\n            from_name,\n            memo,\n            feeAsset,\n            fee_asset_id,\n            balanceError\n        } = this.state;\n        let from_my_account =\n            AccountStore.isMyAccount(from_account) ||\n            from_name === this.props.passwordAccount;\n\n        if (from_account && !from_my_account && !propose) {\n            from_error = (\n                <span>\n                    {counterpart.translate(\"account.errors.not_yours\")}\n                    &nbsp;(<a onClick={this.onPropose.bind(this, true)}>\n                        {counterpart.translate(\"propose\")}\n                    </a>)\n                </span>\n            );\n        }\n\n        let {asset_types, fee_asset_types} = this._getAvailableAssets();\n        let balance = null;\n\n        // Estimate fee\n        let fee = this.state.feeAmount.getAmount({real: true});\n        if (from_account && from_account.get(\"balances\") && !from_error) {\n            let account_balances = from_account.get(\"balances\").toJS();\n            if (asset_types.length === 1)\n                asset = ChainStore.getAsset(asset_types[0]);\n            if (asset_types.length > 0) {\n                let current_asset_id = asset ? asset.get(\"id\") : asset_types[0];\n                let feeID = feeAsset ? feeAsset.get(\"id\") : \"1.3.0\";\n                balance = (\n                    <span\n                        style={{\n                            borderBottom: \"#A09F9F 1px dotted\",\n                            cursor: \"pointer\"\n                        }}\n                        onClick={this._setTotal.bind(\n                            this,\n                            current_asset_id,\n                            account_balances[current_asset_id],\n                            fee,\n                            feeID\n                        )}\n                    >\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />:{\" \"}\n                        <BalanceComponent\n                            balance={account_balances[current_asset_id]}\n                        />\n                    </span>\n                );\n            } else {\n                balance = \"No funds\";\n            }\n        }\n\n        let propose_incomplete = propose && !propose_account;\n        const amountValue = parseFloat(\n            String.prototype.replace.call(amount, /,/g, \"\")\n        );\n        const isAmountValid = amountValue && !isNaN(amountValue);\n        const isToAccountValid =\n            to_account && to_account.get(\"name\") === to_name;\n        const isSendNotValid =\n            !from_account ||\n            !isToAccountValid ||\n            !isAmountValid ||\n            !asset ||\n            from_error ||\n            propose_incomplete ||\n            balanceError;\n        let accountsList = Immutable.Set();\n        accountsList = accountsList.add(from_account);\n        let tabIndex = 1;\n\n        return (\n            <div className=\"grid-block vertical\">\n                <div\n                    className=\"grid-block shrink vertical medium-horizontal\"\n                    style={{paddingTop: \"2rem\"}}\n                >\n                    <form\n                        style={{paddingBottom: 20, overflow: \"visible\"}}\n                        className=\"grid-content small-12 medium-6 large-5 large-offset-1 full-width-content\"\n                        onSubmit={this.onSubmit.bind(this)}\n                        noValidate\n                    >\n                        <Translate content=\"transfer.header\" component=\"h2\" />\n                        {/*  F R O M  */}\n                        <div className=\"content-block\">\n                            <AccountSelector\n                                label=\"transfer.from\"\n                                ref=\"from\"\n                                accountName={from_name}\n                                onChange={this.fromChanged.bind(this)}\n                                onAccountChanged={this.onFromAccountChanged.bind(\n                                    this\n                                )}\n                                account={from_account}\n                                size={60}\n                                error={from_error}\n                                typeahead={true}\n                                tabIndex={tabIndex++}\n                            />\n                        </div>\n                        {/*  T O  */}\n                        <div className=\"content-block\">\n                            <AccountSelector\n                                label=\"transfer.to\"\n                                ref=\"to\"\n                                accountName={to_name}\n                                onChange={this.toChanged.bind(this)}\n                                onAccountChanged={this.onToAccountChanged.bind(\n                                    this\n                                )}\n                                account={to_account}\n                                size={60}\n                                tabIndex={tabIndex++}\n                                typeahead={true}\n                            />\n                        </div>\n                        {/*  A M O U N T   */}\n                        <div className=\"content-block transfer-input\">\n                            <AmountSelector\n                                label=\"transfer.amount\"\n                                amount={amount}\n                                onChange={this.onAmountChanged.bind(this)}\n                                asset={\n                                    asset_types.length > 0 && asset\n                                        ? asset.get(\"id\")\n                                        : asset_id\n                                            ? asset_id\n                                            : asset_types[0]\n                                }\n                                assets={asset_types}\n                                display_balance={balance}\n                                tabIndex={tabIndex++}\n                            />\n                            {this.state.balanceError ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.insufficient\" />\n                                </p>\n                            ) : null}\n                        </div>\n                        {/*  M E M O  */}\n                        <div className=\"content-block transfer-input\">\n                            {memo && memo.length ? (\n                                <label className=\"right-label\">\n                                    {memo.length}\n                                </label>\n                            ) : null}\n                            <Translate\n                                className=\"left-label tooltip\"\n                                component=\"label\"\n                                content=\"transfer.memo\"\n                                data-place=\"top\"\n                                data-tip={counterpart.translate(\n                                    \"tooltip.memo_tip\"\n                                )}\n                            />\n                            <textarea\n                                style={{marginBottom: 0}}\n                                rows=\"3\"\n                                value={memo}\n                                tabIndex={tabIndex++}\n                                onChange={this.onMemoChanged.bind(this)}\n                            />\n                            {/* warning */}\n                            {this.state.propose ? (\n                                <div\n                                    className=\"error-area\"\n                                    style={{position: \"absolute\"}}\n                                >\n                                    <Translate\n                                        content=\"transfer.warn_name_unable_read_memo\"\n                                        name={this.state.from_name}\n                                    />\n                                </div>\n                            ) : null}\n                        </div>\n\n                        {/*  F E E   */}\n                        <div\n                            className={\n                                \"content-block transfer-input fee-row\" +\n                                (this.state.propose ? \" proposal\" : \"\")\n                            }\n                        >\n                            <AmountSelector\n                                refCallback={this.setNestedRef.bind(this)}\n                                label=\"transfer.fee\"\n                                disabled={true}\n                                amount={fee}\n                                onChange={this.onFeeChanged.bind(this)}\n                                asset={\n                                    fee_asset_types.length && feeAmount\n                                        ? feeAmount.asset_id\n                                        : fee_asset_types.length === 1\n                                            ? fee_asset_types[0]\n                                            : fee_asset_id\n                                                ? fee_asset_id\n                                                : fee_asset_types[0]\n                                }\n                                assets={fee_asset_types}\n                                tabIndex={tabIndex++}\n                                error={\n                                    this.state.hasPoolBalance === false\n                                        ? \"transfer.errors.insufficient\"\n                                        : null\n                                }\n                            />\n                            {propose ? (\n                                <button\n                                    className={classnames(\n                                        \"button float-right no-margin\",\n                                        {disabled: isSendNotValid}\n                                    )}\n                                    type=\"submit\"\n                                    value=\"Submit\"\n                                    tabIndex={tabIndex++}\n                                >\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"propose\"\n                                    />\n                                </button>\n                            ) : (\n                                <button\n                                    className={classnames(\n                                        \"button float-right no-margin\",\n                                        {disabled: isSendNotValid}\n                                    )}\n                                    type=\"submit\"\n                                    value=\"Submit\"\n                                    tabIndex={tabIndex++}\n                                >\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"transfer.send\"\n                                    />\n                                </button>\n                            )}\n                        </div>\n\n                        {/* P R O P O S E   F R O M\n                            Having some proposed transaction logic here (prior to the transaction confirmation)\n                            allows adjusting of the memo to / from parameters.\n                        */}\n                        {propose ? (\n                            <div className=\"full-width-content form-group transfer-input\">\n                                <label className=\"left-label\">\n                                    <Translate content=\"account.propose_from\" />\n                                </label>\n                                <AccountSelect\n                                    account_names={AccountStore.getMyAccounts()}\n                                    onChange={this.onProposeAccount.bind(this)}\n                                    tabIndex={tabIndex++}\n                                />\n                            </div>\n                        ) : null}\n\n                        {/*  S E N D  B U T T O N  */}\n                        {error ? (\n                            <div className=\"content-block has-error\">\n                                {error}\n                            </div>\n                        ) : null}\n                        <div>\n                            {propose ? (\n                                <span>\n                                    <button\n                                        className=\" button\"\n                                        onClick={this.onPropose.bind(\n                                            this,\n                                            false\n                                        )}\n                                        tabIndex={tabIndex++}\n                                    >\n                                        <Translate\n                                            component=\"span\"\n                                            content=\"cancel\"\n                                        />\n                                    </button>\n                                </span>\n                            ) : null}\n                        </div>\n\n                        {/* TODO: show remaining balance */}\n                    </form>\n                    <div className=\"grid-content small-12 medium-6 large-4 large-offset-1 right-column\">\n                        <div className=\"grid-content no-padding\">\n                            <RecentTransactions\n                                accountsList={accountsList}\n                                limit={25}\n                                compactView={true}\n                                filter=\"transfer\"\n                                fullHeight={true}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"grid-content medium-6 large-4\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    Transfer,\n    {\n        listenTo() {\n            return [AccountStore];\n        },\n        getProps() {\n            return {\n                currentAccount: AccountStore.getState().currentAccount,\n                passwordAccount: AccountStore.getState().passwordAccount,\n                contactsList: AccountStore.getState().accountContacts\n            };\n        }\n    }\n);\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, index) => {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, options),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, options),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, options),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, options)\n\t\t\t\t].join('');\n\t\t\t};\n\t\tcase 'bracket':\n\t\t\treturn (key, value) => {\n\t\t\t\treturn value === null ? [encode(key, options), '[]'].join('') : [\n\t\t\t\t\tencode(key, options),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, options)\n\t\t\t\t].join('');\n\t\t\t};\n\t\tdefault:\n\t\t\treturn (key, value) => {\n\t\t\t\treturn value === null ? encode(key, options) : [\n\t\t\t\t\tencode(key, options),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, options)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction extract(input) {\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parse(input, options) {\n\toptions = Object.assign({decode: true, arrayFormat: 'none'}, options);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof input !== 'string') {\n\t\treturn ret;\n\t}\n\n\tinput = input.trim().replace(/^[?#&]/, '');\n\n\tif (!input) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of input.split('&')) {\n\t\tlet [key, value] = param.replace(/\\+/g, ' ').split('=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : decode(value, options);\n\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\treturn Object.keys(ret).sort().reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (obj, options) => {\n\tconst defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\toptions = Object.assign(defaults, options);\n\n\tif (options.sort === false) {\n\t\toptions.sort = () => {};\n\t}\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\treturn obj ? Object.keys(obj).sort(options.sort).map(key => {\n\t\tconst value = obj[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tconst result = [];\n\n\t\t\tfor (const value2 of value.slice()) {\n\t\t\t\tif (value2 === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, value2, result.length));\n\t\t\t}\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&') : '';\n};\n\nexports.parseUrl = (input, options) => {\n\treturn {\n\t\turl: input.split('?')[0] || '',\n\t\tquery: parse(extract(input), options)\n\t};\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n","'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA4BA;AACA;;;AAqBA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAGA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAQA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AALA;AANA;AAFA;AAiBA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;;;AAEA;AAAA;AACA;AAAA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAYA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;AACA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AAGA;AACA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AAFA;AAAA;AAOA;AACA;AAjCA;AAAA;AAAA;AACA;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAaA;AACA;AACA;AAFA;AAbA;AAgBA;AACA;AACA;AADA;AAjBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAZA;AADA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAXA;AADA;AAgBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAbA;AAeA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAjBA;AA0BA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAJA;AAxBA;AAqCA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AAjBA;AAuBA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AATA;AAeA;AAAA;AACA;AAIA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AATA;AA7CA;AAkEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAJA;AAaA;AACA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AANA;AAQA;AACA;AACA;AAFA;AARA;AADA;AAFA;AA7LA;AAmNA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AADA;AAYA;AAnOA;AADA;AAwOA;;;AAhqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;;;;AAjDA;AACA;AAisBA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAVA;;;;;;;;;AC7tsourceRoot":""}