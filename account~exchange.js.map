{"version":3,"file":"account~exchange.ebcbfcb5200223db7c63.js","sources":["webpack:///app/components/Exchange/MyOpenOrders.jsx","webpack:///app/components/Exchange/OpenSettleOrders.jsx","webpack:///app/components/Utility/PriceText.jsx","webpack:///app/components/Utility/MarketPrice.jsx","webpack:///app/components/Dashboard/SimpleDepositWithdraw.jsx","webpack:///app/components/Dashboard/SimpleDepositBlocktradesBridge.jsx","webpack:///app/components/Modal/BorrowModal.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\nimport counterpart from \"counterpart\";\nimport Ps from \"perfect-scrollbar\";\nimport OpenSettleOrders from \"./OpenSettleOrders\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport PriceText from \"../Utility/PriceText\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AssetName from \"../Utility/AssetName\";\nimport cnames from \"classnames\";\nimport Icon from \"../Icon/Icon\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {LimitOrder, CallOrder} from \"common/MarketClasses\";\nimport {EquivalentValueComponent} from \"../Utility/EquivalentValueComponent\";\nimport {MarketPrice} from \"../Utility/MarketPrice\";\nimport FormattedPrice from \"../Utility/FormattedPrice\";\nconst leftAlign = {textAlign: \"left\"};\nimport ReactTooltip from \"react-tooltip\";\n\nclass TableHeader extends React.Component {\n    render() {\n        let {baseSymbol, quoteSymbol, dashboard, isMyAccount} = this.props;\n\n        return !dashboard ? (\n            <thead>\n                <tr>\n                    <th style={{textAlign: this.props.leftAlign ? \"left\" : \"\"}}>\n                        <Translate\n                            className=\"header-sub-title\"\n                            content=\"exchange.price\"\n                        />\n                    </th>\n                    <th\n                        style={\n                            this.props.leftAlign ? {textAlign: \"left\"} : null\n                        }\n                    >\n                        {baseSymbol ? (\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={quoteSymbol} />\n                            </span>\n                        ) : null}\n                    </th>\n                    <th\n                        style={\n                            this.props.leftAlign ? {textAlign: \"left\"} : null\n                        }\n                    >\n                        {baseSymbol ? (\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={baseSymbol} />\n                            </span>\n                        ) : null}\n                    </th>\n                    <th style={{textAlign: this.props.leftAlign ? \"left\" : \"\"}}>\n                        <Translate\n                            className=\"header-sub-title\"\n                            content=\"transaction.expiration\"\n                        />\n                    </th>\n                    <th style={{width: \"6%\"}} />\n                </tr>\n            </thead>\n        ) : (\n            <thead>\n                <tr>\n                    <th style={leftAlign}>\n                        <Translate content=\"transaction.order_id\" />\n                    </th>\n                    <th style={leftAlign} colSpan=\"4\">\n                        <Translate content=\"exchange.description\" />\n                    </th>\n                    <th style={leftAlign}>\n                        <Translate content=\"exchange.price\" />\n                    </th>\n                    <th style={leftAlign}>\n                        <Translate content=\"exchange.price_market\" />\n                    </th>\n                    <th style={{textAlign: \"right\"}}>\n                        <Translate content=\"exchange.value\" />\n                    </th>\n                    {/* <th><Translate content=\"transaction.expiration\" /></th> */}\n                    <th>\n                        <Translate content=\"account.trade\" />\n                    </th>\n                    {isMyAccount ? (\n                        <th id=\"cancelAllOrders\" style={{cursor: \"pointer\"}}>\n                            <Translate content=\"wallet.cancel\" />\n                        </th>\n                    ) : null}\n                </tr>\n            </thead>\n        );\n    }\n}\n\nTableHeader.defaultProps = {\n    quoteSymbol: null,\n    baseSymbol: null\n};\n\nclass OrderRow extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.order.for_sale !== this.props.order.for_sale ||\n            nextProps.order.id !== this.props.order.id ||\n            nextProps.quote !== this.props.quote ||\n            nextProps.base !== this.props.base ||\n            nextProps.order.market_base !== this.props.order.market_base\n        );\n    }\n\n    render() {\n        let {\n            base,\n            quote,\n            order,\n            showSymbols,\n            dashboard,\n            isMyAccount,\n            settings\n        } = this.props;\n        const isBid = order.isBid();\n        const isCall = order.isCall();\n        let tdClass = isCall\n            ? \"orderHistoryCall\"\n            : isBid\n                ? \"orderHistoryBid\"\n                : \"orderHistoryAsk\";\n\n        let priceSymbol = showSymbols ? (\n            <span>{` ${base.get(\"symbol\")}/${quote.get(\"symbol\")}`}</span>\n        ) : null;\n        let valueSymbol = showSymbols ? \" \" + base.get(\"symbol\") : null;\n        let amountSymbol = showSymbols ? \" \" + quote.get(\"symbol\") : null;\n        let preferredUnit = settings ? settings.get(\"unit\") : \"1.3.0\";\n        let quoteColor = !isBid ? \"value negative\" : \"value positive\";\n        let baseColor = isBid ? \"value negative\" : \"value positive\";\n\n        return !dashboard ? (\n            <tr key={order.id}>\n                <td className={tdClass} style={{paddingLeft: 10}}>\n                    <PriceText\n                        price={order.getPrice()}\n                        base={base}\n                        quote={quote}\n                    />\n                    {priceSymbol}\n                </td>\n                <td>\n                    {utils.format_number(\n                        order[\n                            !isBid ? \"amountForSale\" : \"amountToReceive\"\n                        ]().getAmount({real: true}),\n                        quote.get(\"precision\")\n                    )}{\" \"}\n                    {amountSymbol}\n                </td>\n                <td>\n                    {utils.format_number(\n                        order[\n                            !isBid ? \"amountToReceive\" : \"amountForSale\"\n                        ]().getAmount({real: true}),\n                        base.get(\"precision\")\n                    )}{\" \"}\n                    {valueSymbol}\n                </td>\n                <td\n                    style={{width: \"25%\", textAlign: \"right\"}}\n                    className=\"tooltip\"\n                    data-tip={order.expiration.toLocaleString()}\n                >\n                    {isCall\n                        ? null\n                        : counterpart.localize(new Date(order.expiration), {\n                              type: \"date\",\n                              format: \"short_custom\"\n                          })}\n                </td>\n                <td className=\"text-center\" style={{width: \"6%\"}}>\n                    {isCall ? null : (\n                        <a\n                            style={{marginRight: 0}}\n                            className=\"order-cancel\"\n                            onClick={this.props.onCancel}\n                        >\n                            <Icon\n                                name=\"cross-circle\"\n                                title=\"icons.cross_circle.cancel_order\"\n                                className=\"icon-14px\"\n                            />\n                        </a>\n                    )}\n                </td>\n            </tr>\n        ) : (\n            <tr key={order.id} className=\"clickable\">\n                <td style={leftAlign}>#{order.id.substring(4)}</td>\n                <td colSpan=\"4\" style={leftAlign} onClick={this.props.onFlip}>\n                    {isBid ? (\n                        <Translate\n                            content=\"exchange.buy_description\"\n                            baseAsset={utils.format_number(\n                                order[\n                                    isBid ? \"amountToReceive\" : \"amountForSale\"\n                                ]().getAmount({real: true}),\n                                base.get(\"precision\"),\n                                false\n                            )}\n                            quoteAsset={utils.format_number(\n                                order[\n                                    isBid ? \"amountForSale\" : \"amountToReceive\"\n                                ]().getAmount({real: true}),\n                                quote.get(\"precision\"),\n                                false\n                            )}\n                            baseName={\n                                <AssetName\n                                    noTip\n                                    customClass={quoteColor}\n                                    name={quote.get(\"symbol\")}\n                                />\n                            }\n                            quoteName={\n                                <AssetName\n                                    noTip\n                                    customClass={baseColor}\n                                    name={base.get(\"symbol\")}\n                                />\n                            }\n                        />\n                    ) : (\n                        <Translate\n                            content=\"exchange.sell_description\"\n                            baseAsset={utils.format_number(\n                                order[\n                                    isBid ? \"amountToReceive\" : \"amountForSale\"\n                                ]().getAmount({real: true}),\n                                base.get(\"precision\"),\n                                false\n                            )}\n                            quoteAsset={utils.format_number(\n                                order[\n                                    isBid ? \"amountForSale\" : \"amountToReceive\"\n                                ]().getAmount({real: true}),\n                                quote.get(\"precision\"),\n                                false\n                            )}\n                            baseName={\n                                <AssetName\n                                    noTip\n                                    customClass={quoteColor}\n                                    name={quote.get(\"symbol\")}\n                                />\n                            }\n                            quoteName={\n                                <AssetName\n                                    noTip\n                                    customClass={baseColor}\n                                    name={base.get(\"symbol\")}\n                                />\n                            }\n                        />\n                    )}\n                </td>\n                <td style={leftAlign} onClick={this.props.onFlip}>\n                    <FormattedPrice\n                        base_amount={order.sellPrice().base.amount}\n                        base_asset={order.sellPrice().base.asset_id}\n                        quote_amount={order.sellPrice().quote.amount}\n                        quote_asset={order.sellPrice().quote.asset_id}\n                        force_direction={base.get(\"symbol\")}\n                        hide_symbols\n                    />\n                </td>\n                <td style={leftAlign} onClick={this.props.onFlip}>\n                    {isBid ? (\n                        <MarketPrice\n                            base={base.get(\"id\")}\n                            quote={quote.get(\"id\")}\n                            force_direction={base.get(\"symbol\")}\n                            hide_symbols\n                            hide_asset\n                        />\n                    ) : (\n                        <MarketPrice\n                            base={base.get(\"id\")}\n                            quote={quote.get(\"id\")}\n                            force_direction={base.get(\"symbol\")}\n                            hide_symbols\n                            hide_asset\n                        />\n                    )}\n                </td>\n                <td style={{textAlign: \"right\"}} onClick={this.props.onFlip}>\n                    <EquivalentValueComponent\n                        hide_asset\n                        amount={order.amountForSale().getAmount()}\n                        fromAsset={order.amountForSale().asset_id}\n                        noDecimals={true}\n                        toAsset={preferredUnit}\n                    />{\" \"}\n                    <AssetName name={preferredUnit} />\n                </td>\n                {/* <td>\n                    {isCall ? null : <FormattedDate\n                        value={order.expiration}\n                        format=\"short\"\n                    />}\n                    </td> */}\n                <td>\n                    <Link\n                        to={`/market/${quote.get(\"symbol\")}_${base.get(\n                            \"symbol\"\n                        )}`}\n                    >\n                        <Icon\n                            name=\"trade\"\n                            title=\"icons.trade.trade\"\n                            className=\"icon-14px\"\n                        />\n                    </Link>\n                </td>\n                {isMyAccount ? (\n                    <td className=\"text-center\" style={{padding: \"2px 5px\"}}>\n                        {isCall ? null : (\n                            <span\n                                style={{marginRight: 0}}\n                                className=\"order-cancel\"\n                            >\n                                <input\n                                    type=\"checkbox\"\n                                    className=\"orderCancel\"\n                                    onChange={this.props.onCheckCancel}\n                                />\n                            </span>\n                        )}\n                    </td>\n                ) : null}\n            </tr>\n        );\n    }\n}\n\nOrderRow.defaultProps = {\n    showSymbols: false\n};\n\nclass MyOpenOrders extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            activeTab: props.activeTab\n        };\n        this._getOrders = this._getOrders.bind(this);\n    }\n\n    componentDidMount() {\n        let contentContainer = this.refs.container;\n        if (contentContainer) Ps.initialize(contentContainer);\n    }\n\n    componentDidUpdate() {\n        let contentContainer = this.refs.container;\n        if (contentContainer) Ps.update(contentContainer);\n    }\n\n    _getOrders() {\n        const {currentAccount, base, quote, feedPrice} = this.props;\n        const orders = currentAccount.get(\"orders\"),\n            call_orders = currentAccount.get(\"call_orders\");\n        const baseID = base.get(\"id\"),\n            quoteID = quote.get(\"id\");\n        const assets = {\n            [base.get(\"id\")]: {precision: base.get(\"precision\")},\n            [quote.get(\"id\")]: {precision: quote.get(\"precision\")}\n        };\n        let limitOrders = orders\n            .toArray()\n            .map(order => {\n                let o = ChainStore.getObject(order);\n                if (!o) return null;\n                let sellBase = o.getIn([\"sell_price\", \"base\", \"asset_id\"]),\n                    sellQuote = o.getIn([\"sell_price\", \"quote\", \"asset_id\"]);\n                if (\n                    (sellBase === baseID && sellQuote === quoteID) ||\n                    (sellBase === quoteID && sellQuote === baseID)\n                ) {\n                    return new LimitOrder(o.toJS(), assets, quote.get(\"id\"));\n                }\n            })\n            .filter(a => !!a);\n\n        let callOrders = call_orders\n            .toArray()\n            .map(order => {\n                try {\n                    let o = ChainStore.getObject(order);\n                    if (!o) return null;\n                    let sellBase = o.getIn([\"call_price\", \"base\", \"asset_id\"]),\n                        sellQuote = o.getIn([\n                            \"call_price\",\n                            \"quote\",\n                            \"asset_id\"\n                        ]);\n                    if (\n                        (sellBase === baseID && sellQuote === quoteID) ||\n                        (sellBase === quoteID && sellQuote === baseID)\n                    ) {\n                        return feedPrice\n                            ? new CallOrder(\n                                  o.toJS(),\n                                  assets,\n                                  quote.get(\"id\"),\n                                  feedPrice\n                              )\n                            : null;\n                    }\n                } catch (e) {\n                    return null;\n                }\n            })\n            .filter(a => !!a)\n            .filter(a => {\n                try {\n                    return a.isMarginCalled();\n                } catch (err) {\n                    return false;\n                }\n            });\n        return limitOrders.concat(callOrders);\n    }\n\n    _changeTab(tab) {\n        SettingsActions.changeViewSetting({\n            ordersTab: tab\n        });\n        this.setState({\n            activeTab: tab\n        });\n\n        // Ensure that focus goes back to top of scrollable container when tab is changed\n        let contentContainer = this.refs.container;\n        contentContainer.scrollTop = 0;\n        Ps.update(contentContainer);\n\n        setTimeout(ReactTooltip.rebuild, 1000);\n    }\n\n    render() {\n        let {base, quote, quoteSymbol, baseSymbol, settleOrders} = this.props;\n        let {activeTab} = this.state;\n\n        if (!base || !quote) return null;\n\n        let contentContainer;\n\n        // Is asset a BitAsset with Settlements\n        let baseIsBitAsset =\n            base.get(\"bitasset_data_id\") && settleOrders.size > 0\n                ? true\n                : false;\n        let quoteIsBitAsset =\n            quote.get(\"bitasset_data_id\") && settleOrders.size > 0\n                ? true\n                : false;\n\n        // Default Tab\n        if (!activeTab || (!baseIsBitAsset && !quoteIsBitAsset)) {\n            activeTab = \"my_orders\";\n        }\n\n        {\n            /* Users Open Orders Tab (default) */\n        }\n        if (activeTab == \"my_orders\") {\n            const orders = this._getOrders();\n            let emptyRow = (\n                <tr>\n                    <td style={{textAlign: \"center\"}} colSpan=\"5\">\n                        <Translate content=\"account.no_orders\" />\n                    </td>\n                </tr>\n            );\n\n            let bids = orders\n                .filter(a => {\n                    return a.isBid();\n                })\n                .sort((a, b) => {\n                    return b.getPrice() - a.getPrice();\n                })\n                .map(order => {\n                    let price = order.getPrice();\n                    return (\n                        <OrderRow\n                            price={price}\n                            key={order.id}\n                            order={order}\n                            base={base}\n                            quote={quote}\n                            onCancel={this.props.onCancel.bind(this, order.id)}\n                        />\n                    );\n                });\n\n            let asks = orders\n                .filter(a => {\n                    return !a.isBid();\n                })\n                .sort((a, b) => {\n                    return a.getPrice() - b.getPrice();\n                })\n                .map(order => {\n                    let price = order.getPrice();\n                    return (\n                        <OrderRow\n                            price={price}\n                            key={order.id}\n                            order={order}\n                            base={base}\n                            quote={quote}\n                            onCancel={this.props.onCancel.bind(this, order.id)}\n                        />\n                    );\n                });\n\n            let rows = [];\n\n            if (asks.length) {\n                rows = rows.concat(asks);\n            }\n\n            if (bids.length) {\n                rows = rows.concat(bids);\n            }\n\n            rows.sort((a, b) => {\n                return a.props.price - b.props.price;\n            });\n\n            contentContainer = (\n                <TransitionWrapper component=\"tbody\" transitionName=\"newrow\">\n                    {rows.length ? rows : emptyRow}\n                </TransitionWrapper>\n            );\n        }\n\n        {\n            /* Open Settle Orders */\n        }\n\n        if (activeTab && activeTab == \"open_settlement\") {\n            contentContainer = (\n                <OpenSettleOrders\n                    key=\"settle_orders\"\n                    orders={settleOrders}\n                    base={base}\n                    quote={quote}\n                    baseSymbol={baseSymbol}\n                    quoteSymbol={quoteSymbol}\n                />\n            );\n        }\n\n        let hc = \"mymarkets-header clickable\";\n        let myOrdersClass = cnames(hc, {inactive: activeTab !== \"my_orders\"});\n        let openSettlementClass = cnames(hc, {\n            inactive: activeTab !== \"open_settlement\"\n        });\n        let myOrdersWidth = baseIsBitAsset || quoteIsBitAsset ? \"50%\" : \"100%\";\n        let openSettlementWidth =\n            baseIsBitAsset || quoteIsBitAsset ? \"inherit\" : \"none\";\n\n        return (\n            <div\n                style={{marginBottom: \"15px\"}}\n                key=\"open_orders\"\n                className={this.props.className}\n            >\n                <div\n                    className=\"exchange-bordered small-12\"\n                    style={{height: \"auto\", minHeight: 266}}\n                >\n                    <div className=\"grid-block shrink left-orderbook-header\">\n                        <div\n                            style={{width: myOrdersWidth}}\n                            className={myOrdersClass}\n                            onClick={this._changeTab.bind(this, \"my_orders\")}\n                        >\n                            <Translate content=\"exchange.my_orders\" />\n                        </div>\n                        <div\n                            style={{display: openSettlementWidth}}\n                            className={openSettlementClass}\n                            onClick={this._changeTab.bind(\n                                this,\n                                \"open_settlement\"\n                            )}\n                        >\n                            <Translate content=\"exchange.settle_orders\" />\n                        </div>\n                    </div>\n                    <div className=\"grid-block shrink left-orderbook-header market-right-padding-only\">\n                        <table className=\"table order-table text-right fixed-table market-right-padding\">\n                            {activeTab == \"my_orders\" ? (\n                                <TableHeader\n                                    rightAlign\n                                    type=\"sell\"\n                                    baseSymbol={baseSymbol}\n                                    quoteSymbol={quoteSymbol}\n                                />\n                            ) : (\n                                <thead>\n                                    <tr>\n                                        <th>\n                                            <Translate\n                                                className=\"header-sub-title\"\n                                                content=\"exchange.price\"\n                                            />\n                                        </th>\n                                        <th>\n                                            <span className=\"header-sub-title\">\n                                                <AssetName\n                                                    dataPlace=\"top\"\n                                                    name={quoteSymbol}\n                                                />\n                                            </span>\n                                        </th>\n                                        <th>\n                                            <span className=\"header-sub-title\">\n                                                <AssetName\n                                                    dataPlace=\"top\"\n                                                    name={baseSymbol}\n                                                />\n                                            </span>\n                                        </th>\n                                        <th>\n                                            <Translate\n                                                className=\"header-sub-title\"\n                                                content=\"explorer.block.date\"\n                                            />\n                                        </th>\n                                    </tr>\n                                </thead>\n                            )}\n                        </table>\n                    </div>\n\n                    <div\n                        className=\"table-container grid-block market-right-padding-only no-overflow\"\n                        ref=\"container\"\n                        style={{overflow: \"hidden\", maxHeight: 200}}\n                    >\n                        <table className=\"table order-table text-right fixed-table market-right-padding\">\n                            {contentContainer}\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMyOpenOrders.defaultProps = {\n    base: {},\n    quote: {},\n    orders: {},\n    quoteSymbol: \"\",\n    baseSymbol: \"\"\n};\n\nMyOpenOrders.propTypes = {\n    base: PropTypes.object.isRequired,\n    quote: PropTypes.object.isRequired,\n    orders: PropTypes.object.isRequired,\n    quoteSymbol: PropTypes.string.isRequired,\n    baseSymbol: PropTypes.string.isRequired\n};\n\nexport {OrderRow, TableHeader, MyOpenOrders};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport AssetName from \"../Utility/AssetName\";\nimport counterpart from \"counterpart\";\nimport getLocale from \"browser-locale\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\n\nclass TableHeader extends React.Component {\n    render() {\n        let {baseSymbol, quoteSymbol} = this.props;\n\n        return (\n            <thead>\n                <tr>\n                    <th style={{textAlign: \"right\"}}>\n                        <Translate content=\"exchange.price\" />\n                        <br />\n                        {baseSymbol ? (\n                            <span className=\"header-sub-title\">\n                                (<AssetName name={baseSymbol} />/<AssetName\n                                    name={quoteSymbol}\n                                />)\n                            </span>\n                        ) : null}\n                    </th>\n                    <th style={{textAlign: \"right\"}}>\n                        <Translate content=\"transfer.amount\" />\n                        <br />\n                        {quoteSymbol ? (\n                            <span className=\"header-sub-title\">\n                                (<AssetName name={quoteSymbol} />)\n                            </span>\n                        ) : null}\n                    </th>\n                    <th style={{textAlign: \"right\"}}>\n                        <Translate content=\"transaction.settlement_date\" />\n                        <br />\n                        <span\n                            style={{visibility: \"hidden\"}}\n                            className=\"header-sub-title\"\n                        >\n                            d\n                        </span>\n                    </th>\n                </tr>\n            </thead>\n        );\n    }\n}\n\nTableHeader.defaultProps = {\n    quoteSymbol: null,\n    baseSymbol: null\n};\n\nclass SettleOrderRow extends React.Component {\n    render() {\n        let {base, quote, order, showSymbols} = this.props;\n\n        let price =\n            base.get(\"id\") == \"1.3.0\"\n                ? order.getPrice() / (1 + order.offset_percent / 10000)\n                : order.getPrice() * (1 + order.offset_percent / 10000);\n        let amountSymbol = showSymbols ? \" \" + quote.get(\"symbol\") : null;\n\n        return (\n            <tr style={{paddingRight: 5}}>\n                <td style={{textAlign: \"right\", width: \"25%\"}}>\n                    {utils.format_number(price, quote.get(\"precision\"))}{\" \"}\n                    {amountSymbol}\n                </td>\n                <td style={{textAlign: \"right\", width: \"25%\"}}>\n                    {utils.format_number(\n                        order[\n                            !order.isBid() ? \"amountForSale\" : \"amountToReceive\"\n                        ]().getAmount({real: true}),\n                        quote.get(\"precision\")\n                    )}\n                </td>\n                <td style={{textAlign: \"right\", width: \"25%\"}}>\n                    {utils.format_number(\n                        order[\n                            !order.isBid() ? \"amountToReceive\" : \"amountForSale\"\n                        ]().getAmount({real: true}),\n                        base.get(\"precision\")\n                    )}\n                </td>\n                <td\n                    style={{textAlign: \"right\", width: \"25%\"}}\n                    className=\"tooltip\"\n                    data-tip={new Date(order.settlement_date)}\n                >\n                    {counterpart.localize(new Date(order.settlement_date), {\n                        type: \"date\",\n                        format:\n                            getLocale()\n                                .toLowerCase()\n                                .indexOf(\"en-us\") !== -1\n                                ? \"market_history_us\"\n                                : \"market_history\"\n                    })}\n                </td>\n            </tr>\n        );\n    }\n}\n\nSettleOrderRow.defaultProps = {\n    showSymbols: false,\n    invert: false\n};\n\nclass OpenSettleOrders extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.currentAccount !== this.props.currentAccount ||\n            nextProps.orders !== this.props.orders\n        );\n    }\n\n    render() {\n        let {orders, base, quote} = this.props;\n\n        let activeOrders = null;\n\n        if (orders.size > 0 && base && quote) {\n            let index = 0;\n\n            activeOrders = orders\n                .sort((a, b) => {\n                    return a.isBefore(b) ? -1 : 1;\n                })\n                .map(order => {\n                    return Date.now() < order.settlement_date ? (\n                        <SettleOrderRow\n                            key={index++}\n                            order={order}\n                            base={base}\n                            quote={quote}\n                        />\n                    ) : null;\n                })\n                .toArray();\n        } else {\n            return null;\n        }\n\n        return (\n            <TransitionWrapper component=\"tbody\" transitionName=\"newrow\">\n                {activeOrders}\n            </TransitionWrapper>\n        );\n    }\n}\n\nOpenSettleOrders.defaultProps = {\n    base: {},\n    quote: {},\n    orders: {},\n    quoteSymbol: \"\",\n    baseSymbol: \"\"\n};\n\nOpenSettleOrders.propTypes = {\n    base: PropTypes.object.isRequired,\n    quote: PropTypes.object.isRequired,\n    orders: PropTypes.object.isRequired,\n    quoteSymbol: PropTypes.string.isRequired,\n    baseSymbol: PropTypes.string.isRequired\n};\n\nexport default OpenSettleOrders;\n","import React from \"react\";\nimport utils from \"common/utils\";\n\nclass PriceText extends React.Component {\n    render() {\n        let {price, preFormattedPrice, quote, base} = this.props;\n        if (!price && !preFormattedPrice) return null;\n        let formattedPrice = !!preFormattedPrice\n            ? preFormattedPrice\n            : utils.price_to_text(price, quote, base);\n\n        if (formattedPrice.full >= 1) {\n            return (\n                <span>\n                    <span className=\"price-integer\">{formattedPrice.int}.</span>\n                    {formattedPrice.dec ? (\n                        <span className=\"price-integer\">\n                            {formattedPrice.dec}\n                        </span>\n                    ) : null}\n                    {formattedPrice.trailing ? (\n                        <span className=\"price-decimal\">\n                            {formattedPrice.trailing}\n                        </span>\n                    ) : null}\n                </span>\n            );\n        } else if (formattedPrice.full >= 0.1) {\n            return (\n                <span>\n                    <span className=\"price-decimal\">{formattedPrice.int}.</span>\n                    {formattedPrice.dec ? (\n                        <span className=\"price-integer\">\n                            {formattedPrice.dec}\n                        </span>\n                    ) : null}\n                    {formattedPrice.trailing ? (\n                        <span className=\"price-decimal\">\n                            {formattedPrice.trailing}\n                        </span>\n                    ) : null}\n                </span>\n            );\n        } else {\n            return (\n                <span>\n                    <span className=\"price-decimal\">{formattedPrice.int}.</span>\n                    {formattedPrice.dec ? (\n                        <span className=\"price-decimal\">\n                            {formattedPrice.dec}\n                        </span>\n                    ) : null}\n                    {formattedPrice.trailing ? (\n                        <span className=\"price-integer\">\n                            {formattedPrice.trailing}\n                        </span>\n                    ) : null}\n                </span>\n            );\n        }\n    }\n}\n\nexport default PriceText;\n","import React from \"react\";\nimport AssetWrapper from \"../Utility/AssetWrapper\";\nimport cnames from \"classnames\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport {connect} from \"alt-react\";\nimport utils from \"common/utils\";\nimport FormattedPrice from \"./FormattedPrice\";\nimport marketUtils from \"common/market_utils\";\n\nclass MarketStats extends React.Component {\n    constructor(props) {\n        super();\n\n        this.statsInterval = null;\n        const {marketName} = marketUtils.getMarketName(props.base, props.quote);\n        this.state = {\n            marketName\n        };\n    }\n\n    _checkStats(newStats = {close: {}}, oldStats = {close: {}}) {\n        return (\n            newStats.volumeBase !== oldStats.volumeBase ||\n            !utils.are_equal_shallow(\n                newStats.close && newStats.close.base,\n                oldStats.close && oldStats.close.base\n            ) ||\n            !utils.are_equal_shallow(\n                newStats.close && newStats.close.quote,\n                oldStats.close && oldStats.close.quote\n            )\n        );\n    }\n\n    shouldComponentUpdate(np) {\n        return (\n            this._checkStats(\n                np.allMarketStats.get(this.state.marketName),\n                this.props.allMarketStats.get(this.state.marketName)\n            ) ||\n            np.base.get(\"id\") !== this.props.base.get(\"id\") ||\n            np.quote.get(\"id\") !== this.props.quote.get(\"id\")\n        );\n    }\n\n    componentWillUnmount() {\n        if (this.statsInterval) this.statsInterval();\n    }\n}\n\nclass MarketPriceInner extends MarketStats {\n    constructor(props) {\n        super(props);\n    }\n\n    shouldComponentUpdate(np) {\n        return super.shouldComponentUpdate(np);\n    }\n\n    render() {\n        let {allMarketStats} = this.props;\n        const {marketName} = this.state;\n        const marketStats = allMarketStats.get(marketName);\n        let price = marketStats && marketStats.price ? marketStats.price : null;\n        // if (!price && marketStatsInverted && marketStatsInverted.price) {\n        //     price = marketStatsInverted.price.invert();\n        // }\n\n        return (\n            <span className={cnames(\"\", this.props.className)}>\n                {price ? (\n                    <FormattedPrice\n                        base_amount={price.base.amount}\n                        base_asset={price.base.asset_id}\n                        quote_amount={price.quote.amount}\n                        quote_asset={price.quote.asset_id}\n                        force_direction={this.props.force_direction}\n                        hide_symbols={this.props.hide_symbols}\n                    />\n                ) : (\n                    \"n/a\"\n                )}\n            </span>\n        );\n    }\n}\n\nMarketPriceInner = AssetWrapper(MarketPriceInner, {\n    propNames: [\"quote\", \"base\"]\n});\n\nclass MarketPrice extends React.Component {\n    render() {\n        return <MarketPriceInner {...this.props} />;\n    }\n}\n\nMarketPrice = connect(\n    MarketPrice,\n    {\n        listenTo() {\n            return [MarketsStore];\n        },\n        getProps() {\n            return {\n                allMarketStats: MarketsStore.getState().allMarketStats\n            };\n        }\n    }\n);\n\nexport {MarketPrice, MarketStats};\n","import React from \"react\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport BaseModal from \"../Modal/BaseModal\";\nimport Translate from \"react-translate-component\";\nimport {Asset} from \"common/MarketClasses\";\nimport utils from \"common/utils\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport AccountActions from \"actions/AccountActions\";\nimport ReactTooltip from \"react-tooltip\";\nimport counterpart from \"counterpart\";\nimport {\n    requestDepositAddress,\n    validateAddress,\n    WithdrawAddresses,\n    getDepositAddress\n} from \"common/gatewayMethods\";\nimport CopyButton from \"../Utility/CopyButton\";\nimport Icon from \"../Icon/Icon\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport AssetName from \"../Utility/AssetName\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {debounce} from \"lodash-es\";\nimport {DecimalChecker} from \"../Exchange/ExchangeInput\";\nimport {openledgerAPIs} from \"api/apiConfig\";\nimport {getWalletName} from \"branding\";\n\n// import DepositFiatOpenLedger from \"components/DepositWithdraw/openledger/DepositFiatOpenLedger\";\n// import WithdrawFiatOpenLedger from \"components/DepositWithdraw/openledger/WithdrawFiatOpenLedger\";\n\nclass DepositWithdrawContent extends DecimalChecker {\n    static propTypes = {\n        sender: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        coreAsset: ChainTypes.ChainAsset.isRequired,\n        globalObject: ChainTypes.ChainAsset.isRequired\n    };\n\n    static defaultProps = {\n        coreAsset: \"1.3.0\",\n        globalObject: \"2.0.0\"\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            toAddress: WithdrawAddresses.getLast(props.walletType),\n            withdrawValue: \"\",\n            amountError: null,\n            symbol: props.asset.get(\"symbol\"),\n            to_withdraw: new Asset({\n                asset_id: props.asset.get(\"id\"),\n                precision: props.asset.get(\"precision\")\n            }),\n            fee_asset_id: \"1.3.0\",\n            feeStatus: {},\n            loading: false,\n            emptyAddressDeposit: false\n        };\n\n        this._validateAddress(this.state.toAddress, props);\n\n        this.addDepositAddress = this.addDepositAddress.bind(this);\n        this._checkFeeStatus = this._checkFeeStatus.bind(this);\n        this._checkBalance = this._checkBalance.bind(this);\n        this._getCurrentBalance = this._getCurrentBalance.bind(this);\n        this._getFee = this._getFee.bind(this);\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n    }\n\n    componentWillMount() {\n        this._getDepositAddress();\n\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.asset &&\n            this.props.asset &&\n            np.asset.get(\"id\") !== this.props.asset.get(\"id\")\n        ) {\n            this.setState(\n                {\n                    to_withdraw: new Asset({\n                        asset_id: np.asset.get(\"id\"),\n                        precision: np.asset.get(\"precision\")\n                    }),\n                    gateFee: np.asset.get(\"gateFee\"),\n                    intermediateAccount: np.asset.get(\"intermediateAccount\"),\n                    symbol: np.asset.get(\"symbol\"),\n                    memo: \"\",\n                    withdrawValue: \"\",\n                    receive_address: null,\n                    toAddress: WithdrawAddresses.getLast(np.walletType)\n                },\n                this._getDepositAddress\n            );\n        }\n    }\n\n    _getDepositAddress() {\n        if (!this.props.backingCoinType) return;\n\n        let receive_address = getDepositAddress({\n            coin: `open.${this.props.backingCoinType.toLowerCase()}`,\n            account: this.props.account,\n            stateCallback: this.addDepositAddress\n        });\n\n        if (!receive_address) {\n            requestDepositAddress(this._getDepositObject());\n        } else {\n            this.setState({\n                receive_address\n            });\n        }\n    }\n\n    _getDepositObject() {\n        return {\n            inputCoinType: this.props.backingCoinType.toLowerCase(),\n            outputCoinType: this.props.symbol.toLowerCase(),\n            outputAddress: this.props.sender.get(\"name\"),\n            stateCallback: this.addDepositAddress\n        };\n    }\n\n    requestDepositAddressLoad() {\n        this.setState({\n            loading: true,\n            emptyAddressDeposit: false\n        });\n        requestDepositAddress(this._getDepositObject());\n    }\n\n    addDepositAddress(receive_address) {\n        if (receive_address.error) {\n            receive_address.error.message === \"no_address\"\n                ? this.setState({emptyAddressDeposit: true})\n                : this.setState({emptyAddressDeposit: false});\n        }\n\n        this.setState({\n            receive_address,\n            loading: false\n        });\n    }\n\n    componentDidUpdate() {\n        ReactTooltip.rebuild();\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        if (this.state.to_withdraw.getAmount() === 0) {\n            return this.setState({\n                amountError: \"transfer.errors.pos\"\n            });\n        }\n\n        if (!this.props.intermediateAccount) return;\n\n        const fee = this._getFee();\n        const gateFee = this._getGateFee();\n\n        let sendAmount = this.state.to_withdraw.clone();\n\n        let balanceAmount = sendAmount.clone(\n            this._getCurrentBalance().get(\"balance\")\n        );\n\n        sendAmount.plus(gateFee);\n\n        /* Insufficient balance */\n        if (balanceAmount.lt(sendAmount)) {\n            // Send the originally entered amount\n            sendAmount = this.state.to_withdraw.clone();\n        }\n\n        AccountActions.transfer(\n            this.props.sender.get(\"id\"),\n            this.props.intermediateAccount,\n            this.state.to_withdraw.getAmount(),\n            this.state.to_withdraw.asset_id,\n            this.props.backingCoinType.toLowerCase() +\n                \":\" +\n                this.state.toAddress +\n                (this.state.memo\n                    ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                    : \"\"),\n            null,\n            fee.asset_id\n        );\n    }\n\n    _updateAmount() {\n        const feeAmount = this._getFee();\n        const currentBalance = this._getCurrentBalance();\n\n        let total = new Asset({\n            amount: currentBalance ? currentBalance.get(\"balance\") : 0,\n            asset_id: this.props.asset.get(\"id\"),\n            precision: this.props.asset.get(\"precision\")\n        });\n\n        // Subtract the fee if it is using the same asset\n        if (total.asset_id === feeAmount.asset_id) {\n            total.minus(feeAmount);\n        }\n\n        this.state.to_withdraw.setAmount({sats: total.getAmount()});\n        this.setState(\n            {\n                withdrawValue: total.getAmount({real: true}),\n                amountError: null\n            },\n            this._checkBalance\n        );\n    }\n\n    _checkFeeStatus(account = this.props.sender) {\n        if (!account) return;\n\n        const assets = [\"1.3.0\", this.state.to_withdraw.asset_id];\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content:\n                            this.props.backingCoinType.toLowerCase() +\n                            \":\" +\n                            this.state.toAddress +\n                            (this.state.memo ? \":\" + this.state.memo : \"\")\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(this.state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    _updateFee(fee_asset_id = this.state.fee_asset_id) {\n        if (!this.props.sender) return null;\n        checkFeeStatusAsync({\n            accountID: this.props.sender.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content:\n                    this.props.backingCoinType.toLowerCase() +\n                    \":\" +\n                    this.state.toAddress +\n                    (this.state.memo ? \":\" + this.state.memo : \"\")\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) => {\n            this.setState(\n                {\n                    feeAmount: fee,\n                    hasBalance,\n                    hasPoolBalance,\n                    error: !hasBalance || !hasPoolBalance\n                },\n                this._checkFeeStatus\n            );\n        });\n    }\n\n    _getCurrentBalance() {\n        return this.props.balances.find(b => {\n            return b && b.get(\"asset_type\") === this.props.asset.get(\"id\");\n        });\n    }\n\n    _checkBalance() {\n        const {feeAmount, to_withdraw} = this.state;\n        const {asset} = this.props;\n        const balance = this._getCurrentBalance();\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            to_withdraw.getAmount({real: true}),\n            asset,\n            this._getFee(),\n            balance,\n            this._getGateFee()\n        );\n        if (hasBalance === null) return;\n        if (this.state.balanceError !== !hasBalance)\n            this.setState({balanceError: !hasBalance});\n\n        return hasBalance;\n    }\n\n    _getFee() {\n        const defaultFee = {\n            getAmount: function() {\n                return 0;\n            },\n            asset_id: this.state.fee_asset_id\n        };\n\n        if (!this.state.feeStatus || !this.state.feeAmount) return defaultFee;\n\n        const coreStatus = this.state.feeStatus[\"1.3.0\"];\n        const withdrawAssetStatus = this.state.feeStatus[\n            this.state.to_withdraw.asset_id\n        ];\n        // Use core asset to pay the fees if present and balance is sufficient since it's cheapest\n        if (coreStatus && coreStatus.hasBalance) return coreStatus.fee;\n        // Use same asset as withdraw if not\n        if (\n            coreStatus &&\n            !coreStatus.hasBalance &&\n            withdrawAssetStatus &&\n            withdrawAssetStatus.hasBalance\n        ) {\n            return withdrawAssetStatus.fee;\n        }\n        return coreStatus ? coreStatus.fee : defaultFee;\n    }\n\n    _onInputAmount(e) {\n        try {\n            this.state.to_withdraw.setAmount({\n                real: parseFloat(e.target.value || 0)\n            });\n            this.setState(\n                {\n                    withdrawValue: e.target.value,\n                    amountError: null\n                },\n                this._checkBalance\n            );\n        } catch (err) {\n            console.error(\"err:\", err);\n        }\n    }\n\n    _onInputTo(e) {\n        let toAddress = e.target.value.trim();\n\n        this.setState({\n            withdraw_address_check_in_progress: true,\n            withdraw_address_selected: toAddress,\n            validAddress: null,\n            toAddress: toAddress\n        });\n\n        this._validateAddress(toAddress);\n    }\n\n    _onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    _validateAddress(address, props = this.props) {\n        validateAddress({\n            url: openledgerAPIs.BASE,\n            walletType: props.walletType,\n            newAddress: address\n        })\n            .then(isValid => {\n                if (this.state.toAddress === address) {\n                    this.setState({\n                        withdraw_address_check_in_progress: false,\n                        validAddress: !!isValid\n                    });\n                }\n            })\n            .catch(err => {\n                console.error(\"Error when validating address:\", err);\n            });\n    }\n\n    _openRegistrarSite(e) {\n        e.preventDefault();\n        let newWnd = window.open(SettingsStore.site_registr, \"_blank\");\n        newWnd.opener = null;\n    }\n\n    _getGateFee() {\n        const {gateFee, asset} = this.props;\n        return new Asset({\n            real: parseFloat(gateFee ? gateFee.replace(\",\", \"\") : 0),\n            asset_id: asset.get(\"id\"),\n            precision: asset.get(\"precision\")\n        });\n    }\n\n    _renderWithdraw() {\n        const {amountError} = this.state;\n        const {name: assetName} = utils.replaceName(this.props.asset);\n        let tabIndex = 1;\n        const {supportsMemos} = this.props;\n\n        // if(this.props.fiatModal){\n        //     if(~this.props.fiatModal.indexOf('canFiatWith')){\n        //         return (<WithdrawFiatOpenLedger\n        //             account={this.props.account}\n        //             issuer_account=\"openledger-fiat\"\n        //             deposit_asset={this.props.asset.get(\"symbol\").split('OPEN.').join('')}\n        //             receive_asset={this.props.asset.get(\"symbol\")}\n        //             rpc_url={SettingsStore.rpc_url}\n        //         />);\n        //     }else{\n        //         return (<p>Click <a href='#' onClick={this._openRegistrarSite} >here</a> to register for deposits </p>);\n        //     }\n        // }\n\n        const currentFee = this._getFee();\n        const gateFee = this._getGateFee();\n        const feeStatus = this.state.feeStatus[currentFee.asset_id];\n        const feeAsset = ChainStore.getAsset(currentFee.asset_id);\n\n        const disableSubmit =\n            (feeStatus && !feeStatus.hasBalance) ||\n            this.state.balanceError ||\n            !this.state.toAddress ||\n            !this.state.withdrawValue;\n\n        return (\n            <div>\n                <p>\n                    <Translate\n                        content=\"gateway.withdraw_funds\"\n                        asset={assetName}\n                        wallet_name={getWalletName()}\n                    />\n                </p>\n\n                {this._renderCurrentBalance()}\n\n                <div className=\"SimpleTrade__withdraw-row\">\n                    <label className=\"left-label\">\n                        {counterpart.translate(\"modal.withdraw.amount\")}\n                    </label>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            tabIndex={tabIndex++}\n                            type=\"number\"\n                            min=\"0\"\n                            onKeyPress={this.onKeyPress.bind(this)}\n                            value={this.state.withdrawValue}\n                            onChange={this._onInputAmount.bind(this)}\n                        />\n                        <div className=\"form-label select floating-dropdown\">\n                            <div className=\"dropdown-wrapper inactive\">\n                                <div>{assetName}</div>\n                            </div>\n                        </div>\n                    </div>\n                    {amountError ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content={amountError} />\n                        </p>\n                    ) : null}\n                    {this.state.balanceError ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content=\"transfer.errors.insufficient\" />\n                        </p>\n                    ) : null}\n                </div>\n\n                <div className=\"SimpleTrade__withdraw-row\">\n                    <label className=\"left-label\">\n                        {counterpart.translate(\"transfer.fee\")}\n                    </label>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            type=\"text\"\n                            disabled\n                            value={currentFee.getAmount({real: true})}\n                        />\n\n                        <div className=\"form-label select floating-dropdown\">\n                            <div className=\"dropdown-wrapper inactive\">\n                                <div>\n                                    {feeAsset ? (\n                                        <AssetName\n                                            name={feeAsset.get(\"symbol\")}\n                                        />\n                                    ) : null}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {feeStatus && !feeStatus.hasBalance ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content=\"transfer.errors.insufficient\" />\n                        </p>\n                    ) : null}\n                </div>\n\n                <div className=\"SimpleTrade__withdraw-row\">\n                    <label className=\"left-label\">\n                        {counterpart.translate(\"gateway.fee\")}\n                    </label>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            type=\"text\"\n                            disabled\n                            value={gateFee.getAmount({real: true})}\n                        />\n\n                        <div className=\"form-label select floating-dropdown\">\n                            <div className=\"dropdown-wrapper inactive\">\n                                <div>\n                                    <AssetName\n                                        name={this.props.asset.get(\"symbol\")}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {feeStatus && !feeStatus.hasBalance ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content=\"transfer.errors.insufficient\" />\n                        </p>\n                    ) : null}\n                </div>\n\n                <div className=\"SimpleTrade__withdraw-row\">\n                    <label className=\"left-label\">\n                        {counterpart.translate(\"modal.withdraw.address\")}\n                    </label>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            placeholder={counterpart.translate(\n                                \"gateway.withdraw_placeholder\",\n                                {asset: assetName}\n                            )}\n                            tabIndex={tabIndex++}\n                            type=\"text\"\n                            value={this.state.toAddress}\n                            onChange={this._onInputTo.bind(this)}\n                        />\n\n                        <div className=\"form-label select floating-dropdown\">\n                            <div className=\"dropdown-wrapper inactive\">\n                                <div\n                                    data-place=\"right\"\n                                    data-tip={counterpart.translate(\n                                        \"tooltip.withdraw_address\",\n                                        {asset: assetName}\n                                    )}\n                                >\n                                    ?\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {!this.state.validAddress && this.state.toAddress ? (\n                        <div className=\"has-error\" style={{paddingTop: 10}}>\n                            <Translate\n                                content=\"gateway.valid_address\"\n                                coin_type={assetName}\n                            />\n                        </div>\n                    ) : null}\n                </div>\n\n                {supportsMemos ? (\n                    <div className=\"SimpleTrade__withdraw-row\">\n                        <label className=\"left-label\">\n                            {counterpart.translate(\"transfer.memo\")}\n                        </label>\n                        <div className=\"inline-label input-wrapper\">\n                            <textarea\n                                rows=\"3\"\n                                value={this.state.memo}\n                                tabIndex={tabIndex++}\n                                onChange={this._onMemoChanged.bind(this)}\n                            />\n                        </div>\n                        {!this.state.validAddress && this.state.toAddress ? (\n                            <div className=\"has-error\" style={{paddingTop: 10}}>\n                                <Translate\n                                    content=\"gateway.valid_address\"\n                                    coin_type={assetName}\n                                />\n                            </div>\n                        ) : null}\n                    </div>\n                ) : null}\n\n                <div className=\"button-group SimpleTrade__withdraw-row\">\n                    <button\n                        tabIndex={tabIndex++}\n                        className={\n                            \"button\" + (disableSubmit ? \" disabled\" : \"\")\n                        }\n                        onClick={this.onSubmit.bind(this)}\n                        type=\"submit\"\n                    >\n                        <Translate content=\"gateway.withdraw_now\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    _renderDeposit() {\n        const {receive_address, loading, emptyAddressDeposit} = this.state;\n        const {name: assetName} = utils.replaceName(this.props.asset);\n        const hasMemo =\n            receive_address &&\n            \"memo\" in receive_address &&\n            receive_address.memo;\n        const addressValue = (receive_address && receive_address.address) || \"\";\n        let tabIndex = 1;\n\n        // if(this.props.fiatModal){\n        //     if(~this.props.fiatModal.indexOf('canFiatDep')){\n        //         return (<DepositFiatOpenLedger\n        //             account={this.props.account}\n        //             issuer_account=\"openledger-fiat\"\n        //             deposit_asset={this.props.asset.get(\"symbol\").split('OPEN.').join('')}\n        //             receive_asset={this.props.asset.get(\"symbol\")}\n        //             rpc_url={SettingsStore.rpc_url}\n        //         />);\n        //     }else{\n        //         return (<p>Click <a href='#' onClick={this._openRegistrarSite} >here</a> to register for deposits </p>);\n        //     }\n        // }\n        return (\n            <div className={!addressValue ? \"no-overflow\" : \"\"}>\n                <p>\n                    <Translate\n                        unsafe\n                        content=\"gateway.add_funds\"\n                        account={this.props.sender.get(\"name\")}\n                        wallet_name={getWalletName()}\n                    />\n                </p>\n\n                {this._renderCurrentBalance()}\n\n                <div className=\"SimpleTrade__withdraw-row\">\n                    <p\n                        style={{marginBottom: 10}}\n                        data-place=\"right\"\n                        data-tip={counterpart.translate(\"tooltip.deposit_tip\", {\n                            asset: assetName\n                        })}\n                    >\n                        <Translate\n                            className=\"help-tooltip\"\n                            content=\"gateway.deposit_to\"\n                            asset={assetName}\n                        />:\n                        <label className=\"fz_12 left-label\">\n                            <Translate content=\"gateway.deposit_notice_delay\" />\n                        </label>\n                    </p>\n                    {!addressValue ? (\n                        <LoadingIndicator type=\"three-bounce\" />\n                    ) : (\n                        <label>\n                            {emptyAddressDeposit ? (\n                                <Translate content=\"gateway.please_generate_address\" />\n                            ) : (\n                                <span className=\"inline-label\">\n                                    <input\n                                        readOnly\n                                        type=\"text\"\n                                        value={addressValue}\n                                    />\n                                    <CopyButton text={addressValue} />{\" \"}\n                                </span>\n                            )}\n                        </label>\n                    )}\n                    {hasMemo ? (\n                        <label>\n                            <span className=\"inline-label\">\n                                <input\n                                    readOnly\n                                    type=\"text\"\n                                    value={\n                                        counterpart.translate(\"transfer.memo\") +\n                                        \": \" +\n                                        receive_address.memo\n                                    }\n                                />\n\n                                <CopyButton text={receive_address.memo} />\n                            </span>\n                        </label>\n                    ) : null}\n\n                    {receive_address && receive_address.error ? (\n                        <div className=\"has-error\" style={{paddingTop: 10}}>\n                            {receive_address.error.message}\n                        </div>\n                    ) : null}\n                </div>\n\n                <div className=\"button-group SimpleTrade__withdraw-row\">\n                    <button\n                        tabIndex={tabIndex++}\n                        className=\"button spinner-button-circle\"\n                        onClick={this.requestDepositAddressLoad.bind(this)}\n                        type=\"submit\"\n                    >\n                        {loading ? <LoadingIndicator type=\"circle\" /> : null}\n                        <Translate content=\"gateway.generate_new\" />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    _renderCurrentBalance() {\n        const {name: assetName} = utils.replaceName(this.props.asset);\n        const isDeposit = this.props.action === \"deposit\";\n\n        let currentBalance = this._getCurrentBalance();\n\n        let asset = currentBalance\n            ? new Asset({\n                  asset_id: currentBalance.get(\"asset_type\"),\n                  precision: this.props.asset.get(\"precision\"),\n                  amount: currentBalance.get(\"balance\")\n              })\n            : null;\n\n        // TEMP //\n        // asset = new Asset({\n        //     asset_id: this.props.asset.get(\"id\"),\n        //     precision: this.props.asset.get(\"precision\"),\n        //     amount: 65654645\n        // });\n\n        const applyBalanceButton = isDeposit ? (\n            <span\n                style={{border: \"2px solid black\", borderLeft: \"none\"}}\n                className=\"form-label\"\n            >\n                {assetName}\n            </span>\n        ) : (\n            <button\n                data-place=\"right\"\n                data-tip={counterpart.translate(\"tooltip.withdraw_full\")}\n                className=\"button\"\n                style={{border: \"2px solid black\", borderLeft: \"none\"}}\n                onClick={this._updateAmount.bind(\n                    this,\n                    !currentBalance\n                        ? 0\n                        : parseInt(currentBalance.get(\"balance\"), 10)\n                )}\n            >\n                <Icon name=\"clippy\" title=\"icons.clippy.withdraw_full\" />\n            </button>\n        );\n\n        return (\n            <div\n                className=\"SimpleTrade__withdraw-row\"\n                style={{fontSize: \"1rem\"}}\n            >\n                <label style={{fontSize: \"1rem\"}}>\n                    {counterpart.translate(\"gateway.balance_asset\", {\n                        asset: assetName\n                    })}:\n                    <span className=\"inline-label\">\n                        <input\n                            disabled\n                            style={{\n                                color: \"black\",\n                                border: \"2px solid black\",\n                                padding: 10,\n                                width: \"100%\"\n                            }}\n                            value={!asset ? 0 : asset.getAmount({real: true})}\n                        />\n                        {applyBalanceButton}\n                    </span>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        let {asset, action} = this.props;\n        let isDeposit = action === \"deposit\";\n\n        if (!asset) {\n            return null;\n        }\n\n        const {name: assetName} = utils.replaceName(asset);\n\n        let content = this.props.isDown ? (\n            <div>\n                <Translate\n                    className=\"txtlabel cancel\"\n                    content=\"gateway.unavailable_OPEN\"\n                    component=\"p\"\n                />\n            </div>\n        ) : !this.props.isAvailable ? (\n            <div>\n                <Translate\n                    className=\"txtlabel cancel\"\n                    content=\"gateway.unavailable\"\n                    component=\"p\"\n                />\n            </div>\n        ) : isDeposit ? (\n            this._renderDeposit()\n        ) : (\n            this._renderWithdraw()\n        );\n\n        return (\n            <div className=\"SimpleTrade__modal\">\n                <div className=\"Modal__header\">\n                    <h3>\n                        <Translate\n                            content={\n                                isDeposit\n                                    ? \"gateway.deposit\"\n                                    : \"modal.withdraw.submit\"\n                            }\n                        />{\" \"}\n                        {assetName}\n                    </h3>\n                </div>\n                <div className=\"Modal__divider\" />\n\n                <div\n                    className=\"grid-block vertical no-overflow\"\n                    style={{\n                        zIndex: 1002,\n                        paddingLeft: \"2rem\",\n                        paddingRight: \"2rem\",\n                        paddingTop: \"1rem\"\n                    }}\n                >\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\nDepositWithdrawContent = BindToChainState(DepositWithdrawContent);\n\nexport default class SimpleDepositWithdrawModal extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {open: false};\n    }\n\n    show() {\n        this.setState({open: true}, () => {\n            ZfApi.publish(this.props.modalId, \"open\");\n        });\n    }\n\n    onClose() {\n        this.setState({open: false});\n    }\n\n    render() {\n        return !this.state.open ? null : (\n            <BaseModal\n                className=\"test\"\n                onClose={this.onClose.bind(this)}\n                overlay={true}\n                id={this.props.modalId}\n            >\n                {this.state.open ? (\n                    <DepositWithdrawContent\n                        {...this.props}\n                        open={this.state.open}\n                    />\n                ) : null}\n            </BaseModal>\n        );\n    }\n}\n","import React from \"react\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport BaseModal from \"../Modal/BaseModal\";\nimport Translate from \"react-translate-component\";\nimport {Asset} from \"common/MarketClasses\";\nimport utils from \"common/utils\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport ReactTooltip from \"react-tooltip\";\nimport counterpart from \"counterpart\";\nimport {\n    requestDepositAddress,\n    validateAddress,\n    WithdrawAddresses,\n    getDepositLimit,\n    estimateOutput,\n    estimateInput\n} from \"common/gatewayMethods\";\nimport BlockTradesDepositAddressCache from \"common/BlockTradesDepositAddressCache\";\nimport CopyButton from \"../Utility/CopyButton\";\nimport Icon from \"../Icon/Icon\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport {blockTradesAPIs} from \"api/apiConfig\";\nimport FloatingDropdown from \"../Utility/FloatingDropdown\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport QRCode from \"qrcode.react\";\n\n// import DepositFiatOpenLedger from \"components/DepositWithdraw/openledger/DepositFiatOpenLedger\";\n// import WithdrawFiatOpenLedger from \"components/DepositWithdraw/openledger/WithdrawFiatOpenLedger\";\n\nclass SimpleDepositBlocktradesBridge extends React.Component {\n    static propTypes = {\n        sender: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            toAddress: WithdrawAddresses.getLast(props.walletType),\n            withdrawValue: \"\",\n            amountError: null,\n            inputAmount: 0,\n            receiveLoading: false,\n            limitLoading: true,\n            apiError: false\n        };\n\n        this._validateAddress(this.state.toAddress, props);\n\n        this.deposit_address_cache = new BlockTradesDepositAddressCache();\n    }\n\n    onClose() {\n        ZfApi.publish(this.props.modalId, \"close\");\n    }\n\n    componentWillMount() {\n        this._getDepositAddress();\n    }\n\n    componentDidMount() {\n        this._getDepositLimit();\n        this._estimateOutput();\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.inputCoinType !== this.props.inputCoinType ||\n            np.outputCoinType !== this.props.outputCoinType\n        ) {\n            this._getDepositLimit(np);\n            this._estimateOutput(np);\n            this._getDepositAddress(np);\n        }\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            np.inputCoinType !== this.props.inputCoinType ||\n            np.outputCoinType !== this.props.outputCoinType ||\n            np.sender !== this.props.sender ||\n            np.asset !== this.props.asset ||\n            np.isAvailable !== this.props.isAvailable ||\n            np.isDown !== this.props.isDown ||\n            !utils.are_equal_shallow(ns, this.state)\n        );\n    }\n\n    _getDepositLimit(props = this.props) {\n        this.setState({limitLoading: true});\n        getDepositLimit(props.inputCoinType, props.outputCoinType)\n            .then(res => {\n                this.setState({\n                    depositLimit: res.depositLimit,\n                    limitLoading: false\n                });\n            })\n            .catch(err => {\n                console.log(\"deposit limit error:\", err);\n                this.setState({\n                    depositLimit: null,\n                    limitLoading: false\n                });\n            });\n    }\n\n    _onAmountChange(value, e) {\n        const regexp_numeral = new RegExp(/[[:digit:]]/);\n        const target = e.target;\n\n        // Ensure input is valid\n        if (!regexp_numeral.test(target.value)) {\n            target.value = target.value.replace(/[^0-9.]/g, \"\");\n        }\n\n        // Catch initial decimal input\n        if (target.value.charAt(0) == \".\") {\n            target.value = \"0.\";\n        }\n\n        // Catch double decimal and remove if invalid\n        if (\n            target.value.charAt(target.value.length) != target.value.search(\".\")\n        ) {\n            target.value.substr(1);\n        }\n\n        target.value = utils.limitByPrecision(target.value, 8);\n\n        switch (value) {\n            case \"input\":\n                this.setState(\n                    {inputAmount: target.value},\n                    this._estimateOutput.bind(this)\n                );\n                break;\n\n            case \"output\":\n                this.setState(\n                    {outputAmount: target.value},\n                    this._estimateInput.bind(this)\n                );\n                break;\n        }\n    }\n\n    _estimateOutput(props = this.props) {\n        this.setState({receiveAmount: 0, sendAmount: this.state.inputAmount});\n        if (!this.state.inputAmount) {\n            return;\n        }\n\n        this.setState({receiveLoading: true});\n        estimateOutput(\n            this.state.inputAmount,\n            props.inputCoinType,\n            props.outputCoinType\n        )\n            .then(res => {\n                this.setState({\n                    inputAmount: res.inputAmount,\n                    receiveAmount: res.outputAmount,\n                    receiveLoading: false\n                });\n            })\n            .catch(err => {\n                console.log(\"receive amount err:\", err);\n                this.setState({receiveLoading: false, apiError: true});\n            });\n    }\n\n    _estimateInput(props = this.props) {\n        this.setState({receiveAmount: this.state.outputAmount, sendAmount: 0});\n        if (!this.state.outputAmount) {\n            return;\n        }\n\n        this.setState({receiveLoading: true});\n        estimateInput(\n            this.state.outputAmount,\n            props.inputCoinType,\n            props.outputCoinType\n        )\n            .then(res => {\n                this.setState({\n                    inputAmount: res.inputAmount,\n                    sendAmount: utils.limitByPrecision(res.inputAmount, 8),\n                    receiveLoading: false\n                });\n            })\n            .catch(err => {\n                console.log(\"send amount err:\", err);\n                this.setState({receiveLoading: false, apiError: true});\n            });\n    }\n\n    _getDepositAddress(props = this.props) {\n        if (!props.inputCoinType) return;\n        let receive_address;\n\n        /* Always generate new address/memo for increased security */\n        /*let account_name = props.sender.get(\"name\");\n        let receive_address = this.deposit_address_cache.getCachedInputAddress(\n            \"blocktrades\",\n            account_name,\n            props.inputCoinType.toLowerCase(),\n            props.outputCoinType.toLowerCase()\n        );*/\n        if (!receive_address) {\n            this.setState({receive_address: null});\n            requestDepositAddress(this._getDepositObject(props));\n        } else {\n            this.setState({\n                receive_address\n            });\n        }\n    }\n\n    _getDepositObject(props = this.props) {\n        return {\n            inputCoinType: props.inputCoinType.toLowerCase(),\n            outputCoinType: props.outputCoinType.toLowerCase(),\n            outputAddress: props.sender.get(\"name\"),\n            url: blockTradesAPIs.BASE,\n            stateCallback: receive_address => {\n                this.addDepositAddress(\n                    props.inputCoinType.toLowerCase(),\n                    props.outputCoinType.toLowerCase(),\n                    props.sender.get(\"name\"),\n                    receive_address\n                );\n            }\n        };\n    }\n\n    addDepositAddress(\n        input_coin_type,\n        output_coin_type,\n        account,\n        receive_address\n    ) {\n        this.deposit_address_cache.cacheInputAddress(\n            \"blocktrades\",\n            account,\n            input_coin_type,\n            output_coin_type,\n            receive_address.address,\n            receive_address.memo\n        );\n        this.setState({\n            receive_address\n        });\n    }\n\n    componentDidUpdate() {\n        ReactTooltip.rebuild();\n    }\n\n    _validateAddress(address, props = this.props) {\n        validateAddress({walletType: props.walletType, newAddress: address})\n            .then(isValid => {\n                if (this.state.toAddress === address) {\n                    this.setState({\n                        withdraw_address_check_in_progress: false,\n                        validAddress: isValid\n                    });\n                }\n            })\n            .catch(err => {\n                console.error(\"Error when validating address:\", err);\n            });\n    }\n\n    _openRegistrarSite(e) {\n        e.preventDefault();\n        let newWnd = window.open(SettingsStore.site_registr, \"_blank\");\n        newWnd.opener = null;\n    }\n\n    _onDropDownSelect(e) {\n        SettingsActions.changeViewSetting({preferredBridge: e});\n    }\n\n    onBlockTradesContact() {\n        console.log(\"Open New Tab\");\n        let win = window.open(\"https://www.blocktrades.us/contact\", \"_blank\");\n        win.focus();\n    }\n\n    _renderDeposit() {\n        const {name: assetName, prefix} = utils.replaceName(this.props.asset);\n        const {receive_address, apiError} = this.state;\n        const hasMemo =\n            receive_address &&\n            \"memo\" in receive_address &&\n            receive_address.memo;\n        const addressValue = (receive_address && receive_address.address) || \"\";\n        const QR = (\n            <div className=\"QR\" style={{textAlign: \"center\"}}>\n                <QRCode size={140} value={addressValue} />\n            </div>\n        );\n\n        let bridgeAssets = Object.keys(this.props.bridges.toJS());\n\n        const inputName = this.props.inputCoinType.toUpperCase();\n        const receiveName = (prefix ? prefix : \"\") + assetName;\n\n        let price = (this.state.receiveAmount / this.state.inputAmount).toFixed(\n            4\n        );\n        let priceSuffix = receiveName + \"/\" + inputName;\n\n        const aboveLimit =\n            this.state.inputAmount > parseFloat(this.state.depositLimit) ||\n            this.state.sendAmount > parseFloat(this.state.depositLimit);\n        const aboveLimitStyle = aboveLimit\n            ? {border: \"1px solid #a94442\"}\n            : null;\n\n        return (\n            <div className=\"modal__body\">\n                <div className=\"container-row\">\n                    <label className=\"left-label\">\n                        <Translate content=\"modal.buy.asset\" />\n                    </label>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            disabled\n                            type=\"text\"\n                            defaultValue={receiveName}\n                        />\n                    </div>\n                </div>\n                <div className=\"container-row\">\n                    <div className=\"grid-block\">\n                        <label className=\"left-label\">\n                            <Translate content=\"modal.buy.bridge\" />\n                        </label>\n                        <span\n                            data-tip={counterpart.translate(\n                                \"tooltip.bridge_TRADE\"\n                            )}\n                            className=\"inline-block tooltip\"\n                            onClick={this.onBlockTradesContact.bind(this)}\n                        >\n                            &nbsp;<Icon\n                                style={{position: \"relative\", top: 0}}\n                                name=\"question-circle\"\n                                title=\"icons.question_circle\"\n                            />\n                        </span>\n                    </div>\n                    <div className=\"inline-label input-wrapper\">\n                        <input\n                            disabled\n                            type=\"text\"\n                            defaultValue={\"BLOCKTRADES\"}\n                        />{\" \"}\n                        {/* Change this when we gain more brdiges */}\n                    </div>\n                </div>\n                <span style={!apiError ? {display: \"\"} : {display: \"none\"}}>\n                    <div className=\"container-row double-row\">\n                        <div className=\"no-margin no-padding\">\n                            <div className=\"small-6\" style={{paddingRight: 10}}>\n                                <div className=\"grid-block\">\n                                    <label className=\"left-label\">\n                                        <Translate content=\"transfer.send\" />\n                                    </label>\n                                    {aboveLimit ? (\n                                        <div\n                                            className=\"error-msg inline-block tooltip\"\n                                            data-tip={counterpart.translate(\n                                                \"tooltip.over_limit\"\n                                            )}\n                                        >\n                                            <Translate content=\"gateway.over_limit\" />&nbsp;<Icon\n                                                name=\"question-circle\"\n                                                title=\"icons.question_circle\"\n                                            />\n                                        </div>\n                                    ) : null}\n                                </div>\n                                <div className=\"inline-label input-wrapper\">\n                                    <input\n                                        style={aboveLimitStyle}\n                                        type=\"text\"\n                                        value={this.state.sendAmount}\n                                        onInput={this._onAmountChange.bind(\n                                            this,\n                                            \"input\"\n                                        )}\n                                    />\n                                    <div className=\"form-label select floating-dropdown\">\n                                        <FloatingDropdown\n                                            entries={bridgeAssets}\n                                            values={bridgeAssets.reduce(\n                                                (map, a) => {\n                                                    if (a) map[a] = a;\n                                                    return map;\n                                                },\n                                                {}\n                                            )}\n                                            singleEntry={bridgeAssets[0]}\n                                            value={\n                                                this.props.preferredBridge ||\n                                                bridgeAssets[0]\n                                            }\n                                            onChange={this._onDropDownSelect}\n                                            upperCase\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"small-6\" style={{paddingLeft: 10}}>\n                                <label className=\"left-label\">\n                                    <Translate content=\"gateway.deposit_limit\" />\n                                </label>\n                                <div className=\"inline-label input-wrapper\">\n                                    <input\n                                        disabled\n                                        type=\"number\"\n                                        value={\n                                            (this.state.depositLimit &&\n                                                parseFloat(\n                                                    this.state.depositLimit\n                                                ).toFixed(4)) ||\n                                            0\n                                        }\n                                    />\n                                    <div className=\"input-right-symbol\">\n                                        {inputName}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"container-row double-row\">\n                        <div className=\"no-margin no-padding\">\n                            <div className=\"small-6\" style={{paddingRight: 10}}>\n                                <label className=\"left-label\">\n                                    <Translate content=\"exchange.receive\" />\n                                </label>\n                                <div className=\"inline-label input-wrapper\">\n                                    <input\n                                        style={aboveLimitStyle}\n                                        type=\"text\"\n                                        value={this.state.receiveAmount}\n                                        onInput={this._onAmountChange.bind(\n                                            this,\n                                            \"output\"\n                                        )}\n                                    />\n                                    <div className=\"input-right-symbol\">\n                                        {receiveName}\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"small-6\" style={{paddingLeft: 10}}>\n                                <div className=\"grid-block\">\n                                    <label className=\"left-label\">\n                                        <Translate content=\"exchange.price\" />\n                                        &nbsp;&nbsp;{this.state\n                                            .receiveLoading ? (\n                                            <Translate content=\"footer.loading\" />\n                                        ) : (\n                                            \"\"\n                                        )}\n                                    </label>\n                                </div>\n                                <div className=\"inline-label input-wrapper\">\n                                    <input\n                                        disabled\n                                        type=\"number\"\n                                        value={aboveLimit ? 0 : price}\n                                    />\n                                    <div className=\"input-right-symbol\">\n                                        {priceSuffix}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {!addressValue ? (\n                        <div style={{textAlign: \"center\"}}>\n                            <LoadingIndicator type=\"three-bounce\" />\n                        </div>\n                    ) : (\n                        <div className=\"container-row\">\n                            {hasMemo ? null : QR}\n                            <div className=\"grid-block\">\n                                <div className=\"copyIcon\">\n                                    <CopyButton\n                                        text={addressValue}\n                                        className=\"copyIcon\"\n                                    />\n                                </div>\n                                <div>\n                                    <Translate\n                                        component=\"div\"\n                                        style={{\n                                            fontSize: \"0.8rem\",\n                                            fontWeight: \"bold\",\n                                            paddingBottom: \"0.3rem\"\n                                        }}\n                                        content=\"gateway.purchase_notice\"\n                                        inputAsset={inputName}\n                                        outputAsset={receiveName}\n                                    />\n\n                                    <div className=\"modal__highlight\">\n                                        {addressValue}\n                                    </div>\n                                </div>\n                            </div>\n                            {hasMemo ? (\n                                <div\n                                    className=\"grid-block\"\n                                    style={{marginTop: \"10px\"}}\n                                >\n                                    <div className=\"copyIcon\">\n                                        <CopyButton\n                                            text={receive_address.memo}\n                                            className=\"copyIcon\"\n                                        />\n                                    </div>\n                                    <div>\n                                        <Translate\n                                            unsafe\n                                            content=\"gateway.purchase_notice_memo\"\n                                            component=\"div\"\n                                            style={{\n                                                fontSize: \"0.8rem\",\n                                                fontWeight: \"bold\",\n                                                paddingBottom: \"0.3rem\"\n                                            }}\n                                        />\n                                        <div className=\"modal__highlight\">\n                                            {receive_address.memo}\n                                        </div>\n                                    </div>\n                                </div>\n                            ) : null}\n                        </div>\n                    )}\n                    <div>\n                        <div className=\"no-margin no-padding\">\n                            <button\n                                className=\"button primary hollow\"\n                                onClick={this.onClose.bind(this)}\n                            >\n                                <Translate content=\"transfer.close\" />\n                            </button>\n                        </div>\n                    </div>\n                </span>\n                <span style={apiError ? {display: \"\"} : {display: \"none\"}}>\n                    <div className=\"container-row double-row\">\n                        <Translate\n                            className=\"txtlabel cancel\"\n                            content=\"gateway.unavailable_TRADE\"\n                            component=\"h3\"\n                        />\n                        <button\n                            className=\"button primary hollow\"\n                            onClick={this.onClose.bind(this)}\n                        >\n                            <Translate content=\"transfer.close\" />\n                        </button>\n                    </div>\n                </span>\n            </div>\n        );\n    }\n\n    _renderCurrentBalance() {\n        const {name: assetName} = utils.replaceName(this.props.asset);\n        const isDeposit = this.props.action === \"deposit\";\n\n        let currentBalance = this.props.balances.find(b => {\n            return b && b.get(\"asset_type\") === this.props.asset.get(\"id\");\n        });\n\n        let asset = currentBalance\n            ? new Asset({\n                  asset_id: currentBalance.get(\"asset_type\"),\n                  precision: this.props.asset.get(\"precision\"),\n                  amount: currentBalance.get(\"balance\")\n              })\n            : null;\n\n        const applyBalanceButton = isDeposit ? (\n            <span\n                style={{border: \"2px solid black\", borderLeft: \"none\"}}\n                className=\"form-label\"\n            >\n                {assetName}\n            </span>\n        ) : (\n            <button\n                data-place=\"right\"\n                data-tip={counterpart.translate(\"tooltip.withdraw_full\")}\n                className=\"button\"\n                style={{border: \"2px solid black\", borderLeft: \"none\"}}\n                onClick={this._updateAmount.bind(\n                    this,\n                    !currentBalance\n                        ? 0\n                        : parseInt(currentBalance.get(\"balance\"), 10)\n                )}\n            >\n                <Icon name=\"clippy\" title=\"icons.clippy.withdraw_full\" />\n            </button>\n        );\n\n        return (\n            <div\n                className=\"SimpleTrade__withdraw-row\"\n                style={{fontSize: \"1rem\"}}\n            >\n                <label style={{fontSize: \"1rem\"}}>\n                    {counterpart.translate(\"gateway.balance_asset\", {\n                        asset: assetName\n                    })}:\n                    <span className=\"inline-label\">\n                        <input\n                            disabled\n                            style={{\n                                color: \"black\",\n                                border: \"2px solid black\",\n                                padding: 10,\n                                width: \"100%\"\n                            }}\n                            value={!asset ? 0 : asset.getAmount({real: true})}\n                        />\n                        {applyBalanceButton}\n                    </span>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        let {asset} = this.props;\n\n        if (!asset) {\n            return null;\n        }\n\n        return (\n            <div className=\"grid-block vertical no-overflow\">\n                <div className=\"modal__header\">\n                    <Translate component=\"p\" content=\"modal.buy.title\" />\n                </div>\n\n                {this.props.isDown ? (\n                    <div style={{textAlign: \"center\"}}>\n                        <Translate\n                            className=\"txtlabel cancel\"\n                            content=\"gateway.unavailable_TRADE\"\n                            component=\"p\"\n                        />\n                    </div>\n                ) : !this.props.isAvailable ? (\n                    <div style={{textAlign: \"center\"}}>\n                        <Translate\n                            className=\"txtlabel cancel\"\n                            content=\"gateway.unavailable\"\n                            component=\"p\"\n                        />\n                    </div>\n                ) : (\n                    this._renderDeposit()\n                )}\n            </div>\n        );\n    }\n}\nSimpleDepositBlocktradesBridge = BindToChainState(\n    SimpleDepositBlocktradesBridge\n);\n\nclass StoreWrapper extends React.Component {\n    render() {\n        let {preferredBridge, ...others} = this.props;\n        let currentBridge = this.props.bridges.get(this.props.preferredBridge);\n        if (!currentBridge) {\n            currentBridge = this.props.bridges.first();\n            preferredBridge = currentBridge.inputCoinType;\n        }\n        return (\n            <SimpleDepositBlocktradesBridge\n                {...others}\n                preferredBridge={preferredBridge}\n                {...currentBridge.toJS()}\n            />\n        );\n    }\n}\n\nStoreWrapper = connect(StoreWrapper, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            preferredBridge: SettingsStore.getState().viewSettings.get(\n                \"preferredBridge\",\n                \"btc\"\n            )\n        };\n    }\n});\n\nexport default class SimpleDepositBlocktradesBridgeModal extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            open: false\n        };\n    }\n\n    show() {\n        this.setState({open: true}, () => {\n            ZfApi.publish(this.props.modalId, \"open\");\n        });\n    }\n\n    onClose() {\n        this.setState({open: false});\n    }\n\n    render() {\n        if (!this.props.bridges) return null;\n\n        return !this.state.open ? null : (\n            <BaseModal\n                id={this.props.modalId}\n                onClose={this.onClose.bind(this)}\n                noCloseBtn\n                overlay={true}\n            >\n                {this.state.open ? (\n                    <StoreWrapper {...this.props} open={this.state.open} />\n                ) : null}\n            </BaseModal>\n        );\n    }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {isFinite} from \"lodash-es\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport BaseModal from \"./BaseModal\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport utils from \"common/utils\";\nimport classNames from \"classnames\";\nimport AmountSelector from \"../Utility/AmountSelector\";\nimport BalanceComponent from \"../Utility/BalanceComponent\";\nimport WalletApi from \"api/WalletApi\";\nimport WalletDb from \"stores/WalletDb\";\nimport FormattedPrice from \"../Utility/FormattedPrice\";\nimport counterpart from \"counterpart\";\nimport HelpContent from \"../Utility/HelpContent\";\nimport Immutable from \"immutable\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {List} from \"immutable\";\nimport Icon from \"../Icon/Icon\";\n\n/**\n *  Given an account and an asset id, render a modal allowing modification of a margin position for that asset\n *\n *  Expected Properties:\n *     quote_asset:  asset id, must be a bitasset\n *     account: full_account object for the account to use\n *\n */\n\nclass BorrowModalContent extends React.Component {\n    static propTypes = {\n        quote_asset: ChainTypes.ChainAsset.isRequired,\n        bitasset_balance: ChainTypes.ChainObject,\n        backing_asset: ChainTypes.ChainAsset.isRequired,\n        backing_balance: ChainTypes.ChainObject,\n        call_orders: ChainTypes.ChainObjectsList,\n        hasCallOrders: PropTypes.bool\n    };\n\n    constructor(props) {\n        super();\n        this.state = this._initialState(props);\n    }\n\n    _initialState(props) {\n        let currentPosition = props ? this._getCurrentPosition(props) : {};\n\n        if (currentPosition.collateral) {\n            let debt = utils.get_asset_amount(\n                currentPosition.debt,\n                props.quote_asset\n            );\n            let collateral = utils.get_asset_amount(\n                currentPosition.collateral,\n                props.backing_asset\n            );\n\n            let target_collateral_ratio = !isNaN(\n                currentPosition.target_collateral_ratio\n            )\n                ? currentPosition.target_collateral_ratio / 100\n                : 0;\n\n            return {\n                short_amount: debt ? debt.toString() : null,\n                collateral: collateral ? collateral.toString() : null,\n                collateral_ratio: this._getCollateralRatio(debt, collateral),\n                target_collateral_ratio: target_collateral_ratio,\n                errors: this._getInitialErrors(),\n                isValid: false,\n                useTargetCollateral: target_collateral_ratio > 0 ? true : false,\n                original_position: {\n                    debt: debt,\n                    collateral: collateral,\n                    target_collateral_ratio: target_collateral_ratio\n                }\n            };\n        } else {\n            return {\n                short_amount: 0,\n                collateral: 0,\n                collateral_ratio: this._getInitialCollateralRatio(props),\n                target_collateral_ratio: 0,\n                errors: this._getInitialErrors(),\n                isValid: false,\n                useTargetCollateral: false,\n                original_position: {\n                    debt: 0,\n                    collateral: 0\n                }\n            };\n        }\n    }\n\n    componentDidMount() {\n        let newState = this._initialState(this.props);\n\n        this.setState(newState);\n        this._setUpdatedPosition(newState);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !utils.are_equal_shallow(nextState, this.state) ||\n            !Immutable.is(nextProps.quote_asset, this.props.quote_asset) ||\n            !nextProps.backing_asset.get(\"symbol\") ===\n                this.props.backing_asset.get(\"symbol\") ||\n            !Immutable.is(nextProps.account, this.props.account) ||\n            !Immutable.is(nextProps.call_orders, this.props.call_orders)\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const {short_amount, collateral, collateral_ratio} = this.state;\n\n        if (\n            nextProps.account !== this.props.account ||\n            nextProps.hasCallOrders !== this.props.hasCallOrders ||\n            nextProps.quote_asset.get(\"id\") !== this.props.quote_asset.get(\"id\")\n        ) {\n            let newState = this._initialState(nextProps);\n\n            let revalidate = false;\n            if (short_amount || collateral || collateral_ratio) {\n                newState.short_amount = short_amount;\n                newState.collateral = collateral;\n                newState.collateral_ratio = collateral_ratio;\n                revalidate = true;\n            }\n\n            this.setState(newState);\n\n            if (revalidate) {\n                this._validateFields(newState);\n            }\n        }\n    }\n\n    _getInitialErrors() {\n        return {\n            collateral_balance: null,\n            ratio_too_high: null\n        };\n    }\n\n    _getMaintenanceRatio() {\n        return (\n            this.props.quote_asset.getIn([\n                \"bitasset\",\n                \"current_feed\",\n                \"maintenance_collateral_ratio\"\n            ]) / 1000\n        );\n    }\n\n    confirmClicked(e) {\n        e.preventDefault();\n        ZfApi.publish(this.props.modalId, \"close\");\n    }\n\n    toggleLockedCR(e) {\n        e.preventDefault();\n        this.setState({lockedCR: !this.state.lockedCR ? true : false});\n    }\n\n    _onBorrowChange(e) {\n        let feed_price = this._getFeedPrice();\n        let amount = e.amount.replace(/,/g, \"\");\n        let newState = {\n            short_amount: amount,\n            collateral: (\n                this.state.collateral_ratio *\n                (amount / feed_price)\n            ).toFixed(this.props.backing_asset.get(\"precision\")),\n            collateral_ratio: this.state.collateral_ratio\n        };\n\n        this.setState(newState);\n        this._validateFields(newState);\n        this._setUpdatedPosition(newState);\n    }\n\n    _onCollateralChange(e) {\n        let amount = e.amount.replace(/,/g, \"\");\n\n        let feed_price = this._getFeedPrice();\n        const collateralRatio = amount / (this.state.short_amount / feed_price);\n\n        let newState = this._isPredictionMarket(this.props)\n            ? {\n                  short_amount: amount,\n                  collateral: amount,\n                  collateral_ratio: 1\n              }\n            : {\n                  short_amount: this.state.short_amount,\n                  collateral: amount,\n                  collateral_ratio: isFinite(collateralRatio)\n                      ? collateralRatio\n                      : this._getInitialCollateralRatio(this.props)\n              };\n\n        this.setState(newState);\n        this._validateFields(newState);\n        this._setUpdatedPosition(newState);\n    }\n\n    _onTargetRatioChange(e) {\n        let target = e.target;\n\n        // Ensure input is valid\n        const regexp_numeral = new RegExp(/[[:digit:]]/);\n        if (!regexp_numeral.test(target.value)) {\n            target.value = target.value.replace(/[^0-9.]/g, \"\");\n        }\n\n        let ratio = target.value;\n\n        this.setState({\n            target_collateral_ratio: ratio\n        });\n    }\n\n    _onRatioChange(e) {\n        let feed_price = this._getFeedPrice();\n        let target = e.target;\n\n        // Ensure input is valid\n        const regexp_numeral = new RegExp(/[[:digit:]]/);\n        if (!regexp_numeral.test(target.value)) {\n            target.value = target.value.replace(/[^0-9.]/g, \"\");\n        }\n\n        let ratio = target.value;\n        let short_amount;\n        let collateral;\n\n        if (this.state.lockedCR) {\n            short_amount = (\n                (this.state.collateral * feed_price) /\n                ratio\n            ).toFixed(this.props.backing_asset.get(\"precision\"));\n            collateral = this.state.collateral;\n        } else {\n            short_amount = this.state.short_amount;\n            collateral = (\n                (this.state.short_amount / feed_price) *\n                ratio\n            ).toFixed(this.props.backing_asset.get(\"precision\"));\n        }\n\n        let newState = {\n            short_amount: short_amount,\n            collateral: collateral,\n            collateral_ratio: ratio\n        };\n\n        this.setState(newState);\n        this._validateFields(newState);\n        this._setUpdatedPosition(newState);\n    }\n\n    _maximizeCollateral() {\n        let currentPosition = this.props\n            ? this._getCurrentPosition(this.props)\n            : {};\n        let initialCollateral = 0;\n\n        if (currentPosition.collateral) {\n            initialCollateral = utils.get_asset_amount(\n                currentPosition.collateral,\n                this.props.backing_asset\n            );\n        }\n\n        // Make sure we don't go over the maximum collateral ratio\n        let maximizedCollateral = Math.floor(\n            Math.min(\n                this.props.backing_balance.get(\"balance\") /\n                    utils.get_asset_precision(this.props.backing_asset) +\n                    initialCollateral -\n                    10,\n                (this.state.short_amount / this._getFeedPrice()) * 1000.0\n            )\n        );\n\n        this._onCollateralChange(\n            new Object({amount: maximizedCollateral.toString()})\n        );\n    }\n\n    _maximizeDebt() {\n        let currentPosition = this.props\n            ? this._getCurrentPosition(this.props)\n            : {};\n        let initialCollateral = 0;\n\n        if (currentPosition.collateral) {\n            initialCollateral = utils.get_asset_amount(\n                currentPosition.collateral,\n                this.props.backing_asset\n            );\n        }\n\n        let maximumCollateral =\n            this.props.backing_balance.get(\"balance\") /\n                utils.get_asset_precision(this.props.backing_asset) +\n            initialCollateral -\n            10;\n        const short_amount =\n            (maximumCollateral / this.state.collateral_ratio) *\n            this._getFeedPrice();\n\n        const newState = {\n            short_amount: short_amount,\n            collateral: maximumCollateral,\n            collateral_ratio: this.state.collateral_ratio\n        };\n\n        this.setState(newState);\n        this._validateFields(newState);\n        this._setUpdatedPosition(newState);\n    }\n\n    _payDebt() {\n        let currentPosition = this.props\n            ? this._getCurrentPosition(this.props)\n            : {debt: 0};\n\n        if (currentPosition.debt <= 0) {\n            return;\n        }\n\n        const short_amount = utils.get_asset_amount(\n            Math.max(\n                currentPosition.debt -\n                    this.props.bitasset_balance.get(\"balance\"),\n                0\n            ),\n            this.props.quote_asset\n        );\n\n        this._onBorrowChange({\n            amount: short_amount.toString()\n        });\n    }\n\n    _setUpdatedPosition(newState) {\n        this.setState({\n            newPosition:\n                parseFloat(newState.short_amount) /\n                parseFloat(newState.collateral)\n        });\n    }\n\n    _validateFields(newState) {\n        let errors = this._getInitialErrors();\n        let {original_position} = this.state;\n        let backing_balance = !this.props.backing_balance\n            ? {balance: 0}\n            : this.props.backing_balance.toJS();\n\n        let maintenanceRatio = this._getMaintenanceRatio();\n        let originalCR = this._getCollateralRatio(\n            original_position.debt,\n            original_position.collateral\n        );\n        let isOriginalBelowMCR =\n            original_position.collateral > 0 && originalCR < maintenanceRatio;\n\n        if (\n            parseFloat(newState.collateral) - original_position.collateral >\n            utils.get_asset_amount(\n                backing_balance.balance,\n                this.props.backing_asset.toJS()\n            )\n        ) {\n            errors.collateral_balance = counterpart.translate(\n                \"borrow.errors.collateral\"\n            );\n        }\n\n        // let sqp = this.props.quote_asset.getIn([\"bitasset\", \"current_feed\", \"maximum_short_squeeze_ratio\"]) / 1000;\n\n        if (\n            isOriginalBelowMCR &&\n            newState.short_amount > original_position.debt\n        ) {\n            errors.below_maintenance = counterpart.translate(\n                \"borrow.errors.increased_debt_on_margin_call\"\n            );\n        } else if (\n            isOriginalBelowMCR &&\n            parseFloat(newState.collateral_ratio) <= parseFloat(originalCR)\n        ) {\n            errors.below_maintenance = counterpart.translate(\n                \"borrow.errors.below_ratio_mcr_update\",\n                {ocr: originalCR.toFixed(4)}\n            );\n        } else if (\n            !isOriginalBelowMCR &&\n            parseFloat(newState.collateral_ratio) <\n                (this._isPredictionMarket(this.props) ? 1 : maintenanceRatio)\n        ) {\n            errors.below_maintenance = counterpart.translate(\n                \"borrow.errors.below\",\n                {mr: maintenanceRatio}\n            );\n        } else if (\n            parseFloat(newState.collateral_ratio) <\n            (this._isPredictionMarket(this.props) ? 1 : maintenanceRatio + 0.5)\n        ) {\n            errors.close_maintenance = counterpart.translate(\n                \"borrow.errors.close\",\n                {mr: maintenanceRatio}\n            );\n        }\n\n        this.setState({errors});\n    }\n\n    _onSubmit(e) {\n        e.preventDefault();\n\n        let quotePrecision = utils.get_asset_precision(\n            this.props.quote_asset.get(\"precision\")\n        );\n        let backingPrecision = utils.get_asset_precision(\n            this.props.backing_asset.get(\"precision\")\n        );\n        let currentPosition = this._getCurrentPosition(this.props);\n\n        let isTCR =\n            typeof this.state.target_collateral_ratio !== \"undefined\" &&\n            this.state.target_collateral_ratio > 0 &&\n            this.state.useTargetCollateral\n                ? true\n                : false;\n\n        let extensionsProp = false;\n\n        if (isTCR) {\n            extensionsProp = {\n                target_collateral_ratio: parseInt(\n                    this.state.target_collateral_ratio * 100,\n                    10\n                )\n            };\n        }\n\n        var tr = WalletApi.new_transaction();\n        if (extensionsProp) {\n            tr.add_type_operation(\"call_order_update\", {\n                fee: {\n                    amount: 0,\n                    asset_id: 0\n                },\n                funding_account: this.props.account.get(\"id\"),\n                delta_collateral: {\n                    amount: parseInt(\n                        this.state.collateral * backingPrecision -\n                            currentPosition.collateral,\n                        10\n                    ),\n                    asset_id: this.props.backing_asset.get(\"id\")\n                },\n                delta_debt: {\n                    amount: parseInt(\n                        this.state.short_amount * quotePrecision -\n                            currentPosition.debt,\n                        10\n                    ),\n                    asset_id: this.props.quote_asset.get(\"id\")\n                },\n                extensions: extensionsProp\n            });\n        } else {\n            tr.add_type_operation(\"call_order_update\", {\n                fee: {\n                    amount: 0,\n                    asset_id: 0\n                },\n                funding_account: this.props.account.get(\"id\"),\n                delta_collateral: {\n                    amount: parseInt(\n                        this.state.collateral * backingPrecision -\n                            currentPosition.collateral,\n                        10\n                    ),\n                    asset_id: this.props.backing_asset.get(\"id\")\n                },\n                delta_debt: {\n                    amount: parseInt(\n                        this.state.short_amount * quotePrecision -\n                            currentPosition.debt,\n                        10\n                    ),\n                    asset_id: this.props.quote_asset.get(\"id\")\n                }\n            });\n        }\n        WalletDb.process_transaction(tr, null, true).catch(err => {\n            // console.log(\"unlock failed:\", err);\n        });\n\n        ZfApi.publish(this.props.modalId, \"close\");\n    }\n\n    _getCurrentPosition(props) {\n        let currentPosition = {\n            collateral: null,\n            debt: null\n        };\n\n        if (props && props.hasCallOrders && props.call_orders) {\n            currentPosition = props.call_orders.filter(a => !!a).find(a => {\n                return (\n                    a.getIn([\"call_price\", \"quote\", \"asset_id\"]) ===\n                    props.quote_asset.get(\"id\")\n                );\n            });\n\n            currentPosition = !!currentPosition\n                ? currentPosition.toJS()\n                : {\n                      collateral: null,\n                      debt: null\n                  };\n        }\n        return currentPosition;\n    }\n\n    _getFeedPrice() {\n        if (!this.props) {\n            return 1;\n        }\n\n        if (this._isPredictionMarket(this.props)) {\n            return 1;\n        }\n\n        return (\n            1 /\n            utils.get_asset_price(\n                this.props.quote_asset.getIn([\n                    \"bitasset\",\n                    \"current_feed\",\n                    \"settlement_price\",\n                    \"quote\",\n                    \"amount\"\n                ]),\n                this.props.backing_asset,\n                this.props.quote_asset.getIn([\n                    \"bitasset\",\n                    \"current_feed\",\n                    \"settlement_price\",\n                    \"base\",\n                    \"amount\"\n                ]),\n                this.props.quote_asset\n            )\n        );\n    }\n\n    _getInitialCollateralRatio(props) {\n        return this._isPredictionMarket(props) ? 1 : 0;\n    }\n\n    _getCollateralRatio(debt, collateral) {\n        return collateral / (debt / this._getFeedPrice());\n    }\n\n    _isPredictionMarket(props) {\n        return props.quote_asset.getIn([\"bitasset\", \"is_prediction_market\"]);\n    }\n\n    _setUseTargetCollateral() {\n        this.setState({\n            useTargetCollateral: !this.state.useTargetCollateral\n        });\n    }\n\n    render() {\n        let {\n            quote_asset,\n            bitasset_balance,\n            backing_asset,\n            backing_balance\n        } = this.props;\n        let {\n            short_amount,\n            collateral,\n            collateral_ratio,\n            target_collateral_ratio,\n            errors,\n            original_position\n        } = this.state;\n        let quotePrecision = utils.get_asset_precision(\n            this.props.quote_asset.get(\"precision\")\n        );\n        let backingPrecision = utils.get_asset_precision(\n            this.props.backing_asset.get(\"precision\")\n        );\n\n        if (\n            !collateral_ratio ||\n            isNaN(collateral_ratio) ||\n            !(collateral_ratio > 0.0 && collateral_ratio < 1000.0)\n        )\n            collateral_ratio = 0;\n        bitasset_balance = !bitasset_balance\n            ? {balance: 0, id: null}\n            : bitasset_balance.toJS();\n        backing_balance = !backing_balance\n            ? {balance: 0, id: null}\n            : backing_balance.toJS();\n\n        let collateralClass = classNames(\"form-group\", {\n            \"has-error\": errors.collateral_balance\n        });\n        let collateralRatioClass = classNames(\n            \"form-group\",\n            {\"has-error\": errors.below_maintenance},\n            {\"has-warning\": errors.close_maintenance}\n        );\n\n        // Dynamically update user's remaining collateral\n        let currentPosition = this._getCurrentPosition(this.props);\n        let backingBalance = backing_balance.id\n            ? ChainStore.getObject(backing_balance.id)\n            : null;\n        let backingAmount = backingBalance ? backingBalance.get(\"balance\") : 0;\n        let collateralChange = parseInt(\n            this.state.collateral * backingPrecision -\n                currentPosition.collateral,\n            10\n        );\n        let remainingBalance = backingAmount - collateralChange;\n\n        let bitAssetBalanceText = (\n            <span>\n                <span>\n                    <Translate component=\"span\" content=\"transfer.available\" />:{\" \"}\n                    {bitasset_balance.id ? (\n                        <BalanceComponent balance={bitasset_balance.id} />\n                    ) : (\n                        <FormattedAsset\n                            amount={0}\n                            asset={quote_asset.get(\"id\")}\n                        />\n                    )}\n                </span>\n                <a onClick={this._payDebt.bind(this)}>\n                    <Translate content=\"borrow.pay_max_debt\" />\n                </a>\n                |\n                {collateral_ratio != 0 ? (\n                    <a onClick={this._maximizeDebt.bind(this)}>\n                        <Translate content=\"borrow.use_max\" />\n                    </a>\n                ) : (\n                    <span\n                        className=\"disabled-link\"\n                        data-place=\"left\"\n                        data-tip={counterpart.translate(\n                            \"borrow.maximize_debt_set_ratio_slider\"\n                        )}\n                    >\n                        <Translate content=\"borrow.use_max\" />\n                    </span>\n                )}\n            </span>\n        );\n        let backingBalanceText = (\n            <span>\n                <span>\n                    <Translate component=\"span\" content=\"transfer.available\" />:{\" \"}\n                    {backing_balance.id ? (\n                        <FormattedAsset\n                            amount={remainingBalance}\n                            asset={backing_asset.get(\"id\")}\n                        />\n                    ) : (\n                        <FormattedAsset\n                            amount={0}\n                            asset={backing_asset.get(\"id\")}\n                        />\n                    )}\n                </span>\n                <a onClick={this._maximizeCollateral.bind(this)}>\n                    <Translate content=\"borrow.use_max\" />\n                </a>\n            </span>\n        );\n\n        let updateTargetCollateral = (\n            <span>\n                <label>\n                    <Translate content=\"borrow.target_collateral_ratio\" />&nbsp;&nbsp;\n                    <span\n                        className=\"tooltip\"\n                        data-html={true}\n                        data-tip={counterpart.translate(\n                            \"tooltip.target_collateral_ratio\"\n                        )}\n                    >\n                        <Icon\n                            name=\"question-circle\"\n                            title=\"icons.question_circle\"\n                        />\n                    </span>\n                </label>\n                <div style={{marginBottom: \"1em\"}}>\n                    <input\n                        type=\"checkbox\"\n                        onClick={this._setUseTargetCollateral.bind(this)}\n                        checked={\n                            this.state.useTargetCollateral\n                                ? \"checked=checked\"\n                                : \"\"\n                        }\n                    />\n                    &nbsp;&nbsp;\n                    <Translate content=\"borrow.enable_target_collateral_ratio\" />\n                </div>\n                {this.state.useTargetCollateral ? (\n                    <span>\n                        <input\n                            value={\n                                isNaN(target_collateral_ratio)\n                                    ? \"0\"\n                                    : target_collateral_ratio\n                            }\n                            onChange={this._onTargetRatioChange.bind(this)}\n                            type=\"text\"\n                            style={{\n                                float: \"right\",\n                                marginTop: -10,\n                                width: \"12%\"\n                            }}\n                        />\n                        <input\n                            style={{width: \"85%\"}}\n                            min=\"0\"\n                            max=\"6\"\n                            step=\"0.01\"\n                            onChange={this._onTargetRatioChange.bind(this)}\n                            value={\n                                isNaN(target_collateral_ratio)\n                                    ? \"0\"\n                                    : target_collateral_ratio\n                            }\n                            type=\"range\"\n                        />\n                    </span>\n                ) : null}\n            </span>\n        );\n\n        let feed_price = this._getFeedPrice();\n\n        let maintenanceRatio = this._getMaintenanceRatio();\n\n        let squeezeRatio =\n            this.props.quote_asset.getIn([\n                \"bitasset\",\n                \"current_feed\",\n                \"maximum_short_squeeze_ratio\"\n            ]) / 1000;\n\n        let isPredictionMarket = this._isPredictionMarket(this.props);\n\n        let isOriginalBelowMCR =\n            original_position.collateral > 0 &&\n            this._getCollateralRatio(\n                original_position.debt,\n                original_position.collateral\n            ) < maintenanceRatio;\n\n        if (!isPredictionMarket && isNaN(feed_price)) {\n            return (\n                <div>\n                    <form\n                        className=\"grid-container text-center no-overflow\"\n                        noValidate\n                    >\n                        <Translate\n                            component=\"h3\"\n                            content=\"borrow.no_valid\"\n                            asset_symbol={quote_asset.get(\"symbol\")}\n                        />\n                    </form>\n                    <div className=\"grid-content button-group text-center no-overflow\">\n                        <Trigger close={this.props.modalId}>\n                            <div className=\" button warning\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    className=\"grid-container small-10 small-offset-1 no-overflow\"\n                    noValidate\n                >\n                    <Translate\n                        component=\"h3\"\n                        content=\"borrow.title\"\n                        asset_symbol={quote_asset.get(\"symbol\")}\n                    />\n                    <div style={{textAlign: \"left\"}}>\n                        {this.props.hide_help ? null : (\n                            <HelpContent\n                                path={\n                                    \"components/\" +\n                                    (isPredictionMarket\n                                        ? \"BorrowModalPrediction\"\n                                        : \"BorrowModal\")\n                                }\n                                debt={quote_asset.get(\"symbol\")}\n                                collateral={backing_asset.get(\"symbol\")}\n                                borrower={this.props.account.get(\"name\")}\n                                mr={maintenanceRatio}\n                            />\n                        )}\n\n                        {isOriginalBelowMCR ? (\n                            <Translate\n                                component=\"h6\"\n                                className=\"has-warning\"\n                                content=\"borrow.errors.below_info\"\n                            />\n                        ) : null}\n\n                        {!isPredictionMarket ? (\n                            <div\n                                style={{\n                                    paddingTop: \"1rem\",\n                                    paddingBottom: \"1rem\"\n                                }}\n                            >\n                                <div className=\"borrow-price-feeds\">\n                                    <span className=\"borrow-price-label\">\n                                        <Translate content=\"transaction.feed_price\" />:&nbsp;\n                                    </span>\n                                    <FormattedPrice\n                                        noPopOver\n                                        quote_amount={quote_asset.getIn([\n                                            \"bitasset\",\n                                            \"current_feed\",\n                                            \"settlement_price\",\n                                            \"base\",\n                                            \"amount\"\n                                        ])}\n                                        quote_asset={quote_asset.getIn([\n                                            \"bitasset\",\n                                            \"current_feed\",\n                                            \"settlement_price\",\n                                            \"base\",\n                                            \"asset_id\"\n                                        ])}\n                                        base_asset={quote_asset.getIn([\n                                            \"bitasset\",\n                                            \"current_feed\",\n                                            \"settlement_price\",\n                                            \"quote\",\n                                            \"asset_id\"\n                                        ])}\n                                        base_amount={quote_asset.getIn([\n                                            \"bitasset\",\n                                            \"current_feed\",\n                                            \"settlement_price\",\n                                            \"quote\",\n                                            \"amount\"\n                                        ])}\n                                    />\n                                </div>\n                                {/* <div className=\"borrow-price-feeds\">\n                                <span\n                                    className=\"inline-block tooltip borrow-price-label\"\n                                    data-place=\"bottom\"\n                                    data-tip={counterpart.translate(\"tooltip.margin_price\")}\n                                ><Translate content=\"exchange.squeeze\" />:&nbsp;</span>\n                                <FormattedPrice\n                                    decimals={2}\n                                    callPrice\n                                    noPopOver\n                                    quote_amount={quote_asset.getIn([\"bitasset\", \"current_feed\", \"settlement_price\", \"base\", \"amount\"])}\n                                    quote_asset={quote_asset.getIn([\"bitasset\", \"current_feed\", \"settlement_price\", \"base\", \"asset_id\"])}\n                                    base_asset={quote_asset.getIn([\"bitasset\", \"current_feed\", \"settlement_price\", \"quote\", \"asset_id\"])}\n                                    base_amount={squeezeRatio * quote_asset.getIn([\"bitasset\", \"current_feed\", \"settlement_price\", \"quote\", \"amount\"])}\n                                    />\n                            </div> */}\n                                <b />\n                                <div\n                                    className={\n                                        \"borrow-price-final \" +\n                                        (errors.below_maintenance\n                                            ? \"has-error\"\n                                            : errors.close_maintenance\n                                                ? \"has-warning\"\n                                                : \"\")\n                                    }\n                                >\n                                    <span className=\"borrow-price-label\">\n                                        <Translate content=\"exchange.your_price\" />:&nbsp;\n                                    </span>\n                                    {this.state.newPosition ? (\n                                        <FormattedPrice\n                                            noPopOver\n                                            quote_amount={\n                                                maintenanceRatio *\n                                                this.state.short_amount *\n                                                quotePrecision\n                                            }\n                                            quote_asset={quote_asset.get(\"id\")}\n                                            base_asset={backing_asset.get(\"id\")}\n                                            base_amount={\n                                                this.state.collateral *\n                                                backingPrecision\n                                            }\n                                        />\n                                    ) : null}\n                                </div>\n                            </div>\n                        ) : null}\n\n                        <div className=\"form-group\">\n                            <span style={{position: \"absolute\", left: 20}}>\n                                <Icon\n                                    onClick={this.toggleLockedCR.bind(this)}\n                                    name={\n                                        !this.state.lockedCR\n                                            ? \"locked\"\n                                            : \"unlocked\"\n                                    }\n                                    size=\"1_5x\"\n                                    style={{position: \"relative\", top: -10}}\n                                />\n                            </span>\n                            <AmountSelector\n                                label=\"transaction.borrow_amount\"\n                                amount={short_amount.toString()}\n                                onChange={this._onBorrowChange.bind(this)}\n                                asset={quote_asset.get(\"id\")}\n                                assets={[quote_asset.get(\"id\")]}\n                                display_balance={bitAssetBalanceText}\n                                placeholder=\"0.0\"\n                                tabIndex={1}\n                            />\n                        </div>\n                        <div className={collateralClass}>\n                            <span style={{position: \"absolute\", left: 20}}>\n                                <Icon\n                                    onClick={this.toggleLockedCR.bind(this)}\n                                    name={\n                                        this.state.lockedCR\n                                            ? \"locked\"\n                                            : \"unlocked\"\n                                    }\n                                    size=\"1_5x\"\n                                    style={{position: \"relative\", top: -10}}\n                                />\n                            </span>\n                            <AmountSelector\n                                label=\"transaction.collateral\"\n                                amount={collateral.toString()}\n                                onChange={this._onCollateralChange.bind(this)}\n                                asset={backing_asset.get(\"id\")}\n                                assets={[backing_asset.get(\"id\")]}\n                                display_balance={backingBalanceText}\n                                placeholder=\"0.0\"\n                                tabIndex={1}\n                            />\n                            {errors.collateral_balance ? (\n                                <div\n                                    className=\"float-left\"\n                                    style={{\n                                        paddingTop: 5\n                                    }}\n                                >\n                                    {errors.collateral_balance}\n                                </div>\n                            ) : null}\n                        </div>\n                        {!isPredictionMarket ? (\n                            <div>\n                                <div\n                                    className={collateralRatioClass}\n                                    style={{marginBottom: \"3.5rem\"}}\n                                >\n                                    <Translate\n                                        component=\"label\"\n                                        content=\"borrow.coll_ratio\"\n                                    />\n                                    <span>\n                                        <input\n                                            value={\n                                                collateral_ratio == 0\n                                                    ? \"\"\n                                                    : collateral_ratio\n                                            }\n                                            onChange={this._onRatioChange.bind(\n                                                this\n                                            )}\n                                            type=\"text\"\n                                            style={{\n                                                width: \"12%\",\n                                                float: \"right\",\n                                                marginTop: -10\n                                            }}\n                                        />\n                                        <input\n                                            style={{width: \"85%\"}}\n                                            min=\"0\"\n                                            max=\"6\"\n                                            step=\"0.01\"\n                                            onChange={this._onRatioChange.bind(\n                                                this\n                                            )}\n                                            value={collateral_ratio}\n                                            type=\"range\"\n                                        />\n                                    </span>\n                                    {errors.below_maintenance ||\n                                    errors.close_maintenance ? (\n                                        <div\n                                            style={{\n                                                height: \"1em\",\n                                                maxWidth: \"85%\"\n                                            }}\n                                            className=\"float-left\"\n                                        >\n                                            {errors.below_maintenance}\n                                            {errors.close_maintenance}\n                                        </div>\n                                    ) : null}\n                                </div>\n                                <div\n                                    className={\"form-group\"}\n                                    style={{marginBottom: \"3.5rem\"}}\n                                >\n                                    {updateTargetCollateral}\n                                </div>\n                            </div>\n                        ) : null}\n                        <div className=\"no-padding grid-content button-group no-overflow\">\n                            <div\n                                onClick={this._onSubmit.bind(this)}\n                                className={classNames(\"button\")}\n                            >\n                                <Translate content=\"borrow.adjust\" />\n                            </div>\n                            <div\n                                onClick={e => {\n                                    e.preventDefault();\n                                    this.setState(\n                                        this._initialState(this.props)\n                                    );\n                                }}\n                                className=\"button hollow primary\"\n                            >\n                                <Translate content=\"wallet.reset\" />\n                            </div>\n                            {/*<Trigger close={this.props.modalId}>\n                                <div className=\"button\"><Translate content=\"account.perm.cancel\" /></div>\n                            </Trigger>*/}\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\nBorrowModalContent = BindToChainState(BorrowModalContent);\n\n/* This wrapper class appears to be necessary because the decorator eats the show method from refs */\nexport default class ModalWrapper extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            smallScreen: false,\n            open: false\n        };\n    }\n\n    show() {\n        this.setState({open: true}, () => {\n            ZfApi.publish(this.props.modalId, \"open\");\n        });\n    }\n\n    onClose() {\n        this.setState({open: false});\n    }\n\n    componentWillMount() {\n        this.setState({\n            smallScreen: window.innerHeight <= 800\n        });\n    }\n\n    render() {\n        let {quote_asset, backing_asset, account} = this.props;\n        let accountBalance = account.get(\"balances\").toJS();\n        let coreBalance, bitAssetBalance;\n\n        if (accountBalance) {\n            for (var id in accountBalance) {\n                if (id === backing_asset) {\n                    coreBalance = accountBalance[id];\n                }\n\n                if (id === quote_asset) {\n                    bitAssetBalance = accountBalance[id];\n                }\n            }\n        }\n\n        return !this.state.open ? null : (\n            <BaseModal\n                id={this.props.modalId}\n                overlay={true}\n                onClose={this.onClose.bind(this)}\n                ref={this.props.modalId}\n            >\n                <div className=\"grid-block vertical\">\n                    <BorrowModalContent\n                        quote_asset={quote_asset}\n                        call_orders={account\n                            .get(\"call_orders\", List())\n                            .toList()}\n                        hasCallOrders={\n                            account.get(\"call_orders\") &&\n                            account.get(\"call_orders\").size > 0\n                        }\n                        modalId={this.props.modalId}\n                        bitasset_balance={bitAssetBalance}\n                        backing_balance={coreBalance}\n                        backing_asset={backing_asset}\n                        hide_help={this.state.smallScreen}\n                        account={account}\n                    />\n                </div>\n            </BaseModal>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AACA;AADA;AANA;AAWA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AACA;AADA;AANA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAnCA;AADA;AAwCA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AADA;AArBA;AADA;AA6BA;;;;AA1EA;AACA;AA4EA;AACA;AACA;AAFA;AACA;AAIA;;;;;;;;;;;AACA;AACA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAQA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAGA;AACA;AAFA;AAPA;AAYA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AALA;AAFA;AAvCA;AAwDA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;AAOA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAxBA;AAiCA;AACA;AAOA;AAOA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAHA;AAxBA;AAlCA;AAmEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AACA;AALA;AAVA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;AARA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AACA;AACA;AAHA;AALA;AADA;AAaA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAFA;AAhIA;AAiJA;;;;AAhPA;AACA;AAkPA;AACA;AADA;AACA;AAGA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAGA;AALA;AAMA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAIA;AAGA;AACA;AACA;AAAA;AAEA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAMA;AAIA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AARA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAvBA;AADA;AATA;AADA;AA8CA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AALA;AArEA;AALA;AAsFA;;;;AAzTA;AACA;AA2TA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AADA;AADA;AAAA;AAJA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAJA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAHA;AArBA;AADA;AAmCA;;;;AAxCA;AACA;AA0CA;AACA;AACA;AAFA;AACA;AAIA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AALA;AArBA;AAsCA;;;;AAjDA;AACA;AAmDA;AACA;AACA;AAFA;AACA;AAIA;;;;;;;;;;;AACA;AACA;AAIA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AAxCA;AACA;AA0CA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;AC7KA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AADA;AARA;AAcA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AADA;AARA;AAcA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AADA;AARA;AAcA;AACA;;;;AAzDA;AACA;AA2DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAJA;AAAA;AACA;AAIA;AACA;AADA;AALA;AAQA;AACA;;;AACA;AAAA;AAAA;AACA;AAAA;AAWA;;;AAEA;AACA;AAQA;;;AAEA;AACA;AACA;;;;AAtCA;AACA;AAwCA;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAeA;;;;AAlCA;AACA;AAoCA;AACA;AADA;AACA;AAGA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAaA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAZA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA;AAyBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AATA;AAeA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AA5BA;AAqCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AADA;AAFA;AADA;AADA;AAPA;AAmBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAxBA;AAiCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AADA;AADA;AAPA;AAiBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAtBA;AA+BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AARA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AADA;AADA;AAZA;AA0BA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AA/BA;AAwCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAbA;AAuBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AANA;AAQA;AARA;AADA;AAhLA;AA8LA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AAHA;AAPA;AAYA;AAAA;AAAA;AACA;AADA;AAZA;AAgBA;AAGA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AANA;AAJA;AAeA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAUA;AAXA;AADA;AAiBA;AACA;AAAA;AACA;AADA;AAtDA;AA4DA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAPA;AADA;AAxEA;AAqFA;;;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAYA;AAZA;AACA;AAeA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAUA;AAXA;AAJA;AAJA;AAwBA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AACA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AACA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAMA;AACA;AARA;AADA;AAYA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AATA;AAfA;AA4BA;;;;AAh1BA;AACA;AADA;AAEA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AAFA;AACA;AAy0BA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AAFA;AAPA;AAcA;;;;AAjCA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACn3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AAdA;AAeA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AASA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAbA;AAeA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAZA;AAcA;;;AAGA;AAKA;AAQA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AADA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AALA;AAAA;AAOA;AACA;AACA;AACA;AAHA;AAPA;AAJA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAIA;AALA;AAnBA;AA4BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAMA;AANA;AAMA;AACA;AACA;AAFA;AANA;AALA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAIA;AACA;AAfA;AADA;AAVA;AAnBA;AAmDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAWA;AAAA;AAAA;AACA;AADA;AAZA;AAJA;AApDA;AADA;AA4EA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAAA;AACA;AADA;AAVA;AAJA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AANA;AAZA;AApBA;AADA;AA8CA;AACA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AATA;AAYA;AAAA;AAAA;AACA;AADA;AAbA;AAPA;AAyBA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AAAA;AACA;AADA;AAXA;AAVA;AA5BA;AAyDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AADA;AAzLA;AAoMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AANA;AADA;AA7OA;AA8PA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAYA;AAZA;AACA;AAeA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AARA;AAUA;AAXA;AAJA;AAJA;AAwBA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAdA;AA0BA;;;;AAzoBA;AACA;AADA;AAEA;AACA;AAFA;AACA;AAyoBA;AACA;AAGA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAFA;AAMA;;;;AAfA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AAXA;AACA;AAaA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AAWA;;;;AAlCA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/sBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;;;AAUA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AARA;AAaA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAQA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAOA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AANA;AACA;AAQA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AASA;AAGA;;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAKA;;;AAEA;AACA;AADA;AACA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AAEA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAIA;AAIA;AAKA;AAIA;AAIA;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AANA;AAQA;AACA;AAKA;AANA;AAQA;AAtBA;AAwBA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAKA;AANA;AAQA;AACA;AAKA;AANA;AAdA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AAGA;AACA;AAGA;AAMA;AAGA;AACA;AAGA;AACA;AADA;AAGA;AACA;AAKA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAIA;AACA;AAFA;AALA;AAWA;AAAA;AAAA;AACA;AADA;AAZA;AAgBA;AACA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AAPA;AArBA;AAiCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AARA;AAcA;AAAA;AAAA;AACA;AADA;AAfA;AACA;AAoBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AAPA;AAFA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAWA;AAXA;AAaA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AARA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAXA;AAfA;AA9BA;AACA;AA8DA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAXA;AAoBA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAVA;AAcA;AAEA;AACA;AACA;AAHA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAOA;AAOA;AAOA;AAvBA;AAJA;AAoDA;AACA;AAAA;AAAA;AACA;AADA;AAUA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAEA;AACA;AAKA;AACA;AACA;AATA;AAdA;AA3DA;AA4FA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AARA;AADA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAbA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AACA;AARA;AADA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AANA;AAxBA;AAkCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAVA;AAgBA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AATA;AAjBA;AA6BA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AALA;AAOA;AACA;AARA;AAvCA;AAmDA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AApDA;AA4DA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAPA;AASA;AATA;AAPA;AA5OA;AATA;AADA;AAgRA;;;;AAvhCA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAuhCA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAdA;AADA;AANA;AA0BA;;;;AArEA;AACA;AADA;;;;A","sourceRoot":""}