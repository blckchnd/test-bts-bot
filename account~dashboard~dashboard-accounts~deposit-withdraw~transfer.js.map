{"version":3,"file":"account~dashboard~dashboard-accounts~deposit-withdraw~transfer.9073ec3ce989b1eeac01.js","sources":["webpack:///app/components/Utility/TransitionWrapper.jsx","webpack:///app/components/Account/RecentTransactions.jsx"],"sourcesContent":["import React from \"react\";\nimport CSSTransitionGroup from \"react-transition-group/CSSTransitionGroup\";\n\nexport default class TransitionWrapper extends React.Component {\n    static defaultProps = {\n        component: \"span\",\n        enterTimeout: 2000\n    };\n\n    constructor() {\n        super();\n\n        this.state = {\n            animateEnter: false\n        };\n\n        this.timer = null;\n    }\n\n    componentDidMount() {\n        this.enableAnimation();\n    }\n\n    resetAnimation() {\n        this.setState({\n            animateEnter: false\n        });\n\n        this.enableAnimation();\n    }\n\n    enableAnimation() {\n        this.timer = setTimeout(() => {\n            if (this.timer) {\n                this.setState({\n                    animateEnter: true\n                });\n            }\n        }, 2000);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n        this.timer = null;\n    }\n\n    render() {\n        if (!this.props.children) {\n            return React.createElement(this.props.component);\n        } else {\n            return (\n                <CSSTransitionGroup\n                    className={this.props.className}\n                    component={this.props.component}\n                    transitionName={this.props.transitionName}\n                    transitionEnterTimeout={this.props.enterTimeout}\n                    transitionEnter={this.state.animateEnter}\n                    transitionLeave={false}\n                >\n                    {this.props.children}\n                </CSSTransitionGroup>\n            );\n        }\n    }\n}\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {saveAs} from \"file-saver\";\nimport Operation from \"../Blockchain/Operation\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport {ChainTypes as grapheneChainTypes} from \"bitsharesjs\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\nimport ps from \"perfect-scrollbar\";\nimport counterpart from \"counterpart\";\nimport Icon from \"../Icon/Icon\";\nimport cnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nconst {operations} = grapheneChainTypes;\nconst alignLeft = {textAlign: \"left\"};\nconst alignRight = {textAlign: \"right\"};\n\nfunction compareOps(b, a) {\n    if (a.block_num === b.block_num) {\n        return a.virtual_op - b.virtual_op;\n    } else {\n        return a.block_num - b.block_num;\n    }\n}\n\nfunction textContent(n) {\n    return n ? `\"${n.textContent.replace(/[\\s\\t\\r\\n]/gi, \" \")}\"` : \"\";\n}\n\nclass RecentTransactions extends React.Component {\n    static propTypes = {\n        accountsList: ChainTypes.ChainAccountsList.isRequired,\n        compactView: PropTypes.bool,\n        limit: PropTypes.number,\n        maxHeight: PropTypes.number,\n        fullHeight: PropTypes.bool,\n        showFilters: PropTypes.bool\n    };\n\n    static defaultProps = {\n        limit: 25,\n        maxHeight: 500,\n        fullHeight: false,\n        showFilters: false\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            limit: props.limit || 20,\n            csvExport: false,\n            headerHeight: 85,\n            filter: \"all\"\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.fullHeight) {\n            let t = this.refs.transactions;\n            ps.initialize(t);\n\n            this._setHeaderHeight();\n        }\n    }\n\n    _setHeaderHeight() {\n        let height = this.refs.header.offsetHeight;\n\n        if (height !== this.state.headerHeight) {\n            this.setState({\n                headerHeight: height\n            });\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (\n            !utils.are_equal_shallow(\n                this.props.accountsList,\n                nextProps.accountsList\n            )\n        )\n            return true;\n        if (this.props.maxHeight !== nextProps.maxHeight) return true;\n        if (this.state.headerHeight !== nextState.headerHeight) return true;\n        if (this.state.filter !== nextState.filter) return true;\n        if (this.props.customFilter) {\n            if (\n                !utils.are_equal_shallow(\n                    this.props.customFilter.fields,\n                    nextProps.customFilter.fields\n                ) ||\n                !utils.are_equal_shallow(\n                    this.props.customFilter.values,\n                    nextProps.customFilter.values\n                )\n            ) {\n                return true;\n            }\n        }\n\n        if (this.props.maxHeight !== nextProps.maxHeight) return true;\n        if (\n            nextState.limit !== this.state.limit ||\n            nextState.csvExport !== this.state.csvExport\n        )\n            return true;\n        for (let key = 0; key < nextProps.accountsList.length; ++key) {\n            let npa = nextProps.accountsList[key];\n            let nsa = this.props.accountsList[key];\n            if (npa && nsa && npa.get(\"history\") !== nsa.get(\"history\"))\n                return true;\n        }\n        return false;\n    }\n\n    componentDidUpdate() {\n        if (this.state.csvExport) {\n            this.state.csvExport = false;\n            const csv_export_container = document.getElementById(\n                \"csv_export_container\"\n            );\n            const nodes = csv_export_container.childNodes;\n            let csv = \"\";\n            for (const n of nodes) {\n                //console.log(\"-- RecentTransactions._downloadCSV -->\", n);\n                const cn = n.childNodes;\n                if (csv !== \"\") csv += \"\\n\";\n                csv += [\n                    textContent(cn[0]),\n                    textContent(cn[1]),\n                    textContent(cn[2]),\n                    textContent(cn[3])\n                ].join(\",\");\n            }\n            var blob = new Blob([csv], {type: \"text/csv;charset=utf-8\"});\n            var today = new Date();\n            saveAs(\n                blob,\n                \"btshist-\" +\n                    today.getFullYear() +\n                    \"-\" +\n                    (\"0\" + (today.getMonth() + 1)).slice(-2) +\n                    \"-\" +\n                    (\"0\" + today.getDate()).slice(-2) +\n                    \"-\" +\n                    (\"0\" + today.getHours()).slice(-2) +\n                    (\"0\" + today.getMinutes()).slice(-2) +\n                    \".csv\"\n            );\n        }\n\n        if (!this.props.fullHeight) {\n            let t = this.refs.transactions;\n            ps.update(t);\n\n            this._setHeaderHeight();\n        }\n    }\n\n    _onIncreaseLimit() {\n        this.setState({\n            limit: this.state.limit + 30\n        });\n    }\n\n    _getHistory(accountsList, filterOp, customFilter) {\n        let history = [];\n        let seen_ops = new Set();\n        for (let account of accountsList) {\n            if (account) {\n                let h = account.get(\"history\");\n                if (h)\n                    history = history.concat(\n                        h\n                            .toJS()\n                            .filter(\n                                op =>\n                                    !seen_ops.has(op.id) && seen_ops.add(op.id)\n                            )\n                    );\n            }\n        }\n        if (filterOp) {\n            history = history.filter(a => {\n                return a.op[0] === operations[filterOp];\n            });\n        }\n\n        if (customFilter) {\n            history = history.filter(a => {\n                let finalValue = customFilter.fields.reduce((final, filter) => {\n                    switch (filter) {\n                        case \"asset_id\":\n                            return (\n                                final &&\n                                a.op[1][\"amount\"][filter] ===\n                                    customFilter.values[filter]\n                            );\n                            break;\n                        default:\n                            return (\n                                final &&\n                                a.op[1][filter] === customFilter.values[filter]\n                            );\n                            break;\n                    }\n                }, true);\n                return finalValue;\n            });\n        }\n        return history;\n    }\n\n    _downloadCSV() {\n        this.setState({csvExport: true});\n    }\n\n    _onChangeFilter(e) {\n        this.setState({\n            filter: e.target.value\n        });\n    }\n\n    render() {\n        let {\n            accountsList,\n            compactView,\n            filter,\n            customFilter,\n            style,\n            maxHeight\n        } = this.props;\n        let {limit, headerHeight} = this.state;\n        let current_account_id =\n            accountsList.length === 1 && accountsList[0]\n                ? accountsList[0].get(\"id\")\n                : null;\n        let history = this._getHistory(\n            accountsList,\n            this.props.showFilters && this.state.filter !== \"all\"\n                ? this.state.filter\n                : filter,\n            customFilter\n        ).sort(compareOps);\n        let historyCount = history.length;\n\n        style = style ? style : {width: \"100%\", height: \"100%\"};\n\n        let options = null;\n        if (true || this.props.showFilters) {\n            options = [\n                \"all\",\n                \"transfer\",\n                \"limit_order_create\",\n                \"limit_order_cancel\",\n                \"fill_order\",\n                \"account_create\",\n                \"account_update\",\n                \"asset_create\",\n                \"witness_withdraw_pay\",\n                \"vesting_balance_withdraw\"\n            ].map(type => {\n                return (\n                    <option value={type} key={type}>\n                        {counterpart.translate(\"transaction.trxTypes.\" + type)}\n                    </option>\n                );\n            });\n        }\n\n        let display_history = history.length\n            ? history.slice(0, limit).map(o => {\n                  return (\n                      <Operation\n                          includeOperationId={true}\n                          operationId={o.id}\n                          style={alignLeft}\n                          key={o.id}\n                          op={o.op}\n                          result={o.result}\n                          txIndex={o.trx_in_block}\n                          block={o.block_num}\n                          current={current_account_id}\n                          hideFee\n                          inverted={false}\n                          hideOpLabel={compactView}\n                          fullDate={true}\n                      />\n                  );\n              })\n            : [\n                  <tr key=\"no_recent\">\n                      <td colSpan={compactView ? \"2\" : \"3\"}>\n                          <Translate content=\"operation.no_recent\" />\n                      </td>\n                  </tr>\n              ];\n        display_history.push(\n            <tr className=\"total-value\" key=\"total_value\">\n                <td style={{textAlign: \"center\"}}>\n                    {historyCount > 0 ? (\n                        <span>\n                            <a\n                                className=\"inline-block\"\n                                onClick={this._downloadCSV.bind(this)}\n                                data-tip={counterpart.translate(\n                                    \"transaction.csv_tip\"\n                                )}\n                                data-place=\"bottom\"\n                            >\n                                <Icon\n                                    name=\"excel\"\n                                    title=\"icons.excel\"\n                                    className=\"icon-14px\"\n                                />\n                            </a>\n                        </span>\n                    ) : null}\n                </td>\n                <td className=\"column-hide-tiny\" />\n                <td colSpan=\"2\" style={{textAlign: \"center\"}}>\n                    &nbsp;{(this.props.showMore &&\n                        historyCount > this.props.limit) ||\n                    (20 && limit < historyCount) ? (\n                        <a onClick={this._onIncreaseLimit.bind(this)}>\n                            <Icon\n                                name=\"chevron-down\"\n                                title=\"icons.chevron_down.transactions\"\n                                className=\"icon-14px\"\n                            />\n                        </a>\n                    ) : null}\n                </td>\n            </tr>\n        );\n\n        return (\n            <div className=\"recent-transactions no-overflow\" style={style}>\n                <div className=\"generic-bordered-box\">\n                    {this.props.dashboard ? null : (\n                        <div ref=\"header\">\n                            <div className=\"block-content-header\">\n                                <span>\n                                    {this.props.title ? (\n                                        this.props.title\n                                    ) : (\n                                        <Translate content=\"account.recent\" />\n                                    )}\n                                </span>\n                            </div>\n                        </div>\n                    )}\n                    <div className=\"header-selector\">\n                        <div className=\"selector\">\n                            <div className={cnames(\"inline-block\")}>\n                                {this.props.showFilters ? (\n                                    <select\n                                        data-place=\"left\"\n                                        data-tip={counterpart.translate(\n                                            \"tooltip.filter_ops\"\n                                        )}\n                                        style={{paddingTop: 5, width: \"auto\"}}\n                                        className=\"bts-select no-margin\"\n                                        value={this.state.filter}\n                                        onChange={this._onChangeFilter.bind(\n                                            this\n                                        )}\n                                    >\n                                        {options}\n                                    </select>\n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                    <div\n                        className=\"box-content grid-block no-margin\"\n                        style={\n                            !this.props.fullHeight\n                                ? {\n                                      maxHeight: maxHeight - headerHeight\n                                  }\n                                : null\n                        }\n                        ref=\"transactions\"\n                    >\n                        <table\n                            className={\n                                \"table table-striped \" +\n                                (compactView ? \"compact\" : \"\") +\n                                (this.props.dashboard\n                                    ? \" dashboard-table table-hover\"\n                                    : \"\")\n                            }\n                        >\n                            <thead>\n                                <tr>\n                                    <th\n                                        className=\"column-hide-tiny\"\n                                        style={alignLeft}\n                                    >\n                                        <Translate content=\"account.transactions.id\" />\n                                    </th>\n                                    <th\n                                        className=\"column-hide-tiny\"\n                                        style={alignLeft}\n                                    >\n                                        <Translate content=\"account.transactions.type\" />\n                                    </th>\n                                    <th style={alignLeft}>\n                                        <Translate content=\"account.transactions.info\" />\n                                    </th>\n                                    <th style={alignLeft}>\n                                        <Translate content=\"account.transactions.time\" />\n                                    </th>\n                                </tr>\n                            </thead>\n                            <TransitionWrapper\n                                component=\"tbody\"\n                                transitionName=\"newrow\"\n                            >\n                                {display_history}\n                            </TransitionWrapper>\n                        </table>\n                    </div>\n                    {historyCount > 0 &&\n                        this.state.csvExport && (\n                            <div\n                                id=\"csv_export_container\"\n                                style={{display: \"none\"}}\n                            >\n                                <div>\n                                    <div>DATE</div>\n                                    <div>OPERATION</div>\n                                    <div>MEMO</div>\n                                    <div>AMOUNT</div>\n                                </div>\n                                {history.map(o => {\n                                    return (\n                                        <Operation\n                                            key={o.id}\n                                            op={o.op}\n                                            result={o.result}\n                                            block={o.block_num}\n                                            inverted={false}\n                                            csvExportMode\n                                        />\n                                    );\n                                })}\n                            </div>\n                        )}\n                </div>\n            </div>\n        );\n    }\n}\nRecentTransactions = BindToChainState(RecentTransactions);\n\nclass TransactionWrapper extends React.Component {\n    static propTypes = {\n        asset: ChainTypes.ChainAsset.isRequired,\n        to: ChainTypes.ChainAccount.isRequired,\n        fromAccount: ChainTypes.ChainAccount.isRequired\n    };\n\n    static defaultProps = {\n        asset: \"1.3.0\"\n    };\n\n    render() {\n        return (\n            <span className=\"wrapper\">{this.props.children(this.props)}</span>\n        );\n    }\n}\nTransactionWrapper = BindToChainState(TransactionWrapper);\n\nexport {RecentTransactions, TransactionWrapper};\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAPA;AAQA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AARA;AAWA;AACA;;;;AA5DA;AACA;AADA;AAEA;AACA;AAFA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAMA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AAAA;AAIA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAgBA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AANA;AAQA;AACA;AACA;AACA;AAHA;AARA;AADA;AAFA;AAoBA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAJA;AAtBA;AACA;AAqCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AARA;AAYA;AAZA;AAFA;AADA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AAGA;AADA;AAKA;AATA;AAWA;AAAA;AAAA;AACA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAhBA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AA/BA;AAXA;AAkDA;AAEA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AArBA;AAxFA;AADA;AAoHA;;;;AAzaA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAgaA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;;;AAfA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AADA;AACA;AASA;AACA;;;;;A","sourceRoot":""}