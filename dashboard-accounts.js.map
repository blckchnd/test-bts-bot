{"version":3,"file":"dashboard-accounts.4a3e239296ee051a10d6.js","sources":["webpack:///app/components/Dashboard/DashboardAccountsOnly.jsx"],"sourcesContent":["import React from \"react\";\nimport Immutable from \"immutable\";\nimport DashboardList from \"./DashboardList\";\nimport {RecentTransactions} from \"../Account/RecentTransactions\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport LoginSelector from \"../LoginSelector\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport AccountStore from \"stores/AccountStore\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport {Tabs, Tab} from \"../Utility/Tabs\";\nimport AltContainer from \"alt-container\";\n\nclass AccountsContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[AccountStore, SettingsStore, MarketsStore]}\n                inject={{\n                    contacts: () => {\n                        return AccountStore.getState().accountContacts;\n                    },\n                    myActiveAccounts: () => {\n                        return AccountStore.getState().myActiveAccounts;\n                    },\n                    myHiddenAccounts: () => {\n                        return AccountStore.getState().myHiddenAccounts;\n                    },\n                    accountsReady: () => {\n                        return (\n                            AccountStore.getState().accountsLoaded &&\n                            AccountStore.getState().refsLoaded\n                        );\n                    },\n                    passwordAccount: () => {\n                        return AccountStore.getState().passwordAccount;\n                    },\n                    lowVolumeMarkets: () => {\n                        return MarketsStore.getState().lowVolumeMarkets;\n                    },\n                    currentEntry: SettingsStore.getState().viewSettings.get(\n                        \"dashboardEntry\",\n                        \"accounts\"\n                    )\n                }}\n            >\n                <Accounts {...this.props} />\n            </AltContainer>\n        );\n    }\n}\n\nclass Accounts extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {\n            width: null,\n            showIgnored: false,\n            currentEntry: props.currentEntry\n        };\n\n        this._setDimensions = this._setDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this._setDimensions();\n\n        window.addEventListener(\"resize\", this._setDimensions, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            nextProps.myActiveAccounts !== this.props.myActiveAccounts ||\n            nextProps.contacts !== this.props.contacts ||\n            nextProps.ignoredAccounts !== this.props.ignoredAccounts ||\n            nextProps.passwordAccount !== this.props.passwordAccount ||\n            nextState.width !== this.state.width ||\n            nextProps.accountsReady !== this.props.accountsReady ||\n            nextState.showIgnored !== this.state.showIgnored ||\n            nextState.currentEntry !== this.state.currentEntry\n        );\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._setDimensions);\n    }\n\n    _setDimensions() {\n        let width = window.innerWidth;\n\n        if (width !== this.state.width) {\n            this.setState({width});\n        }\n    }\n\n    _onToggleIgnored() {\n        this.setState({\n            showIgnored: !this.state.showIgnored\n        });\n    }\n\n    _onSwitchType(type) {\n        this.setState({\n            currentEntry: type\n        });\n        SettingsActions.changeViewSetting({\n            dashboardEntry: type\n        });\n    }\n\n    render() {\n        let {\n            myActiveAccounts,\n            myHiddenAccounts,\n            accountsReady,\n            passwordAccount\n        } = this.props;\n        let {width, showIgnored} = this.state;\n\n        if (passwordAccount && !myActiveAccounts.has(passwordAccount)) {\n            myActiveAccounts = myActiveAccounts.add(passwordAccount);\n        }\n        let names = myActiveAccounts.toArray().sort();\n        if (passwordAccount && names.indexOf(passwordAccount) === -1)\n            names.push(passwordAccount);\n        let ignored = myHiddenAccounts.toArray().sort();\n\n        let accountCount =\n            myActiveAccounts.size +\n            myHiddenAccounts.size +\n            (passwordAccount ? 1 : 0);\n\n        if (!accountsReady) {\n            return <LoadingIndicator />;\n        }\n\n        if (!accountCount) {\n            return <LoginSelector />;\n        }\n\n        const contacts = this.props.contacts.toArray();\n        return (\n            <div ref=\"wrapper\" className=\"grid-block page-layout vertical\">\n                <div\n                    ref=\"container\"\n                    className=\"tabs-container generic-bordered-box\"\n                >\n                    <Tabs\n                        setting=\"accountTab\"\n                        className=\"account-tabs\"\n                        defaultActiveTab={1}\n                        segmented={false}\n                        tabsClass=\"account-overview no-padding bordered-header content-block\"\n                    >\n                        <Tab title=\"account.accounts\">\n                            <div className=\"generic-bordered-box\">\n                                <div className=\"box-content\">\n                                    <DashboardList\n                                        accounts={Immutable.List(names)}\n                                        ignoredAccounts={Immutable.List(\n                                            ignored\n                                        )}\n                                        width={width}\n                                        onToggleIgnored={this._onToggleIgnored.bind(\n                                            this\n                                        )}\n                                        showIgnored={showIgnored}\n                                        showMyAccounts={true}\n                                    />\n                                </div>\n                            </div>\n                        </Tab>\n                        <Tab title=\"account.contacts\">\n                            <div className=\"generic-bordered-box\">\n                                <div className=\"box-content\">\n                                    <DashboardList\n                                        accounts={contacts}\n                                        passwordAccount={passwordAccount}\n                                        ignoredAccounts={Immutable.List(\n                                            ignored\n                                        )}\n                                        width={width}\n                                        onToggleIgnored={this._onToggleIgnored.bind(\n                                            this\n                                        )}\n                                        showIgnored={showIgnored}\n                                        isContactsList={true}\n                                    />\n                                </div>\n                            </div>\n                        </Tab>\n                        <Tab title=\"account.recent\">\n                            <RecentTransactions\n                                accountsList={myActiveAccounts}\n                                limit={10}\n                                compactView={false}\n                                fullHeight={true}\n                                showFilters={true}\n                                dashboard\n                            />\n                        </Tab>\n                    </Tabs>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst DashboardAccountsOnly = props => {\n    return <AccountsContainer {...props} onlyAccounts />;\n};\n\nexport default DashboardAccountsOnly;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAFA;AA8BA;AA9BA;AAiCA;;;;AApCA;AACA;AAsCA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AAUA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAVA;AADA;AADA;AADA;AAkBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAXA;AADA;AADA;AADA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AA5CA;AAJA;AADA;AA+DA;;;;AA7JA;AACA;AA+JA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}