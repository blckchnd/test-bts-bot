{"version":3,"file":"block.5f06679c53b60965b857.js","sources":["webpack:///app/components/Utility/LinkToWitnessById.jsx","webpack:///app/components/Blockchain/BlockContainer.jsx","webpack:///app/components/Blockchain/Block.jsx"],"sourcesContent":["import React from \"react\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport LinkToAccountById from \"./LinkToAccountById\";\n\nclass LinkToWitnessById extends React.Component {\n    static propTypes = {\n        witness: ChainTypes.ChainObject.isRequired\n    };\n\n    render() {\n        let witness_account = this.props.witness.get(\"witness_account\");\n        return <LinkToAccountById account={witness_account} />;\n    }\n}\nLinkToWitnessById = BindToChainState(LinkToWitnessById);\n\nexport default LinkToWitnessById;\n","import React from \"react\";\nimport BlockchainStore from \"stores/BlockchainStore\";\nimport AltContainer from \"alt-container\";\nimport Block from \"./Block\";\n\nclass BlockContainer extends React.Component {\n    render() {\n        let height = parseInt(this.props.match.params.height, 10);\n        let txIndex = this.props.match.params.txIndex\n            ? parseInt(this.props.match.params.txIndex)\n            : 0;\n\n        return (\n            <AltContainer\n                stores={[BlockchainStore]}\n                inject={{\n                    blocks: () => {\n                        return BlockchainStore.getState().blocks;\n                    }\n                }}\n            >\n                <Block\n                    {...this.props}\n                    height={height}\n                    scrollToIndex={txIndex}\n                />\n            </AltContainer>\n        );\n    }\n}\n\nexport default BlockContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {FormattedDate} from \"react-intl\";\nimport Immutable from \"immutable\";\nimport BlockchainActions from \"actions/BlockchainActions\";\nimport Transaction from \"./Transaction\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport LinkToWitnessById from \"../Utility/LinkToWitnessById\";\nimport {Element, Events, animateScroll as scroll, scroller} from \"react-scroll\";\n\nclass TransactionList extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.block.id !== this.props.block.id;\n    }\n\n    render() {\n        let {block} = this.props;\n        let transactions = null;\n\n        transactions = [];\n\n        if (block.transactions.length > 0) {\n            transactions = [];\n\n            block.transactions.forEach((trx, index) => {\n                transactions.push(\n                    <Element\n                        key={index}\n                        id={`tx_${index}`}\n                        name={`tx_${index}`}\n                    >\n                        <Transaction key={index} trx={trx} index={index} />\n                    </Element>\n                );\n            });\n        }\n\n        return <div>{transactions}</div>;\n    }\n}\n\nclass Block extends React.Component {\n    static propTypes = {\n        dynGlobalObject: ChainTypes.ChainObject.isRequired,\n        blocks: PropTypes.object.isRequired,\n        height: PropTypes.number.isRequired\n    };\n\n    static defaultProps = {\n        dynGlobalObject: \"2.1.0\",\n        blocks: {},\n        height: 1\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showInput: false\n        };\n\n        this.scrollToTop = this.scrollToTop.bind(this);\n    }\n\n    componentDidMount() {\n        this._getBlock(this.props.height);\n\n        Events.scrollEvent.register(\"begin\", () => {\n            //console.log(\"begin\", arguments);\n        });\n\n        Events.scrollEvent.register(\"end\", () => {\n            //console.log(\"end\", arguments);\n            this.setState({scrollEnded: true});\n        });\n    }\n\n    componentWillReceiveProps(np) {\n        if (np.height !== this.props.height) {\n            this._getBlock(np.height);\n        }\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            !Immutable.is(np.blocks, this.props.blocks) ||\n            np.height !== this.props.height ||\n            np.dynGlobalObject !== this.props.dynGlobalObject ||\n            ns.showInput !== this.state.showInput\n        );\n    }\n\n    scrollToTop() {\n        scroll.scrollToTop({\n            duration: 1500,\n            delay: 100,\n            smooth: true,\n            containerId: \"blockContainer\"\n        });\n    }\n\n    _getBlock(height) {\n        if (height) {\n            height = parseInt(height, 10);\n            if (!this.props.blocks.get(height)) {\n                BlockchainActions.getBlock(height);\n            }\n        }\n    }\n\n    _nextBlock() {\n        let height = this.props.match.params.height;\n        let nextBlock = Math.min(\n            this.props.dynGlobalObject.get(\"head_block_number\"),\n            parseInt(height, 10) + 1\n        );\n        this.props.history.push(`/block/${nextBlock}`);\n    }\n\n    _previousBlock() {\n        let height = this.props.match.params.height;\n        let previousBlock = Math.max(1, parseInt(height, 10) - 1);\n        this.props.history.push(`/block/${previousBlock}`);\n    }\n\n    toggleInput(e) {\n        e.preventDefault();\n        this.setState({showInput: true});\n    }\n\n    _onKeyDown(e) {\n        if (e && e.keyCode === 13) {\n            this.props.history.push(`/block/${e.target.value}`);\n            this.setState({showInput: false});\n        }\n    }\n\n    _onSubmit() {\n        const value = this.refs.blockInput.value;\n        if (value) {\n            this._onKeyDown({keyCode: 13, target: {value}});\n        }\n    }\n\n    componentDidUpdate() {\n        let {blocks} = this.props;\n        let height = parseInt(this.props.height, 10);\n        let block = blocks.get(height);\n\n        if (this.props.scrollToIndex && !this.state.scrollEnded && block) {\n            scroller.scrollTo(`tx_${this.props.scrollToIndex}`, {\n                duration: 1500,\n                delay: 100,\n                smooth: true,\n                offset: -100,\n                containerId: \"blockContainer\"\n            });\n        }\n    }\n\n    render() {\n        const {showInput} = this.state;\n        let {blocks} = this.props;\n        let height = parseInt(this.props.height, 10);\n        let block = blocks.get(height);\n\n        let blockHeight = showInput ? (\n            <span className=\"inline-label\">\n                <input\n                    ref=\"blockInput\"\n                    type=\"number\"\n                    onKeyDown={this._onKeyDown.bind(this)}\n                />\n                <button onClick={this._onSubmit.bind(this)} className=\"button\">\n                    <Translate content=\"explorer.block.go_to\" />\n                </button>\n            </span>\n        ) : (\n            <span>\n                <Translate\n                    style={{textTransform: \"uppercase\"}}\n                    component=\"span\"\n                    content=\"explorer.block.title\"\n                />\n                <a onClick={this.toggleInput.bind(this)}>&nbsp;#{height}</a>\n            </span>\n        );\n\n        return (\n            <div className=\"grid-block page-layout\">\n                <div className=\"grid-block main-content\">\n                    <div className=\"grid-content\" id=\"blockContainer\">\n                        <div className=\"grid-content no-overflow medium-offset-2 medium-8 large-offset-3 large-6 small-12\">\n                            <h4 className=\"text-center\">{blockHeight}</h4>\n                            <ul>\n                                <li>\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"explorer.block.date\"\n                                    />:{\" \"}\n                                    {block ? (\n                                        <FormattedDate\n                                            value={block.timestamp}\n                                            format=\"full\"\n                                        />\n                                    ) : null}\n                                </li>\n                                <li>\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"explorer.block.witness\"\n                                    />:{\" \"}\n                                    {block ? (\n                                        <LinkToWitnessById\n                                            witness={block.witness}\n                                        />\n                                    ) : null}\n                                </li>\n                                <li>\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"explorer.block.previous\"\n                                    />: {block ? block.previous : null}\n                                </li>\n                                <li>\n                                    <Translate\n                                        component=\"span\"\n                                        content=\"explorer.block.transactions\"\n                                    />:{\" \"}\n                                    {block ? block.transactions.length : null}\n                                </li>\n                            </ul>\n                            <div\n                                className=\"clearfix\"\n                                style={{marginBottom: \"1rem\"}}\n                            >\n                                <div\n                                    className=\"button float-left outline\"\n                                    onClick={this._previousBlock.bind(this)}\n                                >\n                                    &#8592;\n                                </div>\n                                <div\n                                    className=\"button float-right outline\"\n                                    onClick={this._nextBlock.bind(this)}\n                                >\n                                    &#8594;\n                                </div>\n                            </div>\n                            {block ? <TransactionList block={block} /> : null}\n                            <div\n                                style={{textAlign: \"center\", marginBottom: 20}}\n                            >\n                                <a onClick={this.scrollToTop}>\n                                    <Translate content=\"global.return_to_top\" />\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BindToChainState(Block);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AACA;AACA;;;;AARA;AACA;AADA;AAEA;AADA;AACA;AAQA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AAEA;AACA;AAHA;AARA;AAeA;;;;AAvBA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AA5BA;AACA;AA8BA;;;AAaA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAPA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AANA;AAWA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AACA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AACA;AAEA;AACA;AAFA;AANA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AACA;AAEA;AADA;AANA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AACA;AALA;AA9BA;AAsCA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAVA;AAiBA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAHA;AA1DA;AADA;AADA;AADA;AAyEA;;;;AA7NA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAHA;AACA;AACA;AAuNA;;;;A","sourceRoot":""}