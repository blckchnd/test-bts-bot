{"version":3,"file":"account~asset~dashboard-accounts~explorer.236ab35dbc6147974c2c.js","sources":["webpack:///app/components/Utility/Tabs.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport cnames from \"classnames\";\nimport {connect} from \"alt-react\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport counterpart from \"counterpart\";\nimport {withRouter} from \"react-router-dom\";\n\n/**\n *  Renders a tab layout, handling switching and optionally persists the currently open tab using the SettingsStore\n *\n *  props:\n *     setting: unique name to be used to remember the active tab of this tabs layout,\n *     tabsClass: optional classes for the tabs container div\n *     contentClass: optional classes for the content container div\n *\n *  Usage:\n *\n *  <Tabs setting=\"mySetting\">\n *      <Tab title=\"locale.string.title1\">Tab 1 content</Tab>\n *      <Tab title=\"locale.string.title2\">Tab 2 content</Tab>\n *  </Tabs>\n *\n */\n\nclass Tab extends React.Component {\n    static propTypes = {\n        changeTab: PropTypes.func,\n        isActive: PropTypes.bool.isRequired,\n        index: PropTypes.number.isRequired,\n        className: PropTypes.string,\n        isLinkTo: PropTypes.string,\n        subText: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n    };\n\n    static defaultProps = {\n        isActive: false,\n        index: 0,\n        className: \"\",\n        isLinkTo: \"\",\n        subText: null\n    };\n\n    render() {\n        let {\n            isActive,\n            index,\n            changeTab,\n            title,\n            className,\n            updatedTab,\n            disabled,\n            subText\n        } = this.props;\n        let c = cnames({\"is-active\": isActive}, className);\n\n        if (typeof title === \"string\" && title.indexOf(\".\") > 0) {\n            title = counterpart.translate(title);\n        }\n\n        // dont string concetenate subText directly within the rendering, subText can be an object without toString\n        // implementation, but valid DOM (meaning, don't do subText + \"someString\"\n\n        if (this.props.collapsed) {\n            // if subText is empty, dont render it, we dont want empty brackets added\n            if (typeof subText === \"string\") {\n                subText = subText.trim();\n            }\n            return (\n                <option value={index} data-is-link-to={this.props.isLinkTo}>\n                    <span className=\"tab-title\">\n                        {title}\n                        {updatedTab ? \"*\" : \"\"}\n                        {subText && \" (\"}\n                        {subText && subText}\n                        {subText && \")\"}\n                    </span>\n                </option>\n            );\n        }\n        return (\n            <li\n                className={c}\n                onClick={\n                    !disabled\n                        ? changeTab.bind(this, index, this.props.isLinkTo)\n                        : null\n                }\n            >\n                <a>\n                    <span className=\"tab-title\">\n                        {title}\n                        {updatedTab ? \"*\" : \"\"}\n                    </span>\n                    {subText && <div className=\"tab-subtext\">{subText}</div>}\n                </a>\n            </li>\n        );\n    }\n}\n\nclass Tabs extends React.Component {\n    static propTypes = {\n        setting: PropTypes.string,\n        defaultActiveTab: PropTypes.number,\n        segmented: PropTypes.bool\n    };\n\n    static defaultProps = {\n        active: 0,\n        defaultActiveTab: 0,\n        segmented: true,\n        contentClass: \"\",\n        style: {}\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            activeTab: props.setting\n                ? props.viewSettings.get(props.setting, props.defaultActiveTab)\n                : props.defaultActiveTab,\n            width: window.innerWidth\n        };\n\n        this._setDimensions = this._setDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this._setDimensions();\n        window.addEventListener(\"resize\", this._setDimensions, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let nextSetting = nextProps.viewSettings.get(nextProps.setting);\n        if (nextSetting !== this.props.viewSettings.get(this.props.setting)) {\n            this.setState({\n                activeTab: nextSetting\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._setDimensions);\n    }\n\n    _setDimensions() {\n        let width = window.innerWidth;\n\n        if (width !== this.state.width) {\n            this.setState({width});\n        }\n    }\n\n    _changeTab(value, isLinkTo) {\n        if (value === this.state.activeTab) return;\n        // Persist current tab if desired\n\n        if (isLinkTo !== \"\") {\n            this.props.history.push(isLinkTo);\n        }\n\n        if (this.props.setting) {\n            SettingsActions.changeViewSetting({\n                [this.props.setting]: value\n            });\n        }\n        this.setState({activeTab: value});\n\n        if (this.props.onChangeTab) this.props.onChangeTab(value);\n    }\n\n    render() {\n        let {children, contentClass, tabsClass, style, segmented} = this.props;\n        const collapseTabs =\n            this.state.width < 900 && React.Children.count(children) > 2;\n\n        let activeContent = null;\n\n        let tabs = React.Children.map(children, (child, index) => {\n            if (!child) {\n                return null;\n            }\n            if (collapseTabs && child.props.disabled) return null;\n            let isActive = index === this.state.activeTab;\n            if (isActive) {\n                activeContent = child.props.children;\n            }\n\n            return React.cloneElement(child, {\n                collapsed: collapseTabs,\n                isActive,\n                changeTab: this._changeTab.bind(this),\n                index: index\n            });\n        }).filter(a => a !== null);\n\n        if (!activeContent) {\n            activeContent = tabs[0].props.children;\n        }\n\n        return (\n            <div\n                className={cnames(\n                    !!this.props.actionButtons ? \"with-buttons\" : \"\",\n                    this.props.className\n                )}\n            >\n                <div className=\"service-selector\">\n                    <ul\n                        style={style}\n                        className={cnames(\"button-group no-margin\", tabsClass, {\n                            segmented\n                        })}\n                    >\n                        {collapseTabs ? (\n                            <li\n                                style={{\n                                    paddingLeft: 10,\n                                    paddingRight: 10,\n                                    minWidth: \"15rem\"\n                                }}\n                            >\n                                <select\n                                    value={this.state.activeTab}\n                                    style={{marginTop: 10, marginBottom: 10}}\n                                    className=\"bts-select\"\n                                    onChange={e => {\n                                        let ind = parseInt(e.target.value, 10);\n                                        this._changeTab(\n                                            ind,\n                                            e.target[ind].attributes[\n                                                \"data-is-link-to\"\n                                            ].value\n                                        );\n                                    }}\n                                >\n                                    {tabs}\n                                </select>\n                            </li>\n                        ) : (\n                            tabs\n                        )}\n                        {this.props.actionButtons ? (\n                            <li className=\"tabs-action-buttons\">\n                                {this.props.actionButtons}\n                            </li>\n                        ) : null}\n                    </ul>\n                </div>\n                <div className={cnames(\"tab-content\", contentClass)}>\n                    {activeContent}\n                </div>\n            </div>\n        );\n    }\n}\n\nTabs = connect(\n    Tabs,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {viewSettings: SettingsStore.getState().viewSettings};\n        }\n    }\n);\n\nTabs = withRouter(Tabs);\n\nexport {Tabs, Tab};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AARA;AAiBA;;;;AAzEA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAWA;AACA;AACA;AACA;AACA;AALA;AACA;AAiEA;;;AAeA;AAAA;AACA;AADA;AACA;AACA;AACA;AAGA;AAJA;AACA;AAMA;AATA;AAUA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAZA;AAcA;AAdA;AAPA;AA2BA;AACA;AAAA;AACA;AADA;AAnCA;AADA;AA0CA;AAAA;AAAA;AACA;AADA;AAhDA;AAqDA;;;;AA7JA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;AALA;AACA;AACA;AAuJA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;;;;;A","sourceRoot":""}