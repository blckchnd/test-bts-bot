{"version":3,"file":"settings.18ea10b5f392c45e049b.js","sources":["webpack:///app/components/Settings/SettingsContainer.jsx","webpack:///app/components/Settings/Settings.jsx","webpack:///./node_modules/lodash-es/set.js","webpack:///app/components/Settings/SettingsEntry.jsx","webpack:///app/components/Settings/AccountsSettings.jsx","webpack:///app/components/Settings/WalletSettings.jsx","webpack:///app/components/Settings/PasswordSettings.jsx","webpack:///app/components/Settings/RestoreSettings.jsx","webpack:///app/components/Settings/RestoreFavorites.jsx","webpack:///app/components/Settings/ResetSettings.jsx","webpack:///app/components/Settings/BackupSettings.jsx","webpack:///app/components/Settings/BackupFavorites.jsx"],"sourcesContent":["import React from \"react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport IntlStore from \"stores/IntlStore\";\nimport AltContainer from \"alt-container\";\nimport Settings from \"./Settings\";\n\nclass SettingsContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[SettingsStore]}\n                inject={{\n                    settings: () => {\n                        return SettingsStore.getState().settings;\n                    },\n                    viewSettings: () => {\n                        return SettingsStore.getState().viewSettings;\n                    },\n                    defaults: () => {\n                        return SettingsStore.getState().defaults;\n                    },\n                    localesObject: () => {\n                        return IntlStore.getState().localesObject;\n                    },\n                    apiLatencies: () => {\n                        return SettingsStore.getState().apiLatencies;\n                    }\n                }}\n            >\n                <Settings {...this.props} />\n            </AltContainer>\n        );\n    }\n}\n\nexport default SettingsContainer;\n","import React from \"react\";\nimport counterpart from \"counterpart\";\nimport IntlActions from \"actions/IntlActions\";\nimport Translate from \"react-translate-component\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport WebsocketAddModal from \"./WebsocketAddModal\";\nimport SettingsEntry from \"./SettingsEntry\";\nimport AccountsSettings from \"./AccountsSettings\";\nimport WalletSettings from \"./WalletSettings\";\nimport PasswordSettings from \"./PasswordSettings\";\nimport RestoreSettings from \"./RestoreSettings\";\nimport ResetSettings from \"./ResetSettings\";\nimport BackupSettings from \"./BackupSettings\";\nimport AccessSettings from \"./AccessSettings\";\nimport {set} from \"lodash-es\";\nimport {getAllowedLogins, getFaucet} from \"../../branding\";\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super();\n        let menuEntries = this._getMenuEntries(props);\n        let activeSetting = 0;\n\n        let tabIndex = !!props.match.params.tab\n            ? menuEntries.indexOf(props.match.params.tab)\n            : props.viewSettings.get(\"activeSetting\", 0);\n        if (tabIndex >= 0) activeSetting = tabIndex;\n\n        let general = [\n            \"locale\",\n            \"unit\",\n            \"browser_notifications\",\n            \"showSettles\",\n            \"walletLockTimeout\",\n            \"themes\",\n            \"showAssetPercent\"\n        ];\n        // disable that the user can change login method if only one is allowed\n        if (getAllowedLogins().length > 1) general.push(\"passwordLogin\");\n        general.push(\"reset\");\n\n        this.state = {\n            apiServer: props.settings.get(\"apiServer\"),\n            activeSetting,\n            menuEntries,\n            settingEntries: {\n                general: general,\n                access: [\"apiServer\", \"faucet_address\"]\n            }\n        };\n\n        this._handleNotificationChange = this._handleNotificationChange.bind(\n            this\n        );\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.match.params.tab !== this.props.match.params.tab) {\n            this._onChangeMenu(this.props.match.params.tab);\n        }\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.settings.get(\"passwordLogin\") !==\n            this.props.settings.get(\"passwordLogin\")\n        ) {\n            const currentEntries = this._getMenuEntries(this.props);\n            const menuEntries = this._getMenuEntries(np);\n            const currentActive = currentEntries[this.state.activeSetting];\n            const newActiveIndex = menuEntries.indexOf(currentActive);\n            const newActive = menuEntries[newActiveIndex];\n            this.setState({\n                menuEntries\n            });\n            if (newActiveIndex && newActiveIndex !== this.state.activeSetting) {\n                this.setState({\n                    activeSetting: menuEntries.indexOf(currentActive)\n                });\n            } else if (\n                !newActive ||\n                this.state.activeSetting > menuEntries.length - 1\n            ) {\n                this.setState({\n                    activeSetting: 0\n                });\n            }\n        }\n    }\n\n    _getMenuEntries(props) {\n        if (props.deprecated) {\n            return [\"wallet\", \"backup\"];\n        }\n\n        let menuEntries = [];\n\n        menuEntries.push(\"general\");\n        if (!props.settings.get(\"passwordLogin\")) menuEntries.push(\"wallet\");\n        menuEntries.push(\"accounts\");\n        menuEntries.push(\"password\");\n        if (!props.settings.get(\"passwordLogin\")) menuEntries.push(\"backup\");\n        if (!props.settings.get(\"passwordLogin\")) menuEntries.push(\"restore\");\n        menuEntries.push(\"access\");\n\n        if (getFaucet().show) menuEntries.push(\"faucet_address\");\n\n        menuEntries.push(\"reset\");\n\n        return menuEntries;\n    }\n\n    triggerModal(e, ...args) {\n        this.refs.ws_modal.show(e, ...args);\n    }\n\n    _handleNotificationChange(path, value) {\n        // use different change handler because checkbox doesn't work\n        // normal with e.preventDefault()\n\n        let updatedValue = set(\n            this.props.settings.get(\"browser_notifications\"),\n            path,\n            value\n        );\n\n        SettingsActions.changeSetting({\n            setting: \"browser_notifications\",\n            value: updatedValue\n        });\n    }\n\n    _onChangeSetting(setting, e) {\n        e.preventDefault();\n\n        let {defaults} = this.props;\n        let value = null;\n\n        function findEntry(targetValue, targetDefaults) {\n            if (!targetDefaults) return targetValue;\n            if (targetDefaults[0].translate) {\n                for (var i = 0; i < targetDefaults.length; i++) {\n                    if (\n                        counterpart.translate(\n                            `settings.${targetDefaults[i].translate}`\n                        ) === targetValue\n                    ) {\n                        return i;\n                    }\n                }\n            } else {\n                return targetDefaults.indexOf(targetValue);\n            }\n        }\n\n        switch (setting) {\n            case \"locale\":\n                let myLocale = counterpart.getLocale();\n                if (e.target.value !== myLocale) {\n                    IntlActions.switchLocale(e.target.value);\n                    SettingsActions.changeSetting({\n                        setting: \"locale\",\n                        value: e.target.value\n                    });\n                }\n                break;\n\n            case \"themes\":\n                SettingsActions.changeSetting({\n                    setting: \"themes\",\n                    value: e.target.value\n                });\n                break;\n\n            case \"defaultMarkets\":\n                break;\n\n            case \"walletLockTimeout\":\n                let newValue = parseInt(e.target.value, 10);\n                if (isNaN(newValue)) newValue = 0;\n                if (!isNaN(newValue) && typeof newValue === \"number\") {\n                    SettingsActions.changeSetting({\n                        setting: \"walletLockTimeout\",\n                        value: newValue\n                    });\n                }\n                break;\n\n            case \"inverseMarket\":\n            case \"confirmMarketOrder\":\n                value = findEntry(e.target.value, defaults[setting]) === 0; // USD/BTS is true, BTS/USD is false\n                break;\n\n            case \"apiServer\":\n                SettingsActions.changeSetting({\n                    setting: \"apiServer\",\n                    value: e.target.value\n                });\n                this.setState({\n                    apiServer: e.target.value\n                });\n                break;\n\n            case \"showSettles\":\n            case \"showAssetPercent\":\n            case \"passwordLogin\":\n                let reference = defaults[setting][0];\n                if (reference.translate) reference = reference.translate;\n                SettingsActions.changeSetting({\n                    setting,\n                    value: e.target.value === reference\n                });\n                break;\n\n            case \"unit\":\n                let index = findEntry(e.target.value, defaults[setting]);\n                SettingsActions.changeSetting({\n                    setting: setting,\n                    value: defaults[setting][index]\n                });\n                break;\n\n            default:\n                value = findEntry(e.target.value, defaults[setting]);\n                break;\n        }\n\n        if (value !== null) {\n            SettingsActions.changeSetting({setting: setting, value: value});\n        }\n    }\n\n    onReset() {\n        SettingsActions.clearSettings();\n    }\n\n    _redirectToEntry(entry) {\n        this.props.history.push(\"/settings/\" + entry);\n    }\n\n    _onChangeMenu(entry) {\n        let index = this.state.menuEntries.indexOf(entry);\n        this.setState({\n            activeSetting: index\n        });\n\n        SettingsActions.changeViewSetting({activeSetting: index});\n    }\n\n    render() {\n        let {settings, defaults} = this.props;\n        const {menuEntries, activeSetting, settingEntries} = this.state;\n        let entries;\n        let activeEntry = menuEntries[activeSetting] || menuEntries[0];\n\n        switch (activeEntry) {\n            case \"accounts\":\n                entries = <AccountsSettings />;\n                break;\n\n            case \"wallet\":\n                entries = <WalletSettings {...this.props} />;\n                break;\n\n            case \"password\":\n                entries = <PasswordSettings />;\n                break;\n\n            case \"backup\":\n                entries = <BackupSettings />;\n                break;\n\n            case \"restore\":\n                entries = (\n                    <RestoreSettings\n                        passwordLogin={this.props.settings.get(\"passwordLogin\")}\n                    />\n                );\n                break;\n\n            case \"access\":\n                entries = (\n                    <AccessSettings\n                        faucet={settings.get(\"faucet_address\")}\n                        nodes={defaults.apiServer}\n                        onChange={this._onChangeSetting.bind(this)}\n                        triggerModal={this.triggerModal.bind(this)}\n                    />\n                );\n                break;\n            case \"faucet_address\":\n                entries = (\n                    <input\n                        disabled={!getFaucet().editable}\n                        type=\"text\"\n                        className=\"settings-input\"\n                        defaultValue={settings.get(\"faucet_address\")}\n                        onChange={\n                            getFaucet().editable\n                                ? this._onChangeSetting.bind(\n                                      this,\n                                      \"faucet_address\"\n                                  )\n                                : null\n                        }\n                    />\n                );\n                break;\n\n            case \"reset\":\n                entries = <ResetSettings />;\n                break;\n\n            default:\n                entries = settingEntries[activeEntry].map(setting => {\n                    return (\n                        <SettingsEntry\n                            key={setting}\n                            setting={setting}\n                            settings={settings}\n                            defaults={defaults[setting]}\n                            onChange={this._onChangeSetting.bind(this)}\n                            onNotificationChange={\n                                this._handleNotificationChange\n                            }\n                            locales={this.props.localesObject}\n                            {...this.state}\n                        />\n                    );\n                });\n                break;\n        }\n\n        return (\n            <div className={this.props.deprecated ? \"\" : \"grid-block\"}>\n                <div className=\"grid-block main-content margin-block wrap\">\n                    <div\n                        className=\"grid-content shrink settings-menu\"\n                        style={{paddingRight: \"2rem\"}}\n                    >\n                        <Translate\n                            style={{paddingBottom: 10, paddingLeft: 10}}\n                            component=\"h3\"\n                            content=\"header.settings\"\n                            className={\"panel-bg-color\"}\n                        />\n\n                        <ul>\n                            {menuEntries.map((entry, index) => {\n                                return (\n                                    <li\n                                        className={\n                                            index === activeSetting\n                                                ? \"active\"\n                                                : \"\"\n                                        }\n                                        onClick={this._redirectToEntry.bind(\n                                            this,\n                                            entry\n                                        )}\n                                        key={entry}\n                                    >\n                                        <Translate\n                                            content={\"settings.\" + entry}\n                                        />\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n\n                    <div\n                        className=\"grid-content\"\n                        style={{\n                            maxWidth: 1000\n                        }}\n                    >\n                        <div className=\"grid-block small-12 no-margin vertical\">\n                            <Translate\n                                component=\"h3\"\n                                content={\n                                    \"settings.\" + menuEntries[activeSetting]\n                                }\n                            />\n                            {activeEntry != \"access\" && (\n                                <Translate\n                                    unsafe\n                                    style={{paddingTop: 5, marginBottom: 30}}\n                                    content={`settings.${\n                                        menuEntries[activeSetting]\n                                    }_text`}\n                                    className=\"panel-bg-color\"\n                                />\n                            )}\n                            {entries}\n                        </div>\n                    </div>\n                </div>\n                <WebsocketAddModal\n                    ref=\"ws_modal\"\n                    apis={defaults[\"apiServer\"]}\n                    api={defaults[\"apiServer\"]\n                        .filter(a => {\n                            return a.url === this.state.apiServer;\n                        })\n                        .reduce((a, b) => {\n                            return b && b.url;\n                        }, null)}\n                    changeConnection={apiServer => {\n                        this.setState({apiServer});\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Settings;\n","import baseSet from './_baseSet.js';\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nexport default set;\n","import React from \"react\";\nimport counterpart from \"counterpart\";\nimport Translate from \"react-translate-component\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AssetName from \"../Utility/AssetName\";\nimport Notify from \"notifyjs\";\nexport default class SettingsEntry extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            message: null\n        };\n\n        this.handleNotificationChange = this.handleNotificationChange.bind(\n            this\n        );\n    }\n\n    _setMessage(key) {\n        this.setState({\n            message: counterpart.translate(key)\n        });\n\n        this.timer = setTimeout(() => {\n            this.setState({message: null});\n        }, 4000);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    handleNotificationChange(path) {\n        return evt => {\n            this.props.onNotificationChange(path, !!evt.target.checked);\n        };\n    }\n\n    render() {\n        let {defaults, setting, settings} = this.props;\n        let options,\n            optional,\n            confirmButton,\n            value,\n            input,\n            selected = settings.get(setting);\n        let noHeader = false;\n        let component = null;\n\n        switch (setting) {\n            case \"locale\":\n                value = selected;\n                options = defaults.map(entry => {\n                    let translationKey = \"languages.\" + entry;\n                    let value = counterpart.translate(translationKey);\n\n                    return (\n                        <option key={entry} value={entry}>\n                            {value}\n                        </option>\n                    );\n                });\n\n                break;\n\n            case \"themes\":\n                value = selected;\n                options = defaults.map(entry => {\n                    let translationKey = \"settings.\" + entry;\n                    let value = counterpart.translate(translationKey);\n\n                    return (\n                        <option key={entry} value={entry}>\n                            {value}\n                        </option>\n                    );\n                });\n\n                break;\n\n            case \"browser_notifications\":\n                value = selected;\n\n                component = (\n                    <div className=\"settings--notifications\">\n                        <div className=\"settings--notifications--group\">\n                            <div className=\"settings--notifications--item\">\n                                <input\n                                    type=\"checkbox\"\n                                    id=\"browser_notifications.allow\"\n                                    checked={!!value.allow}\n                                    onChange={this.handleNotificationChange(\n                                        \"allow\"\n                                    )}\n                                />\n                                <label htmlFor=\"browser_notifications.allow\">\n                                    {counterpart.translate(\n                                        \"settings.browser_notifications_allow\"\n                                    )}\n                                </label>\n                            </div>\n                            <div className=\"settings--notifications--group\">\n                                <div className=\"settings--notifications--item\">\n                                    <input\n                                        type=\"checkbox\"\n                                        id=\"browser_notifications.additional.transferToMe\"\n                                        disabled={!value.allow}\n                                        checked={\n                                            !!value.additional.transferToMe\n                                        }\n                                        onChange={this.handleNotificationChange(\n                                            \"additional.transferToMe\"\n                                        )}\n                                    />\n                                    <label htmlFor=\"browser_notifications.allow\">\n                                        {counterpart.translate(\n                                            \"settings.browser_notifications_additional_transfer_to_me\"\n                                        )}\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                        {!!value.allow &&\n                            Notify.needsPermission && (\n                                <a\n                                    href=\"https://goo.gl/zZ7NHY\"\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    <Translate\n                                        component=\"div\"\n                                        className=\"settings--notifications--no-browser-support\"\n                                        content=\"settings.browser_notifications_disabled_by_browser_notify\"\n                                    />\n                                </a>\n                            )}\n                    </div>\n                );\n\n                break;\n\n            case \"defaultMarkets\":\n                options = null;\n                value = null;\n                break;\n\n            case \"walletLockTimeout\":\n                value = selected;\n                input = (\n                    <input\n                        type=\"text\"\n                        className=\"settings-input\"\n                        value={selected}\n                        onChange={this.props.onChange.bind(this, setting)}\n                    />\n                );\n                break;\n\n            default:\n                if (typeof selected === \"number\") {\n                    value = defaults[selected];\n                } else if (typeof selected === \"boolean\") {\n                    if (selected) {\n                        value = defaults[0];\n                    } else {\n                        value = defaults[1];\n                    }\n                } else if (typeof selected === \"string\") {\n                    value = selected;\n                }\n\n                if (defaults) {\n                    options = defaults.map(entry => {\n                        let option = entry.translate\n                            ? counterpart.translate(\n                                  `settings.${entry.translate}`\n                              )\n                            : entry;\n                        if (setting === \"unit\") {\n                            option = <AssetName name={entry} />;\n                        }\n                        let key = entry.translate ? entry.translate : entry;\n                        return (\n                            <option\n                                value={\n                                    entry.translate ? entry.translate : entry\n                                }\n                                key={key}\n                            >\n                                {option}\n                            </option>\n                        );\n                    });\n                } else {\n                    input = (\n                        <input\n                            className=\"settings-input\"\n                            type=\"text\"\n                            defaultValue={value}\n                            onBlur={this.props.onChange.bind(this, setting)}\n                        />\n                    );\n                }\n                break;\n        }\n        if (typeof value !== \"number\" && !value && !options) return null;\n\n        if (value && value.translate) {\n            value = value.translate;\n        }\n\n        return (\n            <section className=\"block-list no-border-bottom\">\n                {noHeader ? null : (\n                    <header>\n                        <Translate\n                            component=\"span\"\n                            style={{\n                                fontWeight: \"normal\",\n                                fontFamily: \"Roboto-Medium, arial, sans-serif\",\n                                fontStyle: \"normal\"\n                            }}\n                            content={`settings.${setting}`}\n                        />\n                    </header>\n                )}\n                {options ? (\n                    <ul>\n                        <li className=\"with-dropdown\">\n                            {optional}\n                            <select\n                                value={value}\n                                className=\"settings-select\"\n                                onChange={this.props.onChange.bind(\n                                    this,\n                                    setting\n                                )}\n                            >\n                                {options}\n                            </select>\n                            {confirmButton}\n                        </li>\n                    </ul>\n                ) : null}\n                {input ? (\n                    <ul>\n                        <li>{input}</li>\n                    </ul>\n                ) : null}\n\n                {component ? component : null}\n\n                <div className=\"facolor-success\">{this.state.message}</div>\n            </section>\n        );\n    }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport AccountStore from \"stores/AccountStore\";\nimport AccountActions from \"actions/AccountActions\";\nimport {connect} from \"alt-react\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\n\nclass AccountsSettings extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return (\n            !utils.are_equal_shallow(\n                nextProps.myAccounts,\n                this.props.myAccounts\n            ) || nextProps.hiddenAccounts !== this.props.hiddenAccounts\n        );\n    }\n\n    onToggleHide(account, hide, e) {\n        e.preventDefault();\n        AccountActions.toggleHideAccount(account, hide);\n    }\n\n    render() {\n        let {myAccounts, hiddenAccounts} = this.props;\n\n        let accounts = hiddenAccounts\n            .toArray()\n            .concat(myAccounts)\n            .sort();\n\n        if (!accounts.length) {\n            return (\n                <div>\n                    <Translate content=\"settings.no_accounts\" />\n                </div>\n            );\n        }\n\n        return (\n            <table className=\"table\">\n                <tbody>\n                    {accounts.map(account => {\n                        let isIgnored = hiddenAccounts.has(account);\n                        let hideLink = (\n                            <a\n                                onClick={\n                                    isIgnored\n                                        ? this.onToggleHide.bind(\n                                              this,\n                                              account,\n                                              false\n                                          )\n                                        : this.onToggleHide.bind(\n                                              this,\n                                              account,\n                                              true\n                                          )\n                                }\n                            >\n                                <Translate\n                                    content={\n                                        \"account.\" +\n                                        (isIgnored ? \"unignore\" : \"ignore\")\n                                    }\n                                />\n                            </a>\n                        );\n\n                        return (\n                            <tr key={account}>\n                                <td>{account}</td>\n                                <td>\n                                    <Link\n                                        to={`/account/${account}/permissions`}\n                                    >\n                                        <Translate content=\"settings.view_keys\" />\n                                    </Link>\n                                </td>\n                                <td>{hideLink}</td>\n                            </tr>\n                        );\n                    })}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nAccountsSettings = connect(\n    AccountsSettings,\n    {\n        listenTo() {\n            return [AccountStore];\n        },\n        getProps() {\n            return {\n                myAccounts: AccountStore.getMyAccounts(),\n                hiddenAccounts: AccountStore.getState().myHiddenAccounts\n            };\n        }\n    }\n);\n\nexport default AccountsSettings;\n","import React from \"react\";\nimport {ChangeActiveWallet, WalletDelete} from \"../Wallet/WalletManager\";\nimport BalanceClaimActive from \"../Wallet/BalanceClaimActive\";\nimport Translate from \"react-translate-component\";\nimport counterpart from \"counterpart\";\nimport WalletDb from \"stores/WalletDb\";\n\nexport default class WalletSettings extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            lookupActive: false,\n            resetMessage: null\n        };\n    }\n\n    onLookup() {\n        this.setState({\n            lookupActive: true\n        });\n    }\n\n    onResetBrainkeySequence() {\n        WalletDb.resetBrainKeySequence();\n        this.setState({\n            resetMessage: counterpart.translate(\"wallet.brainkey_reset_success\")\n        });\n    }\n\n    render() {\n        let {lookupActive} = this.state;\n        let {deprecated} = this.props;\n\n        if (deprecated) {\n            return (\n                <div>\n                    <ChangeActiveWallet />\n                    <WalletDelete />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <ChangeActiveWallet />\n                <WalletDelete />\n\n                <section style={{padding: \"15px 0\"}} className=\"block-list\">\n                    <header>\n                        <Translate content=\"wallet.balance_claims\" />:\n                    </header>\n                </section>\n\n                <div style={{paddingBottom: 10}}>\n                    <Translate content=\"settings.lookup_text\" />:\n                </div>\n                <div\n                    className=\"button outline\"\n                    onClick={this.onLookup.bind(this)}\n                >\n                    <Translate content=\"wallet.balance_claim_lookup\" />\n                </div>\n\n                {lookupActive ? <BalanceClaimActive /> : null}\n\n                <section style={{padding: \"15px 0\"}} className=\"block-list\">\n                    <header>\n                        <Translate content=\"wallet.brainkey_seq_reset\" />:\n                    </header>\n                </section>\n                <div style={{paddingBottom: 10}}>\n                    <p>\n                        <Translate\n                            unsafe\n                            content=\"wallet.brainkey_seq_reset_text\"\n                        />\n                    </p>\n                    <div\n                        className=\"button outline\"\n                        onClick={this.onResetBrainkeySequence.bind(this)}\n                    >\n                        <Translate content=\"wallet.brainkey_seq_reset_button\" />\n                    </div>\n                    {this.state.resetMessage ? (\n                        <p style={{paddingTop: 10}} className=\"facolor-success\">\n                            {this.state.resetMessage}\n                        </p>\n                    ) : null}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport WalletChangePassword from \"../Wallet/WalletChangePassword\";\n\nexport default class PasswordSettings extends React.Component {\n    render() {\n        return <WalletChangePassword />;\n    }\n}\n","import React from \"react\";\nimport {BackupRestore} from \"../Wallet/Backup\";\nimport ImportKeys from \"../Wallet/ImportKeys\";\nimport {CreateWalletFromBrainkey} from \"../Wallet/WalletCreate\";\nimport Translate from \"react-translate-component\";\nimport counterpart from \"counterpart\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport RestoreFavorites from \"./RestoreFavorites\";\n\nexport default class RestoreSettings extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            restoreType: 0,\n            types: [\"backup\", \"key\", \"legacy\", \"brainkey\", \"favorites\"]\n        };\n    }\n\n    _setWalletMode() {\n        SettingsActions.changeSetting({\n            setting: \"passwordLogin\",\n            value: false\n        });\n    }\n\n    _changeType(e) {\n        this.setState({\n            restoreType: this.state.types.indexOf(e.target.value)\n        });\n    }\n\n    render() {\n        let {passwordLogin} = this.props;\n\n        if (passwordLogin) {\n            return (\n                <div>\n                    <Translate\n                        content=\"settings.wallet_required\"\n                        component=\"h4\"\n                    />\n                    <p className=\"dark-text-color\">\n                        <Translate content=\"settings.wallet_required_text\" />:\n                    </p>\n\n                    <button className=\"button\" onClick={this._setWalletMode}>\n                        <Translate content=\"settings.enable_wallet\" />\n                    </button>\n                </div>\n            );\n        }\n        let {types, restoreType} = this.state;\n        let options = types.map(type => {\n            return (\n                <option key={type} value={type}>\n                    {counterpart.translate(`settings.backup_${type}`)}{\" \"}\n                </option>\n            );\n        });\n\n        let content;\n\n        switch (types[restoreType]) {\n            case \"backup\":\n                content = (\n                    <div>\n                        <BackupRestore />\n                    </div>\n                );\n                break;\n\n            case \"brainkey\":\n                content = (\n                    <div>\n                        <p style={{maxWidth: \"40rem\", paddingBottom: 10}}>\n                            <Translate content=\"settings.restore_brainkey_text\" />\n                        </p>\n                        <CreateWalletFromBrainkey nested />\n                    </div>\n                );\n                break;\n\n            case \"favorites\":\n                content = (\n                    <div>\n                        <RestoreFavorites />\n                    </div>\n                );\n                break;\n\n            default:\n                content = <ImportKeys privateKey={restoreType === 1} />;\n                break;\n        }\n\n        return (\n            <div>\n                <select\n                    onChange={this._changeType.bind(this)}\n                    className=\"bts-select\"\n                    value={types[restoreType]}\n                >\n                    {options}\n                </select>\n\n                {content}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport notify from \"actions/NotificationActions\";\nimport counterpart from \"counterpart\";\n\nclass RestoreFavorites extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            json: null,\n            error: null\n        };\n    }\n\n    upload(evt) {\n        this.setState({error: false, json: null});\n\n        let file = evt.target.files[0];\n        let reader = new FileReader();\n        reader.onload = evt => {\n            let contents = evt.target.result;\n\n            try {\n                let json = JSON.parse(contents);\n\n                for (var key in json) {\n                    let market = json[key];\n                    let {quote, base} = market;\n\n                    if (!quote || !base)\n                        throw new Error(\"Cannot parse json data.\");\n                }\n\n                this.setState({json});\n                // this.finish();\n            } catch (message) {\n                this.setState({error: true});\n            }\n        };\n        reader.readAsText(file);\n    }\n\n    finish() {\n        const {json} = this.state;\n\n        SettingsActions.clearStarredMarkets();\n\n        for (var key in json) {\n            let market = json[key];\n            let {quote, base} = market;\n\n            SettingsActions.addStarMarket(quote, base);\n        }\n\n        notify.addNotification({\n            message: counterpart(\"settings.backup_favorites_success\"),\n            level: \"success\",\n            autoDismiss: 2\n        });\n    }\n\n    render() {\n        const {state} = this;\n\n        return (\n            <div>\n                <input\n                    type=\"file\"\n                    id=\"file_input\"\n                    accept=\".json\"\n                    style={{\n                        border: \"solid\",\n                        marginBottom: 15\n                    }}\n                    onChange={this.upload.bind(this)}\n                />\n\n                {state.error && (\n                    <h5>\n                        <Translate content=\"settings.backup_favorites_error\" />\n                    </h5>\n                )}\n\n                {state.json && (\n                    <p>\n                        <button\n                            onClick={this.finish.bind(this)}\n                            className=\"button success\"\n                        >\n                            <Translate content=\"settings.backup_favorites_finish\" />\n                        </button>\n                    </p>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default RestoreFavorites;\n","import React from \"react\";\nimport counterpart from \"counterpart\";\nimport Translate from \"react-translate-component\";\nimport SettingsActions from \"actions/SettingsActions\";\n\nexport default class ResetSettings extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            message: null\n        };\n    }\n\n    _setMessage(key) {\n        this.setState({\n            message: counterpart.translate(key)\n        });\n\n        this.timer = setTimeout(() => {\n            this.setState({message: null});\n        }, 4000);\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.timer);\n    }\n\n    render() {\n        return (\n            <section className=\"block-list no-border-bottom\">\n                <header>\n                    <Translate\n                        component=\"span\"\n                        style={{\n                            fontWeight: \"normal\",\n                            fontFamily: \"Roboto-Medium, arial, sans-serif\",\n                            fontStyle: \"normal\"\n                        }}\n                        content={\"settings.reset_text_description\"}\n                        generalName={counterpart.translate(\"settings.general\")}\n                        with={{\n                            generalName: counterpart.translate(\n                                \"settings.general\"\n                            ),\n                            accessName: counterpart.translate(\"settings.access\")\n                        }}\n                    />\n                </header>\n\n                <div\n                    style={{height: 60, width: \"100%\", paddingTop: 20}}\n                    className=\"button\"\n                    onClick={() => {\n                        SettingsActions.clearSettings().then(() => {\n                            this._setMessage(\n                                \"settings.restore_default_success\"\n                            );\n                        });\n                    }}\n                >\n                    {counterpart.translate(\"settings.reset\")}\n                </div>\n\n                <div\n                    className=\"facolor-success\"\n                    style={{marginTop: \"20px\", height: \"18px\"}}\n                >\n                    {this.state.message}\n                </div>\n            </section>\n        );\n    }\n}\n","import React from \"react\";\nimport {BackupCreate} from \"../Wallet/Backup\";\nimport BackupBrainkey from \"../Wallet/BackupBrainkey\";\nimport counterpart from \"counterpart\";\nimport BackupFavorites from \"./BackupFavorites\";\n\nexport default class BackupSettings extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            restoreType: 0,\n            types: [\"backup\", \"brainkey\", \"favorites\"]\n        };\n    }\n\n    _changeType(e) {\n        this.setState({\n            restoreType: this.state.types.indexOf(e.target.value)\n        });\n    }\n\n    render() {\n        let {types, restoreType} = this.state;\n        let options = types.map(type => {\n            return (\n                <option key={type} value={type}>\n                    {counterpart.translate(`settings.backupcreate_${type}`)}{\" \"}\n                </option>\n            );\n        });\n\n        let content;\n\n        switch (types[restoreType]) {\n            case \"backup\":\n                content = <BackupCreate />;\n                break;\n\n            case \"brainkey\":\n                content = <BackupBrainkey />;\n                break;\n\n            case \"favorites\":\n                content = <BackupFavorites />;\n                break;\n\n            default:\n                break;\n        }\n\n        return (\n            <div>\n                <select\n                    onChange={this._changeType.bind(this)}\n                    className=\"bts-select\"\n                    value={types[restoreType]}\n                >\n                    {options}\n                </select>\n\n                {content}\n            </div>\n        );\n    }\n}\n","import {saveAs} from \"file-saver\";\nimport React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\n\nclass BackupFavorites extends React.Component {\n    makeBackup() {\n        let data = this.props.starredMarkets.toJS();\n\n        let blob = new Blob([JSON.stringify(data)], {\n            type: \"application/json; charset=us-ascii\"\n        });\n\n        saveAs(blob, \"favorites.json\");\n    }\n\n    render() {\n        return (\n            <div>\n                <p>\n                    <Translate content=\"settings.backup_favoritestext\" />\n                </p>\n                <button\n                    onClick={this.makeBackup.bind(this)}\n                    className=\"button success\"\n                >\n                    <Translate content=\"settings.backup_favoritesbtn\" />\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default connect(BackupFavorites, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            starredMarkets: SettingsStore.getState().starredMarkets\n        };\n    }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAFA;AAoBA;AApBA;AAuBA;;;;AA1BA;AACA;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;AASA;AAjCA;AAoCA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AAIA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AArEA;AACA;AAuEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AATA;AAaA;AACA;AA3EA;AACA;AA6EA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAKA;AAIA;AAVA;AAYA;AACA;AADA;AAZA;AAiBA;AApBA;AAXA;AAmCA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAMA;AAEA;AACA;AACA;AAGA;AANA;AASA;AAjBA;AANA;AApCA;AA+DA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAZA;AAhEA;AAgFA;;;;AA7YA;AACA;AA+YA;;;;;;;;ACjaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAPA;AAUA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AADA;AATA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AAWA;AAAA;AAAA;AACA;AADA;AAZA;AADA;AAhBA;AAqCA;AAEA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AALA;AAxCA;AACA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAJA;AAMA;AANA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AA1JA;AA4JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AADA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AAUA;AAZA;AADA;AAiBA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAxCA;AA2CA;;;;AA1PA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAeA;AACA;AADA;AAfA;AACA;AAuBA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AATA;AAYA;AAzCA;AADA;AA8CA;;;;AA9EA;AACA;AAgFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AATA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AACA;AAAA;AACA;AADA;AAdA;AA3BA;AAgDA;;;;AArFA;AACA;AADA;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AACA;AADA;AATA;AAcA;AAnBA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AA9BA;AACA;AAgCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAQA;AATA;AAYA;;;;AAnGA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AARA;AAWA;AACA;AAAA;AACA;AADA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AAnBA;AA8BA;;;;AA3FA;AACA;AA6FA;;;;;;;;;;;;;;;;;;;;;;;;ACpGA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAGA;AAJA;AATA;AADA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AATA;AAWA;AAXA;AAcA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAlCA;AA0CA;;;;AAnEA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAQA;AATA;AAYA;;;;AAzDA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAJA;AAYA;;;;AAzBA;AACA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;A","sourceRoot":""}