{"version":3,"file":"dashboard~dashboard-accounts.33bd708382639e752808.js","sources":["webpack:///app/components/Dashboard/DashboardList.jsx"],"sourcesContent":["import React from \"react\";\nimport Immutable from \"immutable\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport WalletUnlockStore from \"stores/WalletUnlockStore\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AccountActions from \"actions/AccountActions\";\nimport Icon from \"../Icon/Icon\";\nimport {ChainStore} from \"bitsharesjs\";\nimport TotalBalanceValue from \"../Utility/TotalBalanceValue\";\nimport AccountStore from \"stores/AccountStore\";\nimport counterpart from \"counterpart\";\nimport WalletDb from \"stores/WalletDb\";\nimport PropTypes from \"prop-types\";\nimport {withRouter} from \"react-router-dom\";\n\nconst starSort = function(a, b, inverse, starredAccounts) {\n    let aName = a.get(\"name\");\n    let bName = b.get(\"name\");\n    let aStarred = starredAccounts.has(aName);\n    let bStarred = starredAccounts.has(bName);\n\n    if (aStarred && !bStarred) {\n        return inverse ? -1 : 1;\n    } else if (bStarred && !aStarred) {\n        return inverse ? 1 : -1;\n    } else {\n        if (aName > bName) {\n            return inverse ? 1 : -1;\n        } else if (aName < bName) {\n            return inverse ? -1 : 1;\n        } else {\n            return utils.sortText(aName, bName, !inverse);\n        }\n    }\n};\n\nclass DashboardList extends React.Component {\n    static propTypes = {\n        accounts: ChainTypes.ChainAccountsList.isRequired,\n        ignoredAccounts: ChainTypes.ChainAccountsList\n    };\n\n    static defaultProps = {\n        width: 2000,\n        compact: false\n    };\n\n    constructor(props) {\n        super();\n        let inputValue = props.viewSettings.get(\"marketLookupInput\");\n        let symbols = inputValue ? inputValue.split(\":\") : [null];\n        let quote = symbols[0];\n        let base = symbols.length === 2 ? symbols[1] : null;\n\n        this.state = {\n            inverseSort: props.viewSettings.get(\"dashboardSortInverse\", true),\n            sortBy: props.viewSettings.get(\"dashboardSort\", \"star\"),\n            dashboardFilter: props.viewSettings.get(\"dashboardFilter\", \"\")\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            !utils.are_equal_shallow(nextProps.accounts, this.props.accounts) ||\n            nextProps.isContactsList !== this.props.isContactsList ||\n            nextProps.showMyAccounts !== this.props.showMyAccounts ||\n            nextProps.width !== this.props.width ||\n            nextProps.showIgnored !== this.props.showIgnored ||\n            nextProps.locked !== this.props.locked ||\n            nextProps.passwordAccount !== this.props.passwordAccount ||\n            !utils.are_equal_shallow(\n                nextProps.starredAccounts,\n                this.props.starredAccounts\n            ) ||\n            !utils.are_equal_shallow(nextState, this.state)\n        );\n    }\n\n    _onStar(account, isStarred, e) {\n        e.preventDefault();\n        if (!isStarred) {\n            AccountActions.addStarAccount(account);\n        } else {\n            AccountActions.removeStarAccount(account);\n        }\n    }\n\n    _goAccount(name, tab) {\n        this.props.history.push(`/account/${name}`);\n        SettingsActions.changeViewSetting({\n            overviewTab: tab\n        });\n    }\n\n    _createAccount() {\n        this.props.history.push(\"/create-account/wallet\");\n    }\n\n    _onFilter(e) {\n        this.setState({dashboardFilter: e.target.value.toLowerCase()});\n\n        SettingsActions.changeViewSetting({\n            dashboardFilter: e.target.value.toLowerCase()\n        });\n    }\n\n    _setSort(field) {\n        let inverse =\n            field === this.state.sortBy\n                ? !this.state.inverseSort\n                : this.state.inverseSort;\n        this.setState({\n            sortBy: field,\n            inverseSort: inverse\n        });\n\n        SettingsActions.changeViewSetting({\n            dashboardSort: field,\n            dashboardSortInverse: inverse\n        });\n    }\n\n    _onAddContact(account) {\n        AccountActions.addAccountContact(account);\n    }\n\n    _onRemoveContact(account) {\n        AccountActions.removeAccountContact(account);\n    }\n\n    _renderList(accounts, isHiddenAccountsList) {\n        const {\n            width,\n            starredAccounts,\n            isContactsList,\n            passwordAccount\n        } = this.props;\n        const {dashboardFilter, sortBy, inverseSort} = this.state;\n        let balanceList = Immutable.List();\n\n        return accounts\n            .filter(account => {\n                if (!account) return false;\n                let accountName = account.get(\"name\");\n                let isMyAccount =\n                    AccountStore.isMyAccount(account) ||\n                    accountName === passwordAccount;\n                /*\n                Display all accounts from contacts list\n                Display only my Accounts for Accounts page\n                */\n                return isContactsList\n                    ? true\n                    : isMyAccount === this.props.showMyAccounts;\n            })\n            .filter(a => {\n                if (!a) return false;\n                return (\n                    a\n                        .get(\"name\")\n                        .toLowerCase()\n                        .indexOf(dashboardFilter) !== -1\n                );\n            })\n            .sort((a, b) => {\n                switch (sortBy) {\n                    case \"star\":\n                        return starSort(a, b, inverseSort, starredAccounts);\n                        break;\n\n                    case \"name\":\n                        return utils.sortText(\n                            a.get(\"name\"),\n                            b.get(\"name\"),\n                            inverseSort\n                        );\n                        break;\n\n                    default:\n                        break;\n                }\n            })\n            .map(account => {\n                if (account) {\n                    let collateral = {},\n                        debt = {},\n                        openOrders = {};\n                    balanceList = balanceList.clear();\n\n                    let accountName = account.get(\"name\");\n                    let isLTM =\n                        account.get(\"lifetime_referrer_name\") === accountName;\n\n                    if (account.get(\"orders\")) {\n                        account.get(\"orders\").forEach((orderID, key) => {\n                            let order = ChainStore.getObject(orderID);\n                            if (order) {\n                                let orderAsset = order.getIn([\n                                    \"sell_price\",\n                                    \"base\",\n                                    \"asset_id\"\n                                ]);\n                                if (!openOrders[orderAsset]) {\n                                    openOrders[orderAsset] = parseInt(\n                                        order.get(\"for_sale\"),\n                                        10\n                                    );\n                                } else {\n                                    openOrders[orderAsset] += parseInt(\n                                        order.get(\"for_sale\"),\n                                        10\n                                    );\n                                }\n                            }\n                        });\n                    }\n\n                    // console.log(\"openOrders:\", openOrders);\n\n                    if (account.get(\"call_orders\")) {\n                        account.get(\"call_orders\").forEach((callID, key) => {\n                            let position = ChainStore.getObject(callID);\n                            if (position) {\n                                let collateralAsset = position.getIn([\n                                    \"call_price\",\n                                    \"base\",\n                                    \"asset_id\"\n                                ]);\n                                if (!collateral[collateralAsset]) {\n                                    collateral[collateralAsset] = parseInt(\n                                        position.get(\"collateral\"),\n                                        10\n                                    );\n                                } else {\n                                    collateral[collateralAsset] += parseInt(\n                                        position.get(\"collateral\"),\n                                        10\n                                    );\n                                }\n                                let debtAsset = position.getIn([\n                                    \"call_price\",\n                                    \"quote\",\n                                    \"asset_id\"\n                                ]);\n                                if (!debt[debtAsset]) {\n                                    debt[debtAsset] = parseInt(\n                                        position.get(\"debt\"),\n                                        10\n                                    );\n                                } else {\n                                    debt[debtAsset] += parseInt(\n                                        position.get(\"debt\"),\n                                        10\n                                    );\n                                }\n                            }\n                        });\n                    }\n\n                    let account_balances = account.get(\"balances\");\n                    if (account.get(\"balances\")) {\n                        account_balances.forEach(balance => {\n                            let balanceAmount = ChainStore.getObject(balance);\n                            if (\n                                !balanceAmount ||\n                                !balanceAmount.get(\"balance\")\n                            ) {\n                                return null;\n                            }\n                            balanceList = balanceList.push(balance);\n                        });\n                    }\n\n                    let isMyAccount =\n                        AccountStore.isMyAccount(account) ||\n                        accountName === passwordAccount;\n\n                    let isStarred = starredAccounts.has(accountName);\n                    let starClass = isStarred ? \"gold-star\" : \"grey-star\";\n\n                    return (\n                        <tr key={accountName}>\n                            <td\n                                className=\"clickable\"\n                                onClick={this._onStar.bind(\n                                    this,\n                                    accountName,\n                                    isStarred\n                                )}\n                            >\n                                <Icon\n                                    className={starClass}\n                                    name=\"fi-star\"\n                                    title=\"icons.fi_star.account\"\n                                />\n                            </td>\n                            {isContactsList\n                                ? (isHiddenAccountsList && (\n                                      <td\n                                          onClick={this._onAddContact.bind(\n                                              this,\n                                              accountName\n                                          )}\n                                      >\n                                          <Icon\n                                              name=\"plus-circle\"\n                                              title=\"icons.plus_circle.add_contact\"\n                                          />\n                                      </td>\n                                  )) || (\n                                      <td\n                                          onClick={this._onRemoveContact.bind(\n                                              this,\n                                              accountName\n                                          )}\n                                      >\n                                          <Icon\n                                              name=\"minus-circle\"\n                                              title=\"icons.minus_circle.remove_contact\"\n                                          />\n                                      </td>\n                                  )\n                                : null}\n                            <td style={{textAlign: \"left\"}}>\n                                {account.get(\"id\")}\n                            </td>\n                            <td\n                                style={{textAlign: \"left\", paddingLeft: 10}}\n                                onClick={this._goAccount.bind(\n                                    this,\n                                    accountName,\n                                    0\n                                )}\n                                className={\n                                    \"clickable\" +\n                                    (isMyAccount ? \" my-account\" : \"\")\n                                }\n                            >\n                                <span className={isLTM ? \"lifetime\" : \"\"}>\n                                    {accountName}\n                                </span>\n                            </td>\n                            <td\n                                className=\"clickable\"\n                                onClick={this._goAccount.bind(\n                                    this,\n                                    accountName,\n                                    1\n                                )}\n                                style={{textAlign: \"right\"}}\n                            >\n                                <TotalBalanceValue\n                                    noTip\n                                    balances={[]}\n                                    openOrders={openOrders}\n                                />\n                            </td>\n                            {width >= 750 ? (\n                                <td\n                                    className=\"clickable\"\n                                    onClick={this._goAccount.bind(\n                                        this,\n                                        accountName,\n                                        2\n                                    )}\n                                    style={{textAlign: \"right\"}}\n                                >\n                                    <TotalBalanceValue\n                                        noTip\n                                        balances={[]}\n                                        collateral={collateral}\n                                    />\n                                </td>\n                            ) : null}\n                            {width >= 1200 ? (\n                                <td\n                                    className=\"clickable\"\n                                    onClick={this._goAccount.bind(\n                                        this,\n                                        accountName,\n                                        2\n                                    )}\n                                    style={{textAlign: \"right\"}}\n                                >\n                                    <TotalBalanceValue\n                                        noTip\n                                        balances={[]}\n                                        debt={debt}\n                                    />\n                                </td>\n                            ) : null}\n                            <td\n                                className=\"clickable\"\n                                onClick={this._goAccount.bind(\n                                    this,\n                                    accountName,\n                                    0\n                                )}\n                                style={{textAlign: \"right\"}}\n                            >\n                                <TotalBalanceValue\n                                    noTip\n                                    balances={balanceList}\n                                    collateral={collateral}\n                                    debt={debt}\n                                    openOrders={openOrders}\n                                />\n                            </td>\n                        </tr>\n                    );\n                }\n            });\n    }\n\n    render() {\n        let {width, showIgnored, isContactsList} = this.props;\n        const {dashboardFilter} = this.state;\n\n        let includedAccounts = this._renderList(this.props.accounts);\n\n        let hiddenAccounts = this._renderList(this.props.ignoredAccounts, true);\n\n        let filterText = !isContactsList\n            ? counterpart.translate(\"explorer.accounts.filter\")\n            : counterpart.translate(\"explorer.accounts.filter_contacts\");\n        filterText += \"...\";\n\n        let hasLocalWallet = !!WalletDb.getWallet();\n\n        return (\n            <div style={this.props.style}>\n                {!this.props.compact ? (\n                    <section style={{paddingTop: \"1rem\", paddingLeft: \"2rem\"}}>\n                        <input\n                            placeholder={filterText}\n                            style={{maxWidth: \"20rem\", display: \"inline-block\"}}\n                            type=\"text\"\n                            value={dashboardFilter}\n                            onChange={this._onFilter.bind(this)}\n                        />\n                        {hasLocalWallet && !isContactsList ? (\n                            <div\n                                onClick={this._createAccount.bind(this)}\n                                style={{\n                                    display: \"inline-block\",\n                                    marginLeft: 5,\n                                    marginBottom: \"1rem\"\n                                }}\n                                className=\"button small\"\n                            >\n                                <Translate content=\"header.create_account\" />\n                            </div>\n                        ) : null}\n                        {hiddenAccounts && hiddenAccounts.length ? (\n                            <div\n                                onClick={this.props.onToggleIgnored}\n                                style={{\n                                    display: \"inline-block\",\n                                    float: \"right\",\n                                    marginRight: \"20px\"\n                                }}\n                                className=\"button small\"\n                            >\n                                <Translate\n                                    content={`account.${\n                                        this.props.showIgnored\n                                            ? \"hide_ignored\"\n                                            : \"show_ignored\"\n                                    }`}\n                                />\n                            </div>\n                        ) : null}\n                    </section>\n                ) : null}\n                <table\n                    className=\"table table-hover dashboard-table\"\n                    style={{fontSize: \"0.85rem\"}}\n                >\n                    {!this.props.compact ? (\n                        <thead>\n                            <tr>\n                                <th\n                                    onClick={this._setSort.bind(this, \"star\")}\n                                    className=\"clickable\"\n                                >\n                                    <Icon\n                                        className=\"grey-star\"\n                                        name=\"fi-star\"\n                                        title=\"icons.fi_star.sort_accounts\"\n                                    />\n                                </th>\n                                {isContactsList ? (\n                                    <th>\n                                        <Icon\n                                            name=\"user\"\n                                            title=\"icons.user.account\"\n                                        />\n                                    </th>\n                                ) : null}\n                                <th style={{textAlign: \"left\"}}>ID</th>\n                                <th\n                                    style={{textAlign: \"left\", paddingLeft: 10}}\n                                    onClick={this._setSort.bind(this, \"name\")}\n                                    className=\"clickable\"\n                                >\n                                    <Translate content=\"header.account\" />\n                                </th>\n                                <th style={{textAlign: \"right\"}}>\n                                    <Translate content=\"account.open_orders\" />\n                                </th>\n                                {width >= 750 ? (\n                                    <th style={{textAlign: \"right\"}}>\n                                        <Translate content=\"account.as_collateral\" />\n                                    </th>\n                                ) : null}\n                                {width >= 1200 ? (\n                                    <th style={{textAlign: \"right\"}}>\n                                        <Translate content=\"transaction.borrow_amount\" />\n                                    </th>\n                                ) : null}\n                                <th\n                                    style={{\n                                        textAlign: \"right\",\n                                        marginRight: 20\n                                    }}\n                                >\n                                    <Translate content=\"account.total_value\" />\n                                </th>\n                            </tr>\n                        </thead>\n                    ) : null}\n                    <tbody>\n                        {includedAccounts}\n                        {showIgnored && hiddenAccounts.length ? (\n                            <tr\n                                className=\"dashboard-table--hiddenAccounts\"\n                                style={{backgroundColor: \"transparent\"}}\n                                key=\"hidden\"\n                            >\n                                <td colSpan=\"8\">\n                                    {counterpart.translate(\n                                        \"account.hidden_accounts_row\"\n                                    )}:\n                                </td>\n                            </tr>\n                        ) : null}\n                        {showIgnored && hiddenAccounts}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\nDashboardList = BindToChainState(DashboardList);\n\nclass AccountsListWrapper extends React.Component {\n    render() {\n        return <DashboardList {...this.props} />;\n    }\n}\nAccountsListWrapper = withRouter(AccountsListWrapper);\n\nexport default connect(\n    AccountsListWrapper,\n    {\n        listenTo() {\n            return [SettingsStore, WalletUnlockStore, AccountStore];\n        },\n        getProps() {\n            return {\n                locked: WalletUnlockStore.getState().locked,\n                starredAccounts: AccountStore.getState().starredAccounts,\n                viewSettings: SettingsStore.getState().viewSettings\n            };\n        }\n    }\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAPA;AAYA;AACA;;;AACA;AACA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;AAIA;AAGA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAdA;AAgBA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AAKA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAQA;AACA;AACA;AACA;AAHA;AARA;AAcA;AAEA;AAAA;AACA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAYA;AAAA;AACA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAaA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAKA;AAPA;AAYA;AAAA;AAAA;AACA;AADA;AAZA;AAgBA;AAAA;AAAA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AAHA;AATA;AAeA;AACA;AAAA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AAHA;AATA;AAgBA;AACA;AAAA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AAHA;AATA;AAgBA;AAAA;AAAA;AACA;AACA;AAKA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AATA;AA9GA;AAiIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AATA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AASA;AACA;AADA;AATA;AAtBA;AA0CA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAOA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AANA;AAxCA;AADA;AAoDA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AALA;AAYA;AAfA;AAzDA;AA5CA;AAyHA;;;;AAngBA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAFA;AACA;AA8fA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAVA;;;;A","sourceRoot":""}