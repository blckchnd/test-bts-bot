{"version":3,"file":"deposit-withdraw.eeb88794f3e20f5fdd66.js","sources":["webpack:///app/components/Utility/AssetImage.jsx","webpack:///app/components/Account/AccountDepositWithdraw.jsx","webpack:///app/components/DepositWithdraw/BlockTradesGateway.jsx","webpack:///app/components/DepositWithdraw/blocktrades/BlockTradesGatewayDepositRequest.jsx","webpack:///app/components/DepositWithdraw/blocktrades/WithdrawModalBlocktrades.jsx","webpack:///app/components/Account/AccountBalance.jsx","webpack:///app/components/DepositWithdraw/openledger/OpenLedgerFiatDepositWithdrawal.jsx","webpack:///app/components/DepositWithdraw/openledger/DepositFiatOpenLedger.jsx","webpack:///app/components/DepositWithdraw/openledger/WithdrawFiatOpenLedger.jsx","webpack:///app/components/DepositWithdraw/openledger/OpenLedgerFiatTransactionHistory.jsx","webpack:///app/components/DepositWithdraw/blocktrades/BlockTradesBridgeDepositRequest.jsx","webpack:///app/components/DepositWithdraw/BitKapital.jsx","webpack:///app/components/DepositWithdraw/rudex/RuDexGateway.jsx","webpack:///app/components/DepositWithdraw/rudex/RuDexGatewayDepositRequest.jsx","webpack:///app/components/DepositWithdraw/rudex/RuDexWithdrawModal.jsx","webpack:///app/lib/common/RuDexMethods.js","webpack:///app/lib/common/RuDexDepositAddressCache.js","webpack:///app/components/DepositWithdraw/rudex/RuDexFiatDepositWithdrawal.jsx","webpack:///app/components/DepositWithdraw/gdex/GdexGateway.jsx","webpack:///app/lib/common/gdexMethods.js","webpack:///app/components/DepositWithdraw/gdex/GdexGatewayInfo.jsx","webpack:///app/lib/common/GdexCache.js","webpack:///app/components/DepositWithdraw/gdex/GdexWithdrawModal.jsx","webpack:///app/components/DepositWithdraw/gdex/GdexHistory.jsx","webpack:///app/components/DepositWithdraw/gdex/GdexAgreementModal.jsx","webpack:///buffer (ignored)","webpack:///crypto (ignored)","webpack:///app/components/DepositWithdraw/winex/WinexGateway.jsx","webpack:///app/components/DepositWithdraw/winex/WinexRecentTransactions.jsx","webpack:///app/components/DepositWithdraw/winex/WinexGatewayRequest.jsx","webpack:///app/components/DepositWithdraw/winex/WinexWithdrawModal.jsx"],"sourcesContent":["import React from \"react\";\nimport AssetWrapper from \"./AssetWrapper\";\nimport PropTypes from \"prop-types\";\n\nclass AssetImage extends React.Component {\n    static propTypes = {\n        replaceNoneToBts: PropTypes.bool,\n        maxWidth: PropTypes.number\n    };\n\n    static defaultProps = {\n        replaceNoneToBts: true,\n        maxWidth: 20\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imgError: false\n        };\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            this.props.asset !== np.asset ||\n            this.props.maxWidth !== np.maxWidth ||\n            this.props.whiteList !== np.whiteList ||\n            this.state.imgError !== ns.imgError\n        );\n    }\n\n    _onError(imgName) {\n        if (!this.state.imgError) {\n            if (this.props.replaceNoneToBts)\n                this.refs[\n                    imgName.toLowerCase()\n                ].src = `${__BASE_URL__}asset-symbols/bts.png`;\n            else this.refs[imgName.toLowerCase()].remove();\n            this.setState({\n                imgError: true\n            });\n        }\n    }\n\n    render() {\n        let {asset} = this.props;\n\n        function getImageName(asset) {\n            let symbol = asset.get(\"symbol\");\n            return symbol;\n            // if (symbol === \"OPEN.BTC\" || symbol === \"GDEX.BTC\") return symbol;\n            // if (symbol.startsWith(\"ESCROW.\")) return symbol;\n            // let imgName = asset.get(\"symbol\").split(\".\");\n            //return imgName.length === 2 ? imgName[1] : imgName[0];\n        }\n\n        const imgName = getImageName(asset);\n\n        return (\n            <img\n                ref={imgName.toLowerCase()}\n                className=\"column-hide-small\"\n                onError={this._onError.bind(this, imgName)}\n                style={{maxWidth: this.props.maxWidth, marginRight: 5}}\n                src={`${__BASE_URL__}asset-symbols/${imgName.toLowerCase()}.png`}\n            />\n        );\n    }\n}\n\nAssetImage = AssetWrapper(AssetImage);\n\nexport default class AssetImageWrapper extends React.Component {\n    render() {\n        return <AssetImage {...this.props} asset={this.props.name} />;\n    }\n}\n","import React from \"react\";\nimport {connect} from \"alt-react\";\nimport accountUtils from \"common/account_utils\";\nimport {updateGatewayBackers} from \"common/gatewayUtils\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport BlockTradesGateway from \"../DepositWithdraw/BlockTradesGateway\";\nimport OpenLedgerFiatDepositWithdrawal from \"../DepositWithdraw/openledger/OpenLedgerFiatDepositWithdrawal\";\nimport OpenLedgerFiatTransactionHistory from \"../DepositWithdraw/openledger/OpenLedgerFiatTransactionHistory\";\nimport BlockTradesBridgeDepositRequest from \"../DepositWithdraw/blocktrades/BlockTradesBridgeDepositRequest\";\nimport HelpContent from \"../Utility/HelpContent\";\nimport AccountStore from \"stores/AccountStore\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport {settingsAPIs} from \"api/apiConfig\";\nimport BitKapital from \"../DepositWithdraw/BitKapital\";\nimport RuDexGateway from \"../DepositWithdraw/rudex/RuDexGateway\";\nimport RuDexFiatDepositWithdrawal from \"../DepositWithdraw/rudex/RuDexFiatDepositWithdrawal\";\nimport GatewayStore from \"stores/GatewayStore\";\nimport AccountImage from \"../Account/AccountImage\";\nimport GdexGateway from \"../DepositWithdraw/gdex/GdexGateway\";\nimport WinexGateway from \"../DepositWithdraw/winex/WinexGateway\";\nimport PropTypes from \"prop-types\";\n\nclass AccountDepositWithdraw extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        contained: PropTypes.bool\n    };\n\n    static defaultProps = {\n        contained: false\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            olService: props.viewSettings.get(\"olService\", \"gateway\"),\n            rudexService: props.viewSettings.get(\"rudexService\", \"gateway\"),\n            btService: props.viewSettings.get(\"btService\", \"bridge\"),\n            metaService: props.viewSettings.get(\"metaService\", \"bridge\"),\n            activeService: props.viewSettings.get(\"activeService\", 0),\n            olNotice1Informed: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (\n            nextProps.account !== this.props.account ||\n            nextProps.servicesDown !== this.props.servicesDown ||\n            !utils.are_equal_shallow(\n                nextProps.blockTradesBackedCoins,\n                this.props.blockTradesBackedCoins\n            ) ||\n            !utils.are_equal_shallow(\n                nextProps.openLedgerBackedCoins,\n                this.props.openLedgerBackedCoins\n            ) ||\n            nextState.olService !== this.state.olService ||\n            nextState.rudexService !== this.state.rudexService ||\n            nextState.btService !== this.state.btService ||\n            nextState.metaService !== this.state.metaService ||\n            nextState.activeService !== this.state.activeService ||\n            nextState.olNotice1Informed !== this.state.olNotice1Informed\n        );\n    }\n\n    componentWillMount() {\n        accountUtils.getFinalFeeAsset(this.props.account, \"transfer\");\n    }\n\n    toggleOLService(service) {\n        this.setState({\n            olService: service\n        });\n\n        SettingsActions.changeViewSetting({\n            olService: service\n        });\n    }\n\n    toggleRuDEXService(service) {\n        this.setState({\n            rudexService: service\n        });\n\n        SettingsActions.changeViewSetting({\n            rudexService: service\n        });\n    }\n\n    toggleBTService(service) {\n        this.setState({\n            btService: service\n        });\n\n        SettingsActions.changeViewSetting({\n            btService: service\n        });\n    }\n\n    onolNotice1Informed() {\n        this.setState({\n            olNotice1Informed: !this.state.olNotice1Informed\n        });\n    }\n\n    toggleMetaService(service) {\n        this.setState({\n            metaService: service\n        });\n\n        SettingsActions.changeViewSetting({\n            metaService: service\n        });\n    }\n\n    onSetService(e) {\n        //let index = this.state.services.indexOf(e.target.value);\n        this.setState({\n            activeService: parseInt(e.target.value)\n        });\n\n        SettingsActions.changeViewSetting({\n            activeService: parseInt(e.target.value)\n        });\n    }\n\n    renderServices(openLedgerGatewayCoins, rudexGatewayCoins) {\n        //let services = [\"Openledger (OPEN.X)\", \"BlockTrades (TRADE.X)\", \"Transwiser\", \"BitKapital\"];\n        let serList = [];\n        let {account} = this.props;\n        let {\n            olService,\n            btService,\n            rudexService,\n            olNotice1Informed\n        } = this.state;\n\n        serList.push({\n            name: \"RuDEX (RUDEX.X)\",\n            template: (\n                <div className=\"content-block\">\n                    <div\n                        className=\"service-selector\"\n                        style={{marginBottom: \"2rem\"}}\n                    >\n                        <ul className=\"button-group segmented no-margin\">\n                            <li\n                                onClick={this.toggleRuDEXService.bind(\n                                    this,\n                                    \"gateway\"\n                                )}\n                                className={\n                                    rudexService === \"gateway\"\n                                        ? \"is-active\"\n                                        : \"\"\n                                }\n                            >\n                                <a>\n                                    <Translate content=\"gateway.gateway\" />\n                                </a>\n                            </li>\n                            <li\n                                onClick={this.toggleRuDEXService.bind(\n                                    this,\n                                    \"fiat\"\n                                )}\n                                className={\n                                    rudexService === \"fiat\" ? \"is-active\" : \"\"\n                                }\n                            >\n                                <Translate\n                                    component=\"a\"\n                                    content=\"gateway.fiat\"\n                                />\n                            </li>\n                        </ul>\n                    </div>\n\n                    {rudexService === \"gateway\" && rudexGatewayCoins.length ? (\n                        <RuDexGateway\n                            account={account}\n                            coins={rudexGatewayCoins}\n                        />\n                    ) : null}\n\n                    {rudexService === \"fiat\" ? (\n                        <div>\n                            <RuDexFiatDepositWithdrawal account={account} />\n                        </div>\n                    ) : null}\n                </div>\n            )\n        });\n\n        serList.push({\n            name: \"Openledger (OPEN.X)\",\n            template: (\n                <div className=\"content-block\">\n                    {/* <div className=\"float-right\">\n                            <a href=\"https://www.ccedk.com/\" target=\"__blank\" rel=\"noopener noreferrer\"><Translate content=\"gateway.website\" /></a>\n                        </div> */}\n                    <div\n                        className=\"service-selector\"\n                        style={{marginBottom: \"2rem\"}}\n                    >\n                        <ul className=\"button-group segmented no-margin\">\n                            <li\n                                onClick={this.toggleOLService.bind(\n                                    this,\n                                    \"gateway\"\n                                )}\n                                className={\n                                    olService === \"gateway\" ? \"is-active\" : \"\"\n                                }\n                            >\n                                <a>\n                                    <Translate content=\"gateway.gateway\" />\n                                </a>\n                            </li>\n                            <li\n                                onClick={this.toggleOLService.bind(\n                                    this,\n                                    \"fiat\"\n                                )}\n                                className={\n                                    olService === \"fiat\" ? \"is-active\" : \"\"\n                                }\n                            >\n                                <Translate\n                                    component=\"a\"\n                                    content=\"gateway.fiat\"\n                                />\n                            </li>\n                        </ul>\n                    </div>\n\n                    {olService === \"gateway\" &&\n                    openLedgerGatewayCoins.length ? (\n                        <div>\n                            <p>\n                                <Translate\n                                    style={{\n                                        color: \"darkred\",\n                                        marginBottom: \"1em\",\n                                        display: \"block\"\n                                    }}\n                                    component=\"h5\"\n                                    content=\"gateway.rudex.openledger_notice1\"\n                                />\n                                <a\n                                    href=\"https://blog.openledger.info/2017/12/18/openledger-official-web-sites-get-updates-by-the-first\"\n                                    target=\"_blank\"\n                                >\n                                    https://blog.openledger.info/2017/12/18/openledger-official-web-sites-get-updates-by-the-first\n                                </a>\n                            </p>\n\n                            <p>\n                                <h5>\n                                    <input\n                                        type=\"checkbox\"\n                                        defaultChecked={\n                                            this.state.olNotice1Informed\n                                        }\n                                        onChange={this.onolNotice1Informed.bind(\n                                            this\n                                        )}\n                                    />{\" \"}\n                                    -{\" \"}\n                                    <Translate content=\"gateway.rudex.openledger_notice1_informed\" />\n                                </h5>\n                            </p>\n\n                            <hr />\n                            {olNotice1Informed ? (\n                                <BlockTradesGateway\n                                    account={account}\n                                    coins={openLedgerGatewayCoins}\n                                    provider=\"openledger\"\n                                />\n                            ) : null}\n                        </div>\n                    ) : null}\n\n                    {olService === \"fiat\" ? (\n                        <div>\n                            <div style={{paddingBottom: 15}}>\n                                <Translate\n                                    component=\"h5\"\n                                    content=\"gateway.fiat_text\"\n                                    unsafe\n                                />\n                            </div>\n\n                            <OpenLedgerFiatDepositWithdrawal\n                                rpc_url={settingsAPIs.RPC_URL}\n                                account={account}\n                                issuer_account=\"openledger-fiat\"\n                            />\n                            <OpenLedgerFiatTransactionHistory\n                                rpc_url={settingsAPIs.RPC_URL}\n                                account={account}\n                            />\n                        </div>\n                    ) : null}\n                </div>\n            )\n        });\n\n        serList.push({\n            name: \"BlockTrades\",\n            template: (\n                <div>\n                    <div className=\"content-block\">\n                        {/* <div className=\"float-right\"><a href=\"https://blocktrades.us\" target=\"__blank\" rel=\"noopener noreferrer\"><Translate content=\"gateway.website\" /></a></div> */}\n\n                        <div\n                            className=\"service-selector\"\n                            style={{marginBottom: \"2rem\"}}\n                        >\n                            <ul className=\"button-group segmented no-margin\">\n                                <li\n                                    onClick={this.toggleBTService.bind(\n                                        this,\n                                        \"bridge\"\n                                    )}\n                                    className={\n                                        btService === \"bridge\"\n                                            ? \"is-active\"\n                                            : \"\"\n                                    }\n                                >\n                                    <a>\n                                        <Translate content=\"gateway.bridge\" />\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n\n                        <BlockTradesBridgeDepositRequest\n                            gateway=\"blocktrades\"\n                            issuer_account=\"blocktrades\"\n                            account={account}\n                            initial_deposit_input_coin_type=\"btc\"\n                            initial_deposit_output_coin_type=\"bts\"\n                            initial_deposit_estimated_input_amount=\"1.0\"\n                            initial_withdraw_input_coin_type=\"bts\"\n                            initial_withdraw_output_coin_type=\"btc\"\n                            initial_withdraw_estimated_input_amount=\"100000\"\n                            initial_conversion_input_coin_type=\"bts\"\n                            initial_conversion_output_coin_type=\"bitbtc\"\n                            initial_conversion_estimated_input_amount=\"1000\"\n                        />\n                    </div>\n                    <div className=\"content-block\" />\n                </div>\n            )\n        });\n\n        serList.push({\n            name: \"BitKapital\",\n            template: (\n                <BitKapital\n                    viewSettings={this.props.viewSettings}\n                    account={account}\n                />\n            )\n        });\n\n        serList.push({\n            name: \"GDEX\",\n            template: (\n                <div>\n                    <GdexGateway account={account} provider={\"gdex\"} />\n                </div>\n            )\n        });\n\n        serList.push({\n            name: \"Winex\",\n            template: (\n                <div>\n                    <WinexGateway account={account} provider=\"Winex\" />\n                </div>\n            )\n        });\n\n        return serList;\n    }\n\n    render() {\n        let {account, servicesDown} = this.props;\n        let {activeService} = this.state;\n\n        let openLedgerGatewayCoins = this.props.openLedgerBackedCoins\n            .map(coin => {\n                return coin;\n            })\n            .sort((a, b) => {\n                if (a.symbol < b.symbol) return -1;\n                if (a.symbol > b.symbol) return 1;\n                return 0;\n            });\n\n        let rudexGatewayCoins = this.props.rudexBackedCoins\n            .map(coin => {\n                return coin;\n            })\n            .sort((a, b) => {\n                if (a.symbol < b.symbol) return -1;\n                if (a.symbol > b.symbol) return 1;\n                return 0;\n            });\n\n        let services = this.renderServices(\n            openLedgerGatewayCoins,\n            rudexGatewayCoins\n        );\n\n        let options = services.map((services_obj, index) => {\n            return (\n                <option key={index} value={index}>\n                    {services_obj.name}\n                </option>\n            );\n        });\n\n        const serviceNames = [\n            \"RUDEX\",\n            \"Winex\",\n            \"GDEX\",\n            \"OPEN\",\n            \"TRADE\",\n            \"BITKAPITAL\"\n        ];\n        const currentServiceName = serviceNames[activeService];\n        const currentServiceDown = servicesDown.get(currentServiceName);\n\n        return (\n            <div\n                className={\n                    this.props.contained ? \"grid-content\" : \"grid-container\"\n                }\n            >\n                <div\n                    className={this.props.contained ? \"\" : \"grid-content\"}\n                    style={{paddingTop: \"2rem\"}}\n                >\n                    <Translate content=\"gateway.title\" component=\"h2\" />\n                    <div className=\"grid-block vertical medium-horizontal no-margin no-padding\">\n                        <div className=\"medium-6 show-for-medium\">\n                            <HelpContent\n                                path=\"components/DepositWithdraw\"\n                                section=\"deposit-short\"\n                            />\n                        </div>\n                        <div className=\"medium-5 medium-offset-1\">\n                            <HelpContent\n                                account={account.get(\"name\")}\n                                path=\"components/DepositWithdraw\"\n                                section=\"receive\"\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className=\"grid-block vertical medium-horizontal no-margin no-padding\">\n                            <div className=\"medium-6 small-order-2 medium-order-1\">\n                                <Translate\n                                    component=\"label\"\n                                    className=\"left-label\"\n                                    content=\"gateway.service\"\n                                />\n                                <select\n                                    onChange={this.onSetService.bind(this)}\n                                    className=\"bts-select\"\n                                    value={activeService}\n                                >\n                                    {options}\n                                </select>\n                                {currentServiceDown ? (\n                                    <Translate\n                                        style={{\n                                            color: \"red\",\n                                            marginBottom: \"1em\",\n                                            display: \"block\"\n                                        }}\n                                        content={`gateway.unavailable_${currentServiceName}`}\n                                    />\n                                ) : null}\n                            </div>\n                            <div\n                                className=\"medium-5 medium-offset-1 small-order-1 medium-order-2\"\n                                style={{paddingBottom: 20}}\n                            >\n                                <Translate\n                                    component=\"label\"\n                                    className=\"left-label\"\n                                    content=\"gateway.your_account\"\n                                />\n                                <div className=\"inline-label\">\n                                    <AccountImage\n                                        size={{height: 40, width: 40}}\n                                        account={account.get(\"name\")}\n                                        custom_image={null}\n                                    />\n                                    <input\n                                        type=\"text\"\n                                        value={account.get(\"name\")}\n                                        placeholder={null}\n                                        disabled\n                                        onChange={() => {}}\n                                        onKeyDown={() => {}}\n                                        tabIndex={1}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"grid-content no-padding\"\n                        style={{paddingTop: 15}}\n                    >\n                        {currentServiceDown\n                            ? null\n                            : activeService && services[activeService]\n                                ? services[activeService].template\n                                : services[0].template}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nAccountDepositWithdraw = BindToChainState(AccountDepositWithdraw);\n\nclass DepositStoreWrapper extends React.Component {\n    componentWillMount() {\n        updateGatewayBackers();\n    }\n\n    render() {\n        return <AccountDepositWithdraw {...this.props} />;\n    }\n}\n\nexport default connect(\n    DepositStoreWrapper,\n    {\n        listenTo() {\n            return [AccountStore, SettingsStore, GatewayStore];\n        },\n        getProps() {\n            return {\n                account: AccountStore.getState().currentAccount,\n                viewSettings: SettingsStore.getState().viewSettings,\n                openLedgerBackedCoins: GatewayStore.getState().backedCoins.get(\n                    \"OPEN\",\n                    []\n                ),\n                rudexBackedCoins: GatewayStore.getState().backedCoins.get(\n                    \"RUDEX\",\n                    []\n                ),\n                blockTradesBackedCoins: GatewayStore.getState().backedCoins.get(\n                    \"TRADE\",\n                    []\n                ),\n                winexBackedCoins: GatewayStore.getState().backedCoins.get(\n                    \"WIN\",\n                    []\n                ),\n                servicesDown: GatewayStore.getState().down || {}\n            };\n        }\n    }\n);\n","import React from \"react\";\nimport BlockTradesGatewayDepositRequest from \"../DepositWithdraw/blocktrades/BlockTradesGatewayDepositRequest\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport {\n    RecentTransactions,\n    TransactionWrapper\n} from \"components/Account/RecentTransactions\";\nimport Immutable from \"immutable\";\nimport cnames from \"classnames\";\nimport LoadingIndicator from \"../LoadingIndicator\";\n\nclass BlockTradesGateway extends React.Component {\n    constructor(props) {\n        super();\n\n        const action = props.viewSettings.get(\n            `${props.provider}Action`,\n            \"deposit\"\n        );\n        this.state = {\n            activeCoin: this._getActiveCoin(props, {action}),\n            action\n        };\n    }\n\n    _getActiveCoin(props, state) {\n        let cachedCoin = props.viewSettings.get(\n            `activeCoin_${props.provider}_${state.action}`,\n            null\n        );\n        let firstTimeCoin = null;\n        if (props.provider == \"blocktrades\" && state.action == \"deposit\") {\n            firstTimeCoin = \"BTC\";\n        }\n        if (props.provider == \"openledger\" && state.action == \"deposit\") {\n            firstTimeCoin = \"BTC\";\n        }\n        if (props.provider == \"blocktrades\" && state.action == \"withdraw\") {\n            firstTimeCoin = \"TRADE.BTC\";\n        }\n        if (props.provider == \"openledger\" && state.action == \"withdraw\") {\n            firstTimeCoin = \"OPEN.BTC\";\n        }\n        let activeCoin = cachedCoin ? cachedCoin : firstTimeCoin;\n        return activeCoin;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.provider !== this.props.provider) {\n            this.setState({\n                activeCoin: this._getActiveCoin(nextProps, this.state.action)\n            });\n        }\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     if (nextState.action !== this.state.action) {\n    //         this.setState({\n    //             activeCoin: this._getActiveCoin(nextProps, nextState)\n    //         });\n    //     }\n\n    //     return true;\n    // }\n\n    onSelectCoin(e) {\n        this.setState({\n            activeCoin: e.target.value\n        });\n\n        let setting = {};\n        setting[`activeCoin_${this.props.provider}_${this.state.action}`] =\n            e.target.value;\n        SettingsActions.changeViewSetting(setting);\n    }\n\n    changeAction(type) {\n        let activeCoin = this._getActiveCoin(this.props, {action: type});\n\n        this.setState({\n            action: type,\n            activeCoin: activeCoin\n        });\n\n        SettingsActions.changeViewSetting({\n            [`${this.props.provider}Action`]: type\n        });\n    }\n\n    render() {\n        let {coins, account, provider} = this.props;\n        let {activeCoin, action} = this.state;\n        if (!coins.length) {\n            return <LoadingIndicator />;\n        }\n\n        let filteredCoins = coins.filter(a => {\n            if (!a || !a.symbol) {\n                return false;\n            } else {\n                return action === \"deposit\"\n                    ? a.depositAllowed\n                    : a.withdrawalAllowed;\n            }\n        });\n\n        let coinOptions = filteredCoins\n            .map(coin => {\n                let option =\n                    action === \"deposit\"\n                        ? coin.backingCoinType.toUpperCase()\n                        : coin.symbol;\n                return (\n                    <option value={option} key={coin.symbol}>\n                        {option}\n                    </option>\n                );\n            })\n            .filter(a => {\n                return a !== null;\n            });\n\n        let coin = filteredCoins.filter(coin => {\n            return action === \"deposit\"\n                ? coin.backingCoinType.toUpperCase() === activeCoin\n                : coin.symbol === activeCoin;\n        })[0];\n\n        if (!coin) coin = filteredCoins[0];\n\n        let issuers = {\n            blocktrades: {\n                name: \"blocktrades\",\n                id: \"1.2.32567\",\n                support: \"support@blocktrades.us\"\n            },\n            openledger: {\n                name: coin.intermediateAccount,\n                id: \"1.2.96397\",\n                support: \"https://openledger.io\"\n            }\n        };\n\n        let issuer = issuers[provider];\n\n        let isDeposit = this.state.action === \"deposit\";\n\n        return (\n            <div style={this.props.style}>\n                <div className=\"grid-block no-margin vertical medium-horizontal no-padding\">\n                    <div className=\"medium-4\">\n                        <div>\n                            <label\n                                style={{minHeight: \"2rem\"}}\n                                className=\"left-label\"\n                            >\n                                <Translate\n                                    content={\"gateway.choose_\" + action}\n                                />:{\" \"}\n                            </label>\n                            <select\n                                className=\"external-coin-types bts-select\"\n                                onChange={this.onSelectCoin.bind(this)}\n                                value={activeCoin}\n                            >\n                                {coinOptions}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"medium-6 medium-offset-1\">\n                        <label\n                            style={{minHeight: \"2rem\"}}\n                            className=\"left-label\"\n                        >\n                            <Translate content=\"gateway.gateway_text\" />:\n                        </label>\n                        <div style={{paddingBottom: 15}}>\n                            <ul className=\"button-group segmented no-margin\">\n                                <li\n                                    className={\n                                        action === \"deposit\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"deposit\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.deposit\" />\n                                    </a>\n                                </li>\n                                <li\n                                    className={\n                                        action === \"withdraw\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"withdraw\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.withdraw\" />\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                {!coin ? null : (\n                    <div>\n                        <div style={{marginBottom: 15}}>\n                            <BlockTradesGatewayDepositRequest\n                                key={`${provider}.${coin.symbol}`}\n                                gateway={provider}\n                                issuer_account={issuer.name}\n                                account={account}\n                                deposit_asset={coin.backingCoinType.toUpperCase()}\n                                deposit_asset_name={coin.name}\n                                deposit_coin_type={coin.backingCoinType.toLowerCase()}\n                                deposit_account={coin.depositAccount}\n                                deposit_wallet_type={coin.walletType}\n                                gateFee={coin.gateFee}\n                                receive_asset={coin.symbol}\n                                receive_coin_type={coin.symbol.toLowerCase()}\n                                supports_output_memos={coin.supportsMemos}\n                                isAvailable={coin.isAvailable}\n                                action={this.state.action}\n                            />\n                            <label className=\"left-label\">Support</label>\n                            <div>\n                                <Translate content=\"gateway.support_block\" />\n                                <br />\n                                <br />\n                                <a\n                                    href={\n                                        (issuer.support.indexOf(\"@\") === -1\n                                            ? \"\"\n                                            : \"mailto:\") + issuer.support\n                                    }\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {issuer.support}\n                                </a>\n                            </div>\n                        </div>\n\n                        {coin && coin.symbol ? (\n                            <TransactionWrapper\n                                asset={coin.symbol}\n                                fromAccount={\n                                    isDeposit\n                                        ? issuer.id\n                                        : this.props.account.get(\"id\")\n                                }\n                                to={\n                                    isDeposit\n                                        ? this.props.account.get(\"id\")\n                                        : issuer.id\n                                }\n                            >\n                                {({asset, to, fromAccount}) => {\n                                    return (\n                                        <RecentTransactions\n                                            accountsList={Immutable.List([\n                                                this.props.account.get(\"id\")\n                                            ])}\n                                            limit={10}\n                                            compactView={true}\n                                            fullHeight={true}\n                                            filter=\"transfer\"\n                                            title={\n                                                <Translate\n                                                    content={\n                                                        \"gateway.recent_\" +\n                                                        this.state.action\n                                                    }\n                                                />\n                                            }\n                                            customFilter={{\n                                                fields: [\n                                                    \"to\",\n                                                    \"from\",\n                                                    \"asset_id\"\n                                                ],\n                                                values: {\n                                                    to: to.get(\"id\"),\n                                                    from: fromAccount.get(\"id\"),\n                                                    asset_id: asset.get(\"id\")\n                                                }\n                                            }}\n                                        />\n                                    );\n                                }}\n                            </TransactionWrapper>\n                        ) : null}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(BlockTradesGateway, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            viewSettings: SettingsStore.getState().viewSettings\n        };\n    }\n});\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {ChainStore} from \"bitsharesjs\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport WithdrawModalBlocktrades from \"./WithdrawModalBlocktrades\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport AssetName from \"components/Utility/AssetName\";\nimport LinkToAccountById from \"components/Utility/LinkToAccountById\";\nimport {requestDepositAddress, getDepositAddress} from \"common/gatewayMethods\";\nimport {blockTradesAPIs, openledgerAPIs} from \"api/apiConfig\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport counterpart from \"counterpart\";\nimport PropTypes from \"prop-types\";\n\nclass BlockTradesGatewayDepositRequest extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n        gateway: PropTypes.string,\n        deposit_coin_type: PropTypes.string,\n        deposit_asset_name: PropTypes.string,\n        deposit_account: PropTypes.string,\n        receive_coin_type: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        deposit_asset: PropTypes.string,\n        deposit_wallet_type: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset,\n        deprecated_in_favor_of: ChainTypes.ChainAsset,\n        deprecated_message: PropTypes.string,\n        action: PropTypes.string,\n        supports_output_memos: PropTypes.bool.isRequired\n    };\n\n    static defaultProps = {\n        autosubscribe: false\n    };\n\n    constructor(props) {\n        super(props);\n\n        let urls = {\n            blocktrades: blockTradesAPIs.BASE,\n            openledger: openledgerAPIs.BASE\n        };\n\n        this.state = {\n            receive_address: null,\n            url: props.url || urls[props.gateway],\n            loading: false,\n            emptyAddressDeposit: false\n        };\n\n        this.addDepositAddress = this.addDepositAddress.bind(this);\n        this._copy = this._copy.bind(this);\n        document.addEventListener(\"copy\", this._copy);\n    }\n\n    _copy(e) {\n        try {\n            if (this.state.clipboardText)\n                e.clipboardData.setData(\"text/plain\", this.state.clipboardText);\n            else\n                e.clipboardData.setData(\n                    \"text/plain\",\n                    counterpart\n                        .translate(\"gateway.use_copy_button\")\n                        .toUpperCase()\n                );\n            e.preventDefault();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    _getDepositObject() {\n        return {\n            inputCoinType: this.props.deposit_coin_type,\n            outputCoinType: this.props.receive_coin_type,\n            outputAddress: this.props.account.get(\"name\"),\n            url: this.state.url,\n            stateCallback: this.addDepositAddress\n        };\n    }\n\n    componentWillMount() {\n        getDepositAddress({\n            coin: this.props.receive_coin_type,\n            account: this.props.account.get(\"name\"),\n            stateCallback: this.addDepositAddress\n        });\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"copy\", this._copy);\n    }\n\n    componentWillReceiveProps(np) {\n        if (np.account !== this.props.account) {\n            getDepositAddress({\n                coin: np.receive_coin_type,\n                account: np.account.get(\"name\"),\n                stateCallback: this.addDepositAddress\n            });\n        }\n    }\n\n    addDepositAddress(receive_address) {\n        if (receive_address.error) {\n            receive_address.error.message === \"no_address\"\n                ? this.setState({emptyAddressDeposit: true})\n                : this.setState({emptyAddressDeposit: false});\n        }\n\n        this.setState({receive_address});\n        this.setState({\n            loading: false\n        });\n        this.setState({receive_address});\n    }\n\n    requestDepositAddressLoad() {\n        this.setState({\n            loading: true,\n            emptyAddressDeposit: false\n        });\n        requestDepositAddress(this._getDepositObject());\n    }\n\n    getWithdrawModalId() {\n        // console.log( \"this.props.issuer: \", this.props.issuer_account.toJS() )\n        // console.log( \"this.receive_asset.issuer: \", this.props.receive_asset.toJS() )\n        return (\n            \"withdraw_asset_\" +\n            this.props.issuer_account.get(\"name\") +\n            \"_\" +\n            this.props.receive_asset.get(\"symbol\")\n        );\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    toClipboard(clipboardText) {\n        try {\n            this.setState({clipboardText}, () => {\n                document.execCommand(\"copy\");\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    render() {\n        const isDeposit = this.props.action === \"deposit\";\n        let emptyRow = <LoadingIndicator />;\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.receive_asset\n        )\n            return emptyRow;\n\n        let account_balances_object = this.props.account.get(\"balances\");\n\n        const {gateFee} = this.props;\n\n        let balance = \"0 \" + this.props.receive_asset.get(\"symbol\");\n        if (this.props.deprecated_in_favor_of) {\n            let has_nonzero_balance = false;\n            let balance_object_id = account_balances_object.get(\n                this.props.receive_asset.get(\"id\")\n            );\n            if (balance_object_id) {\n                let balance_object = ChainStore.getObject(balance_object_id);\n                if (balance_object) {\n                    let balance = balance_object.get(\"balance\");\n                    if (balance != 0) has_nonzero_balance = true;\n                }\n            }\n            if (!has_nonzero_balance) return emptyRow;\n        }\n\n        // let account_balances = account_balances_object.toJS();\n        // let asset_types = Object.keys(account_balances);\n        // if (asset_types.length > 0) {\n        //     let current_asset_id = this.props.receive_asset.get(\"id\");\n        //     if( current_asset_id )\n        //     {\n        //         balance = (<span><Translate component=\"span\" content=\"transfer.available\"/>: <BalanceComponent balance={account_balances[current_asset_id]}/></span>);\n        //     }\n        // }\n\n        let receive_address = this.state.receive_address;\n        let {emptyAddressDeposit} = this.state;\n        let indicatorButtonAddr = this.state.loading;\n\n        if (!receive_address) {\n            return (\n                <div style={{margin: \"3rem\"}}>\n                    <LoadingIndicator type=\"three-bounce\" />\n                </div>\n            );\n        }\n\n        let withdraw_modal_id = this.getWithdrawModalId();\n        let deposit_address_fragment = null;\n        let deposit_memo = null;\n        // if (this.props.deprecated_in_favor_of)\n        // {\n        //     deposit_address_fragment = <span>please use {this.props.deprecated_in_favor_of.get(\"symbol\")} instead. <span data-tip={this.props.deprecated_message} data-place=\"right\" data-html={true}><Icon name=\"question-circle\" title=\"icons.question_circle\" /></span><ReactTooltip /></span>;\n        // }\n        // else\n        // {\n        let clipboardText = \"\";\n        let memoText;\n        if (this.props.deposit_account) {\n            deposit_address_fragment = (\n                <span>{this.props.deposit_account}</span>\n            );\n            clipboardText =\n                this.props.receive_coin_type +\n                \":\" +\n                this.props.account.get(\"name\");\n            deposit_memo = <span>{clipboardText}</span>;\n            var withdraw_memo_prefix = this.props.deposit_coin_type + \":\";\n        } else {\n            if (receive_address.memo) {\n                // This is a client that uses a deposit memo (like ethereum), we need to display both the address and the memo they need to send\n                memoText = receive_address.memo;\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n                deposit_memo = <span>{receive_address.memo}</span>;\n            } else {\n                // This is a client that uses unique deposit addresses to select the output\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n            }\n            var withdraw_memo_prefix = \"\";\n        }\n\n        if (\n            !this.props.isAvailable ||\n            ((isDeposit && !this.props.deposit_account && !receive_address) ||\n                (receive_address && receive_address.address === \"unknown\"))\n        ) {\n            return (\n                <div>\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.unavailable\"\n                        component=\"h4\"\n                    />\n                </div>\n            );\n        }\n\n        if (isDeposit) {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_deposit\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.your_account\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.deposit_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <label className=\"fz_12 left-label\">\n                            <Translate content=\"gateway.deposit_notice_delay\" />\n                        </label>\n                        <div>\n                            {emptyAddressDeposit ? (\n                                <Translate content=\"gateway.please_generate_address\" />\n                            ) : (\n                                deposit_address_fragment\n                            )}\n                            <div>\n                                {deposit_memo && (\n                                    <span>memo: {deposit_memo}</span>\n                                )}\n                            </div>\n                            <div\n                                className=\"button-group\"\n                                style={{paddingTop: 10}}\n                            >\n                                {deposit_address_fragment ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            clipboardText\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.copy_address\" />\n                                    </div>\n                                ) : null}\n                                {memoText ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            memoText\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.copy_memo\" />\n                                    </div>\n                                ) : null}\n                                <button\n                                    className={\"button spinner-button-circle\"}\n                                    onClick={this.requestDepositAddressLoad.bind(\n                                        this\n                                    )}\n                                >\n                                    {indicatorButtonAddr ? (\n                                        <LoadingIndicator type=\"circle\" />\n                                    ) : null}\n                                    <Translate content=\"gateway.generate_new\" />\n                                </button>\n                            </div>\n                            <Translate\n                                className=\"has-error fz_14\"\n                                component=\"p\"\n                                content=\"gateway.min_deposit_warning_amount\"\n                                minDeposit={this.props.gateFee * 2}\n                                coin={this.props.deposit_asset}\n                            />\n                            <Translate\n                                className=\"has-error fz_14\"\n                                component=\"p\"\n                                content=\"gateway.min_deposit_warning_asset\"\n                                minDeposit={this.props.gateFee * 2}\n                                coin={this.props.deposit_asset}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_withdraw\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        {/*<p>When you withdraw {this.props.receive_asset.get(\"symbol\")}, you will receive {this.props.deposit_asset} at a 1:1 ratio (minus fees).</p>*/}\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.withdraw_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <div className=\"button-group\" style={{paddingTop: 20}}>\n                            <button\n                                className=\"button success\"\n                                style={{fontSize: \"1.3rem\"}}\n                                onClick={this.onWithdraw.bind(this)}\n                            >\n                                <Translate content=\"gateway.withdraw_now\" />{\" \"}\n                            </button>\n                        </div>\n                    </div>\n                    <BaseModal id={withdraw_modal_id} overlay={true}>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <WithdrawModalBlocktrades\n                                account={this.props.account.get(\"name\")}\n                                issuer={this.props.issuer_account.get(\"name\")}\n                                asset={this.props.receive_asset.get(\"symbol\")}\n                                url={this.state.url}\n                                output_coin_name={this.props.deposit_asset_name}\n                                gateFee={gateFee}\n                                output_coin_symbol={this.props.deposit_asset}\n                                output_coin_type={this.props.deposit_coin_type}\n                                output_wallet_type={\n                                    this.props.deposit_wallet_type\n                                }\n                                output_supports_memos={\n                                    this.props.supports_output_memos\n                                }\n                                memo_prefix={withdraw_memo_prefix}\n                                modal_id={withdraw_modal_id}\n                                balance={\n                                    this.props.account.get(\"balances\").toJS()[\n                                        this.props.receive_asset.get(\"id\")\n                                    ]\n                                }\n                            />\n                        </div>\n                    </BaseModal>\n                </div>\n            );\n        }\n    }\n}\n\nexport default BindToChainState(BlockTradesGatewayDepositRequest);\n","import React from \"react\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport AccountActions from \"actions/AccountActions\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {validateAddress, WithdrawAddresses} from \"common/gatewayMethods\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Modal from \"react-foundation-apps/src/modal\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport {debounce} from \"lodash-es\";\nimport {Price, Asset} from \"common/MarketClasses\";\nimport PropTypes from \"prop-types\";\n\nclass WithdrawModalBlocktrades extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        output_coin_name: PropTypes.string.isRequired,\n        output_coin_symbol: PropTypes.string.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        url: PropTypes.string,\n        output_wallet_type: PropTypes.string,\n        output_supports_memos: PropTypes.bool.isRequired,\n        amount_to_withdraw: PropTypes.string,\n        balance: ChainTypes.ChainObject\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            withdraw_amount: this.props.amount_to_withdraw,\n            withdraw_address: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            withdraw_address_check_in_progress: true,\n            withdraw_address_is_valid: null,\n            options_is_valid: false,\n            confirmation_is_valid: false,\n            withdraw_address_selected: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            memo: \"\",\n            withdraw_address_first: true,\n            empty_withdraw_value: false,\n            from_account: props.account,\n            fee_asset_id: \"1.3.0\",\n            feeStatus: {}\n        };\n\n        this._validateAddress(this.state.withdraw_address, props);\n\n        this._checkBalance = this._checkBalance.bind(this);\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n    }\n\n    componentWillMount() {\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.account !== this.state.from_account &&\n            np.account !== this.props.account\n        ) {\n            this.setState(\n                {\n                    from_account: np.account,\n                    feeStatus: {},\n                    fee_asset_id: \"1.3.0\",\n                    feeAmount: new Asset({amount: 0})\n                },\n                () => {\n                    this._updateFee();\n                    this._checkFeeStatus();\n                }\n            );\n        }\n    }\n\n    _updateFee(state = this.state) {\n        let {fee_asset_id, from_account} = state;\n        const {fee_asset_types} = this._getAvailableAssets(state);\n        if (\n            fee_asset_types.length === 1 &&\n            fee_asset_types[0] !== fee_asset_id\n        ) {\n            fee_asset_id = fee_asset_types[0];\n        }\n\n        if (!from_account) return null;\n        checkFeeStatusAsync({\n            accountID: from_account.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content:\n                    this.props.output_coin_type +\n                    \":\" +\n                    state.withdraw_address +\n                    (state.memo ? \":\" + state.memo : \"\")\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) => {\n            if (this.unMounted) return;\n\n            this.setState(\n                {\n                    feeAmount: fee,\n                    hasBalance,\n                    hasPoolBalance,\n                    error: !hasBalance || !hasPoolBalance\n                },\n                this._checkBalance\n            );\n        });\n    }\n\n    _checkFeeStatus(state = this.state) {\n        let account = state.from_account;\n        if (!account) return;\n\n        const {fee_asset_types: assets} = this._getAvailableAssets(state);\n        // const assets = [\"1.3.0\", this.props.asset.get(\"id\")];\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content:\n                            this.props.output_coin_type +\n                            \":\" +\n                            state.withdraw_address +\n                            (state.memo ? \":\" + state.memo : \"\")\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    onWithdrawAmountChange({amount}) {\n        this.setState(\n            {\n                withdraw_amount: amount,\n                empty_withdraw_value:\n                    amount !== undefined && !parseFloat(amount)\n            },\n            this._checkBalance\n        );\n    }\n\n    onSelectChanged(index) {\n        let new_withdraw_address = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        )[index];\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: new_withdraw_address\n        });\n\n        this.setState(\n            {\n                withdraw_address_selected: new_withdraw_address,\n                options_is_valid: false,\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    onWithdrawAddressChanged(e) {\n        let new_withdraw_address = e.target.value.trim();\n\n        this.setState(\n            {\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_selected: new_withdraw_address,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    _validateAddress(new_withdraw_address, props = this.props) {\n        validateAddress({\n            url: props.url,\n            walletType: props.output_wallet_type,\n            newAddress: new_withdraw_address\n        }).then(isValid => {\n            if (this.state.withdraw_address === new_withdraw_address) {\n                this.setState({\n                    withdraw_address_check_in_progress: false,\n                    withdraw_address_is_valid: isValid\n                });\n            }\n        });\n    }\n\n    _checkBalance() {\n        const {feeAmount, withdraw_amount} = this.state;\n        const {asset, balance} = this.props;\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            withdraw_amount,\n            asset,\n            feeAmount,\n            balance\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n        return hasBalance;\n    }\n\n    onSubmit() {\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address &&\n                this.state.withdraw_address.length) &&\n            this.state.withdraw_amount !== null\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                ZfApi.publish(this.getWithdrawModalId(), \"open\");\n            } else if (parseFloat(this.state.withdraw_amount) > 0) {\n                if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n                    let withdrawals = [];\n                    withdrawals.push(this.state.withdraw_address);\n                    WithdrawAddresses.set({\n                        wallet: this.props.output_wallet_type,\n                        addresses: withdrawals\n                    });\n                } else {\n                    let withdrawals = WithdrawAddresses.get(\n                        this.props.output_wallet_type\n                    );\n                    if (\n                        withdrawals.indexOf(this.state.withdraw_address) == -1\n                    ) {\n                        withdrawals.push(this.state.withdraw_address);\n                        WithdrawAddresses.set({\n                            wallet: this.props.output_wallet_type,\n                            addresses: withdrawals\n                        });\n                    }\n                }\n                WithdrawAddresses.setLast({\n                    wallet: this.props.output_wallet_type,\n                    address: this.state.withdraw_address\n                });\n                let asset = this.props.asset;\n\n                const {feeAmount} = this.state;\n\n                const amount = parseFloat(\n                    String.prototype.replace.call(\n                        this.state.withdraw_amount,\n                        /,/g,\n                        \"\"\n                    )\n                );\n                const gateFee =\n                    typeof this.props.gateFee != \"undefined\"\n                        ? parseFloat(\n                              String.prototype.replace.call(\n                                  this.props.gateFee,\n                                  /,/g,\n                                  \"\"\n                              )\n                          )\n                        : 0.0;\n\n                let sendAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: amount\n                });\n\n                let balanceAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: 0\n                });\n\n                if (typeof this.props.balance != \"undefined\") {\n                    balanceAmount = sendAmount.clone(\n                        this.props.balance.get(\"balance\")\n                    );\n                }\n\n                const gateFeeAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: gateFee\n                });\n\n                sendAmount.plus(gateFeeAmount);\n\n                /* Insufficient balance */\n                if (balanceAmount.lt(sendAmount)) {\n                    sendAmount = balanceAmount;\n                }\n\n                AccountActions.transfer(\n                    this.props.account.get(\"id\"),\n                    this.props.issuer.get(\"id\"),\n                    sendAmount.getAmount(),\n                    asset.get(\"id\"),\n                    this.props.output_coin_type +\n                        \":\" +\n                        this.state.withdraw_address +\n                        (this.state.memo\n                            ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                            : \"\"),\n                    null,\n                    feeAmount ? feeAmount.asset_id : \"1.3.0\"\n                );\n\n                this.setState({\n                    empty_withdraw_value: false\n                });\n            } else {\n                this.setState({\n                    empty_withdraw_value: true\n                });\n            }\n        }\n    }\n\n    onSubmitConfirmation() {\n        ZfApi.publish(this.getWithdrawModalId(), \"close\");\n\n        if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n            let withdrawals = [];\n            withdrawals.push(this.state.withdraw_address);\n            WithdrawAddresses.set({\n                wallet: this.props.output_wallet_type,\n                addresses: withdrawals\n            });\n        } else {\n            let withdrawals = WithdrawAddresses.get(\n                this.props.output_wallet_type\n            );\n            if (withdrawals.indexOf(this.state.withdraw_address) == -1) {\n                withdrawals.push(this.state.withdraw_address);\n                WithdrawAddresses.set({\n                    wallet: this.props.output_wallet_type,\n                    addresses: withdrawals\n                });\n            }\n        }\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: this.state.withdraw_address\n        });\n        let asset = this.props.asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = String.prototype.replace.call(\n            this.state.withdraw_amount,\n            /,/g,\n            \"\"\n        );\n\n        const {feeAmount} = this.state;\n\n        AccountActions.transfer(\n            this.props.account.get(\"id\"),\n            this.props.issuer.get(\"id\"),\n            parseInt(amount * precision, 10),\n            asset.get(\"id\"),\n            this.props.output_coin_type +\n                \":\" +\n                this.state.withdraw_address +\n                (this.state.memo\n                    ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                    : \"\"),\n            null,\n            feeAmount ? feeAmount.asset_id : \"1.3.0\"\n        );\n    }\n\n    onDropDownList() {\n        if (WithdrawAddresses.has(this.props.output_wallet_type)) {\n            if (this.state.options_is_valid === false) {\n                this.setState({options_is_valid: true});\n                this.setState({withdraw_address_first: false});\n            }\n\n            if (this.state.options_is_valid === true) {\n                this.setState({options_is_valid: false});\n            }\n        }\n    }\n\n    getWithdrawModalId() {\n        return \"confirmation\";\n    }\n\n    onAccountBalance() {\n        const {feeAmount} = this.state;\n        if (\n            Object.keys(this.props.account.get(\"balances\").toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            let total = new Asset({\n                amount: this.props.balance.get(\"balance\"),\n                asset_id: this.props.asset.get(\"id\"),\n                precision: this.props.asset.get(\"precision\")\n            });\n\n            // Subtract the fee if it is using the same asset\n            if (total.asset_id === feeAmount.asset_id) {\n                total.minus(feeAmount);\n            }\n\n            this.setState(\n                {\n                    withdraw_amount: total.getAmount({real: true}),\n                    empty_withdraw_value: false\n                },\n                this._checkBalance\n            );\n        }\n    }\n\n    setNestedRef(ref) {\n        this.nestedRef = ref;\n    }\n\n    onFeeChanged({asset}) {\n        this.setState(\n            {\n                fee_asset_id: asset.get(\"id\")\n            },\n            this._updateFee\n        );\n    }\n\n    _getAvailableAssets(state = this.state) {\n        const {from_account, feeStatus} = state;\n        function hasFeePoolBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        let fee_asset_types = [];\n        if (!(from_account && from_account.get(\"balances\"))) {\n            return {fee_asset_types};\n        }\n        let account_balances = state.from_account.get(\"balances\").toJS();\n        fee_asset_types = Object.keys(account_balances).sort(utils.sortID);\n        for (let key in account_balances) {\n            let asset = ChainStore.getObject(key);\n            let balanceObject = ChainStore.getObject(account_balances[key]);\n            if (balanceObject && balanceObject.get(\"balance\") === 0) {\n                if (fee_asset_types.indexOf(key) !== -1) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n\n            if (asset) {\n                // Remove any assets that do not have valid core exchange rates\n                let priceIsValid = false,\n                    p;\n                try {\n                    p = new Price({\n                        base: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"base\"\n                                ])\n                                .toJS()\n                        ),\n                        quote: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"quote\"\n                                ])\n                                .toJS()\n                        )\n                    });\n                    priceIsValid = p.isValid();\n                } catch (err) {\n                    priceIsValid = false;\n                }\n\n                if (asset.get(\"id\") !== \"1.3.0\" && !priceIsValid) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n        }\n\n        fee_asset_types = fee_asset_types.filter(a => {\n            return hasFeePoolBalance(a) && hasBalance(a);\n        });\n\n        return {fee_asset_types};\n    }\n\n    render() {\n        let {withdraw_address_selected, memo} = this.state;\n        let storedAddress = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        );\n        let balance = null;\n\n        let account_balances = this.props.account.get(\"balances\").toJS();\n        let asset_types = Object.keys(account_balances);\n\n        let withdrawModalId = this.getWithdrawModalId();\n        let invalid_address_message = null;\n        let options = null;\n        let confirmation = null;\n\n        if (this.state.options_is_valid) {\n            options = (\n                <div\n                    className={\n                        !storedAddress.length\n                            ? \"blocktrades-disabled-options\"\n                            : \"blocktrades-options\"\n                    }\n                >\n                    {storedAddress.map(function(name, index) {\n                        return (\n                            <a\n                                key={index}\n                                onClick={this.onSelectChanged.bind(this, index)}\n                            >\n                                {name}\n                            </a>\n                        );\n                    }, this)}\n                </div>\n            );\n        }\n\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address && this.state.withdraw_address.length)\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                invalid_address_message = (\n                    <div className=\"has-error\" style={{paddingTop: 10}}>\n                        <Translate\n                            content=\"gateway.valid_address\"\n                            coin_type={this.props.output_coin_type}\n                        />\n                    </div>\n                );\n                confirmation = (\n                    <Modal id={withdrawModalId} overlay={true}>\n                        <Trigger close={withdrawModalId}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <label>\n                            <Translate content=\"modal.confirmation.title\" />\n                        </label>\n                        <br />\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onSubmitConfirmation.bind(this)}\n                                value={counterpart.translate(\n                                    \"modal.confirmation.accept\"\n                                )}\n                            />\n                            <Trigger close={withdrawModalId}>\n                                <a className=\"secondary button\">\n                                    <Translate content=\"modal.confirmation.cancel\" />\n                                </a>\n                            </Trigger>\n                        </div>\n                    </Modal>\n                );\n            }\n            // if (this.state.withdraw_address_is_valid)\n            //   invalid_address_message = <Icon name=\"checkmark-circle\" title=\"icons.checkmark_circle.operation_succeed\" className=\"success\" />;\n            // else\n            //   invalid_address_message = <Icon name=\"cross-circle\" title=\"icons.cross_circle.operation_failed\" className=\"alert\" />;\n        }\n\n        let tabIndex = 1;\n        let withdraw_memo = null;\n\n        if (this.props.output_supports_memos) {\n            withdraw_memo = (\n                <div className=\"content-block\">\n                    <label>\n                        <Translate component=\"span\" content=\"transfer.memo\" />\n                    </label>\n                    <textarea\n                        rows=\"3\"\n                        value={memo}\n                        tabIndex={tabIndex++}\n                        onChange={this.onMemoChanged.bind(this)}\n                    />\n                </div>\n            );\n        }\n\n        // Estimate fee VARIABLES\n        let {fee_asset_types} = this._getAvailableAssets();\n\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.asset.get(\"id\");\n            if (current_asset_id) {\n                let current = account_balances[current_asset_id];\n                balance = (\n                    <span\n                        style={{\n                            borderBottom: \"#A09F9F 1px dotted\",\n                            cursor: \"pointer\"\n                        }}\n                    >\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />&nbsp;:&nbsp;\n                        <span\n                            className=\"set-cursor\"\n                            onClick={this.onAccountBalance.bind(this)}\n                        >\n                            {current ? (\n                                <BalanceComponent\n                                    balance={account_balances[current_asset_id]}\n                                />\n                            ) : (\n                                0\n                            )}\n                        </span>\n                    </span>\n                );\n            } else balance = \"No funds\";\n        } else {\n            balance = \"No funds\";\n        }\n\n        const disableSubmit =\n            this.state.error ||\n            this.state.balanceError ||\n            !this.state.withdraw_amount;\n\n        return (\n            <form className=\"grid-block vertical full-width-content\">\n                <div className=\"grid-container\">\n                    <div className=\"content-block\">\n                        <h3>\n                            <Translate\n                                content=\"gateway.withdraw_coin\"\n                                coin={this.props.output_coin_name}\n                                symbol={this.props.output_coin_symbol}\n                            />\n                        </h3>\n                    </div>\n\n                    {/* Withdraw amount */}\n                    <div className=\"content-block\">\n                        <AmountSelector\n                            label=\"modal.withdraw.amount\"\n                            amount={this.state.withdraw_amount}\n                            asset={this.props.asset.get(\"id\")}\n                            assets={[this.props.asset.get(\"id\")]}\n                            placeholder=\"0.0\"\n                            onChange={this.onWithdrawAmountChange.bind(this)}\n                            display_balance={balance}\n                        />\n                        {this.state.empty_withdraw_value ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.valid\" />\n                            </p>\n                        ) : null}\n                        {this.state.balanceError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.insufficient\" />\n                            </p>\n                        ) : null}\n                    </div>\n\n                    {/* Fee selection */}\n                    {this.state.feeAmount ? (\n                        <div className=\"content-block gate_fee\">\n                            <AmountSelector\n                                refCallback={this.setNestedRef.bind(this)}\n                                label=\"transfer.fee\"\n                                disabled={true}\n                                amount={this.state.feeAmount.getAmount({\n                                    real: true\n                                })}\n                                onChange={this.onFeeChanged.bind(this)}\n                                asset={this.state.feeAmount.asset_id}\n                                assets={fee_asset_types}\n                                tabIndex={tabIndex++}\n                            />\n                            {!this.state.hasBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noFeeBalance\" />\n                                </p>\n                            ) : null}\n                            {!this.state.hasPoolBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noPoolBalance\" />\n                                </p>\n                            ) : null}\n                        </div>\n                    ) : null}\n\n                    {/* Gate fee */}\n                    {this.props.gateFee ? (\n                        <div\n                            className=\"amount-selector right-selector\"\n                            style={{paddingBottom: 20}}\n                        >\n                            <label className=\"left-label\">\n                                <Translate content=\"gateway.fee\" />\n                            </label>\n                            <div className=\"inline-label input-wrapper\">\n                                <input\n                                    type=\"text\"\n                                    disabled\n                                    value={this.props.gateFee}\n                                />\n\n                                <div className=\"form-label select floating-dropdown\">\n                                    <div className=\"dropdown-wrapper inactive\">\n                                        <div>\n                                            {this.props.output_coin_symbol}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : null}\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">\n                            <Translate\n                                component=\"span\"\n                                content=\"modal.withdraw.address\"\n                            />\n                        </label>\n                        <div className=\"blocktrades-select-dropdown\">\n                            <div className=\"inline-label\">\n                                <input\n                                    type=\"text\"\n                                    value={withdraw_address_selected}\n                                    tabIndex=\"4\"\n                                    onChange={this.onWithdrawAddressChanged.bind(\n                                        this\n                                    )}\n                                    autoComplete=\"off\"\n                                />\n                                <span onClick={this.onDropDownList.bind(this)}>\n                                    &#9660;\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"blocktrades-position-options\">\n                            {options}\n                        </div>\n                        {invalid_address_message}\n                    </div>\n\n                    {/* Memo input */}\n                    {withdraw_memo}\n\n                    {/* Withdraw/Cancel buttons */}\n                    <div className=\"button-group\">\n                        <div\n                            onClick={this.onSubmit.bind(this)}\n                            className={\n                                \"button\" + (disableSubmit ? \" disabled\" : \"\")\n                            }\n                        >\n                            <Translate content=\"modal.withdraw.submit\" />\n                        </div>\n\n                        <Trigger close={this.props.modal_id}>\n                            <div className=\"button\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                    {confirmation}\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default BindToChainState(WithdrawModalBlocktrades);\n","import React from \"react\";\nimport AssetName from \"../Utility/AssetName\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport BalanceComponent from \"../Utility/BalanceComponent\";\n\n/**\n *  Given a balance_object, displays it in a pretty way\n *\n *  Expects one property, 'balance' which should be a balance_object id\n */\n\nclass AccountBalance extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired\n    };\n\n    static defaultProps = {\n        autosubscribe: false\n    };\n\n    render() {\n        let asset_id = this.props.asset.get(\"id\");\n        let balance_id = this.props.account.getIn([\"balances\", asset_id]);\n\n        if (balance_id)\n            return (\n                <BalanceComponent\n                    balance={balance_id}\n                    replace={this.props.replace}\n                />\n            );\n        else\n            return (\n                <span>\n                    0&nbsp;<AssetName\n                        name={this.props.asset.get(\"symbol\")}\n                        replace={this.props.replace}\n                    />\n                </span>\n            );\n    }\n}\n\nexport default BindToChainState(AccountBalance);\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport WalletDb from \"stores/WalletDb\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport DepositFiatOpenLedger from \"./DepositFiatOpenLedger\";\nimport WithdrawFiatOpenLedger from \"./WithdrawFiatOpenLedger\";\nimport PropTypes from \"prop-types\";\n\nclass OpenLedgerFiatDepositWithdrawCurrency extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n        gateway: PropTypes.string,\n        deposit_coin_type: PropTypes.string,\n        deposit_asset_name: PropTypes.string,\n        deposit_account: PropTypes.string,\n        receive_coin_type: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        deposit_asset: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset,\n        deposit_allowed: PropTypes.bool,\n        withdraw_allowed: PropTypes.bool\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    getWithdrawModalId() {\n        return (\n            \"withdraw_fiat_openledger_\" + this.props.receive_asset.get(\"symbol\")\n        );\n    }\n\n    getDepositModalId() {\n        return (\n            \"deposit_fiat_openledger_\" + this.props.receive_asset.get(\"symbol\")\n        );\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    onDeposit() {\n        ZfApi.publish(this.getDepositModalId(), \"open\");\n    }\n\n    render() {\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.receive_asset\n        )\n            return (\n                <tr style={{display: \"none\"}}>\n                    <td />\n                    <td />\n                    <td />\n                    <td />\n                </tr>\n            );\n\n        let wallet = WalletDb.getWallet();\n        let account_balances_object = this.props.account.get(\"balances\");\n\n        let balance = \"0 \" + this.props.receive_asset.get(\"symbol\");\n\n        let account_balances = account_balances_object.toJS();\n        let asset_types = Object.keys(account_balances);\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.receive_asset.get(\"id\");\n            if (current_asset_id)\n                balance = (\n                    <span>\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />:{\" \"}\n                        <BalanceComponent\n                            balance={account_balances[current_asset_id]}\n                        />\n                    </span>\n                );\n        }\n\n        let deposit_modal_id = this.getDepositModalId();\n        let withdraw_modal_id = this.getWithdrawModalId();\n\n        let deposit_fragment = null;\n        if (this.props.deposit_allowed) {\n            deposit_fragment = (\n                <td>\n                    <button\n                        className={\"button outline\"}\n                        onClick={this.onDeposit.bind(this)}\n                    >\n                        {\" \"}\n                        <Translate content=\"gateway.deposit\" />{\" \"}\n                    </button>\n                    <BaseModal id={deposit_modal_id} overlay={true}>\n                        <Trigger close={deposit_modal_id}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <DepositFiatOpenLedger\n                                account={this.props.account.get(\"name\")}\n                                issuer_account={this.props.issuer_account.get(\n                                    \"name\"\n                                )}\n                                receive_asset={this.props.receive_asset.get(\n                                    \"symbol\"\n                                )}\n                                rpc_url={this.props.rpc_url}\n                                deposit_asset={this.props.deposit_asset}\n                                modal_id={deposit_modal_id}\n                            />\n                        </div>\n                    </BaseModal>\n                </td>\n            );\n        } else\n            deposit_fragment = (\n                <td>\n                    Click{\" \"}\n                    <a\n                        href=\"https://openledger.info/v/\"\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                    >\n                        here\n                    </a>{\" \"}\n                    to register for deposits of {this.props.deposit_asset}\n                </td>\n            );\n\n        let withdraw_fragment = null;\n        if (this.props.withdraw_allowed) {\n            withdraw_fragment = (\n                <td>\n                    <button\n                        className={\"button outline\"}\n                        onClick={this.onWithdraw.bind(this)}\n                    >\n                        {\" \"}\n                        <Translate content=\"gateway.withdraw\" />{\" \"}\n                    </button>\n                    <BaseModal id={withdraw_modal_id} overlay={true}>\n                        <Trigger close={withdraw_modal_id}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <WithdrawFiatOpenLedger\n                                account={this.props.account.get(\"name\")}\n                                issuer_account={this.props.issuer_account.get(\n                                    \"name\"\n                                )}\n                                receive_asset={this.props.receive_asset.get(\n                                    \"symbol\"\n                                )}\n                                rpc_url={this.props.rpc_url}\n                                deposit_asset={this.props.deposit_asset}\n                                modal_id={withdraw_modal_id}\n                            />\n                        </div>\n                    </BaseModal>\n                </td>\n            );\n        } else\n            withdraw_fragment = (\n                <td>\n                    Click{\" \"}\n                    <a\n                        href=\"https://openledger.info/v/\"\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                    >\n                        here\n                    </a>{\" \"}\n                    to register for withdrawals of {this.props.deposit_asset}\n                </td>\n            );\n\n        return (\n            <tr>\n                <td>{this.props.deposit_asset}</td>\n                {deposit_fragment}\n                <td>\n                    <AccountBalance\n                        account={this.props.account.get(\"name\")}\n                        asset={this.props.receive_asset.get(\"symbol\")}\n                    />\n                </td>\n                {withdraw_fragment}\n            </tr>\n        );\n    }\n} // OpenLedgerFiatDepositWithdrawCurrency\nOpenLedgerFiatDepositWithdrawCurrency = BindToChainState(\n    OpenLedgerFiatDepositWithdrawCurrency\n);\n\nclass OpenLedgerFiatDepositWithdrawal extends React.Component {\n    static propTypes = {\n        rpc_url: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            allowedFiatCurrencies: {\n                deposit: [],\n                withdraw: []\n            }\n        };\n\n        // get approval status from openledger\n        let json_rpc_request = {\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: \"isValidatedForFiat\",\n            params: {bitsharesAccountName: this.props.account.get(\"name\")}\n        };\n        let is_validated_promise = fetch(this.props.rpc_url, {\n            method: \"POST\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"content-type\": \"application/x-www-form-urlencoded\"\n            }),\n            body: \"rq=\" + encodeURIComponent(JSON.stringify(json_rpc_request))\n        }).then(response => response.json());\n\n        is_validated_promise\n            .then(json_response => {\n                if (\"result\" in json_response)\n                    this.setState({\n                        allowedFiatCurrencies: json_response.result\n                    });\n            })\n            .catch(error => {\n                this.setState({\n                    allowedFiatCurrencies: {\n                        deposit: [],\n                        withdraw: []\n                    }\n                });\n            });\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.update_timer);\n    }\n\n    render() {\n        if (!this.props.account || !this.props.issuer_account) return <div />;\n\n        return <div />;\n\n        /*         <table className=\"table\">\n                        <thead>\n                        <tr>\n                            <th><Translate content=\"gateway.symbol\" /></th>\n                            <th><Translate content=\"gateway.deposit_address\" /></th>\n                            <th><Translate content=\"gateway.balance\" /></th>\n                            <th><Translate content=\"gateway.withdraw\" /></th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                            <OpenLedgerFiatDepositWithdrawCurrency\n                                rpc_url={this.props.rpc_url}\n                                account={this.props.account}\n                                issuer_account={this.props.issuer_account}\n                                deposit_asset=\"USD\"\n                                receive_asset=\"OPEN.USD\"\n                                deposit_allowed={this.state.allowedFiatCurrencies.deposit.indexOf(\"USD\") > -1}\n                                withdraw_allowed={this.state.allowedFiatCurrencies.withdraw.indexOf(\"USD\") > -1}/>\n                            <OpenLedgerFiatDepositWithdrawCurrency\n                                rpc_url={this.props.rpc_url}\n                                account={this.props.account}\n                                issuer_account={this.props.issuer_account}\n                                deposit_asset=\"EUR\"\n                                receive_asset=\"OPEN.EUR\"\n                                deposit_allowed={this.state.allowedFiatCurrencies.deposit.indexOf(\"EUR\") > -1}\n                                withdraw_allowed={this.state.allowedFiatCurrencies.withdraw.indexOf(\"EUR\") > -1}/>\n                            <OpenLedgerFiatDepositWithdrawCurrency\n                                rpc_url={this.props.rpc_url}\n                                account={this.props.account}\n                                issuer_account={this.props.issuer_account}\n                                deposit_asset=\"CNY\"\n                                receive_asset=\"OPEN.CNY\"\n                                deposit_allowed={this.state.allowedFiatCurrencies.deposit.indexOf(\"CNY\") > -1}\n                                withdraw_allowed={this.state.allowedFiatCurrencies.withdraw.indexOf(\"CNY\") > -1}/>\n                        </tbody>\n                    </table>;*/\n    }\n} // OpenLedgerFiatDepositWithdrawal\nOpenLedgerFiatDepositWithdrawal = BindToChainState(\n    OpenLedgerFiatDepositWithdrawal\n);\n\nexport default OpenLedgerFiatDepositWithdrawal;\n","import React from \"react\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport PropTypes from \"prop-types\";\n\nclass DepositFiatOpenLedger extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer_account: ChainTypes.ChainAccount.isRequired,\n        deposit_asset: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset.isRequired,\n        rpc_url: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            deposit_amount: null,\n            deposit_info: null,\n            deposit_error: null\n        };\n    }\n\n    onDepositAmountChange({amount, asset}) {\n        this.setState({deposit_amount: amount});\n    }\n\n    onSubmitDeposit() {\n        let asset = this.props.receive_asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = this.state.deposit_amount.replace(/,/g, \"\");\n        console.log(\"deposit_amount: \", amount);\n\n        let json_rpc_request = {\n            jsonrpc: \"2.0\",\n            method: \"getDepositAccount\",\n            params: {\n                bitsharesAccountName: this.props.account.get(\"name\"),\n                currency: this.props.deposit_asset,\n                amount: amount\n            },\n            id: 1\n        };\n\n        let is_deposit_approved_promise = fetch(this.props.rpc_url, {\n            method: \"POST\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"content-type\": \"application/x-www-form-urlencoded\"\n            }),\n            body: \"rq=\" + encodeURIComponent(JSON.stringify(json_rpc_request))\n        }).then(response => response.json());\n\n        is_deposit_approved_promise\n            .then(json_response => {\n                if (\"result\" in json_response)\n                    this.setState({deposit_info: json_response.result});\n                else if (\n                    \"error\" in json_reponse &&\n                    \"message\" in json_response.error\n                )\n                    this.setState({deposit_error: json_response.error.message});\n                else\n                    this.setState({\n                        deposit_error:\n                            \"Unable to approve deposit, please contact OpenLedger or try again later\"\n                    });\n            })\n            .catch(error => {\n                this.setState({\n                    deposit_error:\n                        \"Unable to approve deposit, please contact OpenLedger or try again later\"\n                });\n            });\n    }\n\n    onClose() {\n        // reset the state so the next time the dialog is launched, it doesn't show the old data\n        this.setState({\n            deposit_amount: null,\n            deposit_info: null,\n            deposit_error: null\n        });\n        ZfApi.publish(this.props.modal_id, \"close\");\n    }\n\n    render() {\n        if (this.state.deposit_error) {\n            // then we've failed to approve them\n            return (\n                <form className=\"grid-block vertical full-width-content\">\n                    <div className=\"grid-container\">\n                        <div className=\"content-block\">\n                            <h3>Deposit Error</h3>\n                        </div>\n                        <div className=\"content-block\">\n                            <p>{this.state.deposit_error}</p>\n                        </div>\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onClose.bind(this)}\n                                value=\"Close\"\n                            />\n                        </div>\n                    </div>\n                </form>\n            );\n        } else if (this.state.deposit_info) {\n            // then they've been approved for deposit\n            if (\"link\" in this.state.deposit_info)\n                return (\n                    <form className=\"grid-block vertical full-width-content\">\n                        <div className=\"grid-container\">\n                            <div className=\"content-block\">\n                                <h3>Deposit Information</h3>\n                            </div>\n                            <div className=\"content-block\">\n                                <p>\n                                    Click{\" \"}\n                                    <a\n                                        href={this.state.deposit_info.link}\n                                        rel=\"noopener noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        here\n                                    </a>{\" \"}\n                                    for deposit instructions\n                                </p>\n                            </div>\n                            <div className=\"content-block\">\n                                <input\n                                    type=\"submit\"\n                                    className=\"button\"\n                                    onClick={this.onClose.bind(this)}\n                                    value=\"Close\"\n                                />\n                            </div>\n                        </div>\n                    </form>\n                );\n\n            // old dead code for displaying all returned fields as text\n            let table_lines = [];\n            for (var key in this.state.deposit_info)\n                if (this.state.deposit_info.hasOwnProperty(key))\n                    table_lines.push(\n                        <tr>\n                            <td>{key}</td>\n                            <td>{this.state.deposit_info[key]}</td>\n                        </tr>\n                    );\n            return (\n                <form className=\"grid-block vertical full-width-content\">\n                    <div className=\"grid-container\">\n                        <div className=\"content-block\">\n                            <h3>Deposit Information</h3>\n                        </div>\n                        <div className=\"content-block\">\n                            <table className=\"table\">\n                                <tbody>{table_lines}</tbody>\n                            </table>\n                        </div>\n\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onClose.bind(this)}\n                                value={counterpart.translate(\n                                    \"account.perm.cancel\"\n                                )}\n                            />\n                            {/* <Trigger close={this.props.modal_id}>\n                          <div className=\"button\">Close</a>\n                        </Trigger> */}\n                        </div>\n                    </div>\n                </form>\n            );\n        } else {\n            // they haven't clicked deposit, ask them how much they're depositing\n            return (\n                <form className=\"grid-block vertical full-width-content\">\n                    <div className=\"grid-container\">\n                        <div className=\"content-block\">\n                            <h3>Deposit {this.props.deposit_asset}</h3>\n                        </div>\n                        <div className=\"content-block\">\n                            <AmountSelector\n                                label=\"modal.deposit.amount\"\n                                amount={this.state.deposit_amount}\n                                asset={this.props.receive_asset.get(\"id\")}\n                                assets={[this.props.receive_asset.get(\"id\")]}\n                                placeholder=\"0.0\"\n                                onChange={this.onDepositAmountChange.bind(this)}\n                                display_balance={null}\n                            />\n                        </div>\n\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onSubmitDeposit.bind(this)}\n                                value={counterpart.translate(\n                                    \"modal.deposit.submit\"\n                                )}\n                            />\n                            <input\n                                type=\"submit\"\n                                className=\" button\"\n                                onClick={this.onClose.bind(this)}\n                                value={counterpart.translate(\n                                    \"account.perm.cancel\"\n                                )}\n                            />\n                            {/* <Trigger close={this.props.modal_id}>\n                              <div className=\"button\"><Translate content=\"account.perm.cancel\" /></div>\n                          </Trigger> */}\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n    }\n}\n\nexport default BindToChainState(DepositFiatOpenLedger);\n","import React from \"react\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport AccountActions from \"actions/AccountActions\";\nimport PropTypes from \"prop-types\";\n\nclass WithdrawFiatOpenLedger extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer_account: ChainTypes.ChainAccount.isRequired,\n        deposit_asset: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset.isRequired,\n        rpc_url: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            withdraw_amount: null\n        };\n    }\n\n    onWithdrawAmountChange({amount, asset}) {\n        this.setState({withdraw_amount: amount});\n    }\n\n    onSubmit() {\n        let asset = this.props.receive_asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = this.state.withdraw_amount.replace(/,/g, \"\");\n\n        let json_rpc_request = {\n            jsonrpc: \"2.0\",\n            method: \"getMemoForFiatWithdrawal\",\n            params: {\n                bitsharesAccountName: this.props.account.get(\"name\"),\n                currency: this.props.deposit_asset,\n                amount: amount\n            },\n            id: 1\n        };\n        let is_withdrawal_approved_promise = fetch(this.props.rpc_url, {\n            method: \"POST\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"content-type\": \"application/x-www-form-urlencoded\"\n            }),\n            body: \"rq=\" + encodeURIComponent(JSON.stringify(json_rpc_request))\n        }).then(response => response.json());\n\n        is_withdrawal_approved_promise\n            .then(json_response => {\n                if (\"result\" in json_response)\n                    AccountActions.transfer(\n                        this.props.account.get(\"id\"),\n                        this.props.issuer_account.get(\"id\"),\n                        parseInt(amount * precision, 10),\n                        asset.get(\"id\"),\n                        json_response.result\n                    );\n                else if (\n                    \"error\" in json_response &&\n                    \"message\" in json_response.error\n                )\n                    throw json_repsonse.error.message;\n                else\n                    throw \"Unable to approve withdrawal, please contact OpenLedger or try again later\";\n            })\n            .catch(error => {\n                alert(error);\n            });\n    }\n\n    render() {\n        let balance = null;\n        // console.log( \"account: \", this.props.account.toJS() );\n        let account_balances = this.props.account.get(\"balances\").toJS();\n        // console.log( \"balances: \", account_balances );\n        let asset_types = Object.keys(account_balances);\n\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.receive_asset.get(\"id\");\n            if (current_asset_id)\n                balance = (\n                    <span>\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />:{\" \"}\n                        <BalanceComponent\n                            balance={account_balances[current_asset_id]}\n                        />\n                    </span>\n                );\n            else balance = \"No funds\";\n        } else {\n            balance = \"No funds\";\n        }\n\n        return (\n            <form className=\"grid-block vertical full-width-content\">\n                <div className=\"grid-container\">\n                    <div className=\"content-block\">\n                        <h3>Withdraw {this.props.deposit_asset}</h3>\n                    </div>\n                    <div className=\"content-block\">\n                        <AmountSelector\n                            label=\"modal.withdraw.amount\"\n                            amount={this.state.withdraw_amount}\n                            asset={this.props.receive_asset.get(\"id\")}\n                            assets={[this.props.receive_asset.get(\"id\")]}\n                            placeholder=\"0.0\"\n                            onChange={this.onWithdrawAmountChange.bind(this)}\n                            display_balance={balance}\n                        />\n                    </div>\n\n                    <div className=\"content-block\">\n                        <input\n                            type=\"submit\"\n                            className=\"button\"\n                            onClick={this.onSubmit.bind(this)}\n                            value={counterpart.translate(\n                                \"modal.withdraw.submit\"\n                            )}\n                        />\n                        <Trigger close={this.props.modal_id}>\n                            <div className=\"button\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default BindToChainState(WithdrawFiatOpenLedger);\n","import React from \"react\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport Translate from \"react-translate-component\";\nimport PropTypes from \"prop-types\";\n\nclass OpenLedgerFiatTransactionHistory extends React.Component {\n    static propTypes = {\n        rpc_url: PropTypes.string,\n        account: ChainTypes.ChainAccount\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            current_status: \"never_loaded\",\n            withdrawals: null,\n            deposits: null,\n            error: null\n        };\n    }\n\n    onShowOpenLedgerTransactionHistory() {\n        let json_rpc_request = {\n            jsonrpc: \"2.0\",\n            method: \"getRequestsList\",\n            params: {\n                bitsharesAccountName: this.props.account.get(\"name\")\n            },\n            id: 1\n        };\n        let get_transaction_history_promise = fetch(this.props.rpc_url, {\n            method: \"POST\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"content-type\": \"application/x-www-form-urlencoded\"\n            }),\n            body: \"rq=\" + encodeURIComponent(JSON.stringify(json_rpc_request))\n        }).then(response => response.json());\n\n        get_transaction_history_promise\n            .then(json_response => {\n                if (\"result\" in json_response) {\n                    this.setState({\n                        current_status: \"loaded\",\n                        withdrawals: json_response.result.withdrawals,\n                        deposits: json_response.result.deposits,\n                        error: null\n                    });\n                } else if (\n                    \"error\" in json_response &&\n                    \"message\" in json_response.error\n                )\n                    throw json_repsonse.error.message;\n                else throw \"Unexpected response\";\n            })\n            .catch(error => {\n                this.setState({\n                    current_status: \"error\",\n                    withdrawals: null,\n                    deposits: null,\n                    error: \"Error getting transaction history: \" + error\n                });\n            });\n    }\n\n    render() {\n        if (!this.props.account) return null;\n\n        let openledger_withdrawal_history_fragment = null;\n        if (this.state.current_status === \"loaded\") {\n            let openledger_withdrawal_history_rows = [];\n            if (this.state.withdrawals.length) {\n                for (var i = 0; i < this.state.withdrawals.length; ++i)\n                    openledger_withdrawal_history_rows.push(\n                        <tr>\n                            <td>\n                                {this.state.withdrawals[i].amount}{\" \"}\n                                {this.state.withdrawals[i].currency}\n                            </td>\n                            <td>{this.state.withdrawals[i].status}</td>\n                        </tr>\n                    );\n                openledger_withdrawal_history_fragment = (\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    <Translate content=\"openledger.withdraw_amount\" />\n                                </th>\n                                <th>\n                                    <Translate content=\"openledger.status\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>{openledger_withdrawal_history_rows}</tbody>\n                    </table>\n                );\n            } else\n                openledger_withdrawal_history_fragment = (\n                    <Translate\n                        component=\"p\"\n                        content=\"openledger.withdraw_none\"\n                    />\n                );\n        }\n\n        let openledger_deposit_history_fragment = null;\n        if (this.state.current_status === \"loaded\") {\n            if (this.state.deposits.length) {\n                let openledger_deposit_history_rows = [];\n                for (var i = 0; i < this.state.deposits.length; ++i)\n                    openledger_deposit_history_rows.push(\n                        <tr>\n                            <td>\n                                {this.state.deposits[i].amount}{\" \"}\n                                {this.state.deposits[i].currency}\n                            </td>\n                            <td>\n                                <a\n                                    href={this.state.deposits[i].link}\n                                    rel=\"noopener noreferrer\"\n                                    target=\"_blank\"\n                                >\n                                    link\n                                </a>\n                            </td>\n                            <td>{this.state.deposits[i].status}</td>\n                        </tr>\n                    );\n                openledger_deposit_history_fragment = (\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>\n                                    <Translate content=\"openledger.deposit_amount\" />\n                                </th>\n                                <th>\n                                    <Translate content=\"openledger.deposit_details\" />\n                                </th>\n                                <th>\n                                    <Translate content=\"openledger.status\" />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>{openledger_deposit_history_rows}</tbody>\n                    </table>\n                );\n            } else\n                openledger_deposit_history_fragment = (\n                    <Translate\n                        component=\"p\"\n                        content=\"openledger.deposit_none\"\n                    />\n                );\n        }\n\n        let openledger_transaction_history_fragment = null;\n\n        if (this.state.current_status === \"error\")\n            openledger_transaction_history_fragment = (\n                <div className=\"content-block\">\n                    <button\n                        className={\"button outline\"}\n                        onClick={this.onShowOpenLedgerTransactionHistory.bind(\n                            this\n                        )}\n                    >\n                        <Translate content=\"openledger.retry\" />\n                    </button>\n                    <p>{this.state.error}</p>\n                </div>\n            );\n        else if (this.state.current_status === \"loading\")\n            openledger_transaction_history_fragment = (\n                <div className=\"content-block\">\n                    <button\n                        className={\"button outline\"}\n                        onClick={this.onShowOpenLedgerTransactionHistory.bind(\n                            this\n                        )}\n                        disabled=\"true\"\n                    >\n                        <Translate content=\"openledger.show_transaction_history\" />\n                    </button>\n                    <Translate component=\"p\" content=\"openledger.loading\" />\n                </div>\n            );\n        else {\n            let button_label =\n                this.state.current_status === \"never_loaded\" ? (\n                    <Translate content=\"openledger.show_transaction_history\" />\n                ) : (\n                    <Translate content=\"openledger.refresh_transaction_history\" />\n                );\n            openledger_transaction_history_fragment = (\n                <div className=\"content-block\">\n                    <br />\n                    <Translate\n                        component=\"h4\"\n                        content=\"openledger.header_transaction_history\"\n                    />\n                    <button\n                        className={\"button outline\"}\n                        onClick={this.onShowOpenLedgerTransactionHistory.bind(\n                            this\n                        )}\n                    >\n                        {button_label}\n                    </button>\n                    {openledger_withdrawal_history_fragment}\n                    {openledger_deposit_history_fragment}\n                </div>\n            );\n        }\n\n        return openledger_transaction_history_fragment;\n    }\n} // OpenLedgerFiatTransactionHistory\n\nexport default BindToChainState(OpenLedgerFiatTransactionHistory);\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport WithdrawModalBlocktrades from \"./WithdrawModalBlocktrades\";\nimport BlockTradesDepositAddressCache from \"common/BlockTradesDepositAddressCache\";\nimport utils from \"common/utils\";\nimport AccountActions from \"actions/AccountActions\";\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\nimport {blockTradesAPIs} from \"api/apiConfig\";\nimport {debounce} from \"lodash-es\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport {Asset} from \"common/MarketClasses\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {getConversionJson} from \"common/gatewayMethods\";\nimport PropTypes from \"prop-types\";\n\nclass ButtonConversion extends React.Component {\n    static propTypes = {\n        balance: ChainTypes.ChainObject,\n        input_coin_type: PropTypes.string.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        account_name: PropTypes.string.isRequired,\n        account_id: PropTypes.string.isRequired,\n        url: PropTypes.string.isRequired\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            conversion_memo: null,\n\n            // Fee estimation\n            feeStatus: {}\n        };\n\n        this._updateFee = debounce(this._updateFee.bind(this), 150);\n        this._checkFeeStatus = this._checkFeeStatus.bind(this);\n        this._checkBalance = this._checkBalance.bind(this);\n    }\n\n    _getFeeID(props = this.props) {\n        const balance = this._getCurrentBalance(props);\n        const balances = props.account.get(\"balances\");\n        let feeID = balances.has(\"1.3.0\")\n            ? \"1.3.0\"\n            : balance\n                ? balance.get(\"asset_type\")\n                : \"1.3.0\";\n        return feeID;\n    }\n\n    componentWillMount() {\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            !np.amount.equals(this.props.amount) ||\n            np.account_id !== this.props.account_id\n        ) {\n            this._updateFee();\n        }\n    }\n\n    _updateFee() {\n        const feeID = this._getFeeID();\n        getConversionJson(this.props).then(json => {\n            checkFeeStatusAsync({\n                accountID: this.props.account_id,\n                feeID: feeID,\n                options: [\"price_per_kbyte\"],\n                data: {\n                    type: \"memo\",\n                    content: json.inputMemo\n                }\n            }).then(({fee, hasBalance, hasPoolBalance}) => {\n                if (this.unMounted) return;\n\n                this.setState(\n                    {\n                        feeAmount: fee,\n                        hasBalance,\n                        hasPoolBalance,\n                        error: !hasBalance || !hasPoolBalance\n                    },\n                    this._checkFeeStatus\n                );\n            });\n        });\n    }\n\n    _checkFeeStatus(account = this.props.account) {\n        if (!account) return;\n\n        let assets = Object.keys(this.props.account.get(\"balances\").toJS());\n        if (!assets.length) assets = [\"1.3.0\"];\n        let feeStatus = {};\n        let p = [];\n        getConversionJson(this.props).then(json => {\n            assets.forEach(a => {\n                p.push(\n                    checkFeeStatusAsync({\n                        accountID: account.get(\"id\"),\n                        feeID: a,\n                        options: [\"price_per_kbyte\"],\n                        data: {\n                            type: \"memo\",\n                            content: json.inputMemo\n                        }\n                    })\n                );\n            });\n            Promise.all(p)\n                .then(status => {\n                    if (this.unMounted) return;\n\n                    assets.forEach((a, idx) => {\n                        feeStatus[a] = status[idx];\n                    });\n\n                    if (\n                        !utils.are_equal_shallow(\n                            this.state.feeStatus,\n                            feeStatus\n                        )\n                    ) {\n                        this.setState({\n                            feeStatus\n                        });\n                    }\n                    this._checkBalance();\n                })\n                .catch(err => {\n                    console.error(err);\n                });\n        });\n    }\n\n    _getCurrentBalance(props = this.props) {\n        return props.balance;\n    }\n\n    _checkBalance() {\n        const {feeAmount} = this.state;\n        const {asset, amount} = this.props;\n        const balance = this._getCurrentBalance();\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            amount.getAmount({real: true}),\n            asset,\n            feeAmount,\n            balance\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n        return hasBalance;\n    }\n\n    onTrxIncluded(confirm_store_state) {\n        if (\n            confirm_store_state.included &&\n            confirm_store_state.broadcasted_transaction\n        ) {\n            // this.setState(Transfer.getInitialState());\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        } else if (confirm_store_state.closed) {\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        }\n    }\n\n    onConvert() {\n        const {input_coin_type, output_coin_type, amount} = this.props;\n        const {balanceError} = this.state;\n        getConversionJson(this.props)\n            .then(json => {\n                if (\n                    json.inputCoinType != input_coin_type ||\n                    json.outputCoinType != output_coin_type\n                ) {\n                    throw new Error(\"unexpected reply from initiate-trade\");\n                }\n                if (\n                    input_coin_type == json.inputCoinType &&\n                    output_coin_type == json.outputCoinType &&\n                    !balanceError\n                ) {\n                    this.setState({conversion_memo: json.inputMemo});\n                    this.setState({error: null});\n                    // let precision = utils.get_asset_precision(this.props.asset.get(\"precision\"));\n                    // let amount = this.props.amount.replace( /,/g, \"\" );\n\n                    AccountActions.transfer(\n                        this.props.account_id,\n                        \"1.2.32567\",\n                        amount.getAmount(),\n                        this.props.asset.get(\"id\"),\n                        json.inputMemo\n                            ? new Buffer(json.inputMemo, \"utf-8\")\n                            : \"\",\n                        null,\n                        this._getFeeID()\n                    )\n                        .then(() => {\n                            TransactionConfirmStore.unlisten(\n                                this.onTrxIncluded\n                            );\n                            TransactionConfirmStore.listen(this.onTrxIncluded);\n                        })\n                        .catch(e => {\n                            let msg = e.message\n                                ? e.message.split(\"\\n\")[1]\n                                : null;\n                            console.log(\"error: \", e, msg);\n                            this.setState({error: msg});\n                        });\n                }\n            })\n            .catch(() => {\n                this.setState({conversion_memo: null});\n            });\n    }\n\n    render() {\n        let button_class = \"button disabled\";\n        if (\n            Object.keys(this.props.account_balances.toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            if (\n                !this.state.balanceError &&\n                this.state.hasBalance &&\n                this.props.amount.getAmount() > 0\n            ) {\n                button_class = \"button\";\n            }\n        }\n\n        return (\n            <span>\n                <button\n                    className={button_class}\n                    onClick={this.onConvert.bind(this)}\n                >\n                    <Translate content=\"\" />\n                    <Translate content=\"gateway.convert_now\" />\n                </button>\n                {this.state.balanceError ? (\n                    <div style={{paddingTop: 15}} className=\"has-error\">\n                        <Translate content=\"transfer.errors.insufficient\" />\n                    </div>\n                ) : null}\n            </span>\n        );\n    }\n}\n\nButtonConversion = BindToChainState(ButtonConversion);\n\nclass ButtonConversionContainer extends React.Component {\n    static propTypes = {\n        asset: ChainTypes.ChainAsset.isRequired,\n        input_coin_type: PropTypes.string.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        account_name: PropTypes.string.isRequired,\n        account_id: PropTypes.string.isRequired,\n        url: PropTypes.string.isRequired\n    };\n\n    render() {\n        let conversion_button = (\n            <ButtonConversion\n                asset={this.props.asset}\n                account={this.props.account}\n                input_coin_type={this.props.input_coin_type}\n                output_coin_type={this.props.output_coin_type}\n                account_name={this.props.account_name}\n                amount={\n                    new Asset({\n                        real: this.props.amount,\n                        asset_id: this.props.asset.get(\"id\"),\n                        precision: this.props.asset.get(\"precision\")\n                    })\n                }\n                account_id={this.props.account_id}\n                account_balances={this.props.account_balances}\n                url={this.props.url}\n                balance={\n                    this.props.account.get(\"balances\").toJS()[\n                        this.props.asset.get(\"id\")\n                    ]\n                }\n            />\n        );\n\n        return <span>{conversion_button}</span>;\n    }\n}\n\nButtonConversionContainer = BindToChainState(ButtonConversionContainer);\n\nclass ButtonWithdraw extends React.Component {\n    static propTypes = {\n        balance: ChainTypes.ChainObject,\n        url: PropTypes.string.isRequired\n    };\n\n    getWithdrawModalId() {\n        return \"withdraw_asset_\" + this.props.gateway + \"_bridge\";\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    render() {\n        let withdraw_modal_id = this.getWithdrawModalId();\n\n        let button_class = \"button disabled\";\n        if (\n            Object.keys(this.props.account.get(\"balances\").toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            if (\n                !(this.props.amount_to_withdraw.indexOf(\" \") >= 0) &&\n                !isNaN(this.props.amount_to_withdraw) &&\n                this.props.amount_to_withdraw > 0 &&\n                this.props.amount_to_withdraw <=\n                    this.props.balance.toJS().balance /\n                        utils.get_asset_precision(\n                            this.props.asset.get(\"precision\")\n                        )\n            ) {\n                button_class = \"button\";\n            }\n        }\n\n        return (\n            <span>\n                <span>\n                    <button\n                        className={button_class}\n                        onClick={this.onWithdraw.bind(this)}\n                    >\n                        <Translate content=\"\" />\n                        <Translate content=\"gateway.withdraw_now\" />{\" \"}\n                    </button>\n                </span>\n                <BaseModal id={withdraw_modal_id} overlay={true}>\n                    <br />\n                    <div className=\"grid-block vertical\">\n                        <WithdrawModalBlocktrades\n                            key={`${this.props.key}`}\n                            account={this.props.account.get(\"name\")}\n                            issuer={this.props.issuer}\n                            asset={this.props.asset.get(\"id\")}\n                            output_coin_name={this.props.output_coin_name}\n                            output_coin_symbol={this.props.output_coin_symbol}\n                            output_coin_type={this.props.output_coin_type}\n                            output_supports_memos={\n                                this.props.output_supports_memos\n                            }\n                            amount_to_withdraw={this.props.amount_to_withdraw}\n                            modal_id={withdraw_modal_id}\n                            url={this.props.url}\n                            output_wallet_type={this.props.output_wallet_type}\n                            balance={\n                                this.props.account.get(\"balances\").toJS()[\n                                    this.props.asset.get(\"id\")\n                                ]\n                            }\n                        />\n                    </div>\n                </BaseModal>\n            </span>\n        );\n    }\n}\n\nButtonWithdraw = BindToChainState(ButtonWithdraw);\n\nclass ButtonWithdrawContainer extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        url: PropTypes.string.isRequired\n    };\n\n    render() {\n        let withdraw_button = (\n            <ButtonWithdraw\n                key={this.props.key}\n                account={this.props.account}\n                issuer={this.props.issuer}\n                asset={this.props.asset}\n                output_coin_name={this.props.output_coin_name}\n                output_coin_symbol={this.props.output_coin_symbol}\n                output_coin_type={this.props.output_coin_type}\n                output_supports_memos={this.props.output_supports_memos}\n                amount_to_withdraw={this.props.amount_to_withdraw}\n                url={this.props.url}\n                gateway={this.props.gateway}\n                output_wallet_type={this.props.output_wallet_type}\n                balance={\n                    this.props.account.get(\"balances\").toJS()[\n                        this.props.asset.get(\"id\")\n                    ]\n                }\n            />\n        );\n\n        return <span>{withdraw_button}</span>;\n    }\n}\n\nButtonWithdrawContainer = BindToChainState(ButtonWithdrawContainer);\n\nclass BlockTradesBridgeDepositRequest extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n        gateway: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        initial_deposit_input_coin_type: PropTypes.string,\n        initial_deposit_output_coin_type: PropTypes.string,\n        initial_deposit_estimated_input_amount: PropTypes.string,\n        initial_withdraw_input_coin_type: PropTypes.string,\n        initial_withdraw_output_coin_type: PropTypes.string,\n        initial_withdraw_estimated_input_amount: PropTypes.string,\n        initial_conversion_input_coin_type: PropTypes.string,\n        initial_conversion_output_coin_type: PropTypes.string,\n        initial_conversion_estimated_input_amount: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n        this.refresh_interval = 2 * 60 * 1000; // update deposit limit/estimates every two minutes\n\n        this.deposit_address_cache = new BlockTradesDepositAddressCache();\n\n        this.coin_info_request_states = {\n            request_in_progress: 0,\n            request_complete: 1,\n            request_failed: 2\n        };\n\n        this.estimation_directions = {\n            output_from_input: 0,\n            input_from_output: 1\n        };\n\n        this.state = {\n            coin_symbol: \"btc\",\n            key_for_withdrawal_dialog: \"btc\",\n            supports_output_memos: \"\",\n            url: blockTradesAPIs.BASE,\n            error: null,\n\n            // things that get displayed for deposits\n            deposit_input_coin_type: null,\n            deposit_output_coin_type: null,\n            input_address_and_memo: null,\n            deposit_estimated_input_amount:\n                this.props.initial_deposit_estimated_input_amount || \"1.0\",\n            deposit_estimated_output_amount: null,\n            deposit_limit: null,\n            deposit_error: null,\n            failed_calculate_deposit: null,\n\n            // things that get displayed for withdrawals\n            withdraw_input_coin_type: null,\n            withdraw_output_coin_type: null,\n            withdraw_estimated_input_amount:\n                this.props.initial_withdraw_estimated_input_amount || \"1.0\",\n            withdraw_estimated_output_amount: null,\n            withdraw_limit: null,\n            withdraw_error: null,\n            failed_calculate_withdraw: null,\n\n            // things that get displayed for conversions\n            conversion_input_coin_type: null,\n            conversion_output_coin_type: null,\n            conversion_estimated_input_amount:\n                this.props.initial_conversion_estimated_input_amount || \"1.0\",\n            conversion_estimated_output_amount: null,\n            conversion_limit: null,\n            conversion_error: null,\n            failed_calculate_conversion: null,\n\n            // input address-related\n            coin_info_request_state: this.coin_info_request_states\n                .request_in_progress,\n            input_address_requests_in_progress: {},\n\n            // estimate-related\n            deposit_estimate_direction: this.estimation_directions\n                .output_from_input,\n\n            // deposit limit-related\n            deposit_limit_cache: {},\n            deposit_limit_requests_in_progress: {},\n\n            // generic data from BlockTrades\n            coins_by_type: null,\n            allowed_mappings_for_deposit: null,\n            allowed_mappings_for_withdraw: null,\n            allowed_mappings_for_conversion: null,\n            conversion_memo: null,\n\n            // announcements data\n            announcements: []\n        };\n    }\n\n    urlConnection(checkUrl, state_coin_info) {\n        this.setState({\n            url: checkUrl\n        });\n\n        let announcements_url = checkUrl + \"/announcements/enabled/trade\";\n        let announcements_promise = fetch(announcements_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n\n        Promise.resolve(announcements_promise)\n            .then(result => {\n                result.sort((a, b) => {\n                    if (a.priority < b.priority) return -1;\n                    if (a.priority > b.priority) return 1;\n                    return 0;\n                });\n\n                this.setState({\n                    announcements: result\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    announcements: []\n                });\n            });\n\n        // get basic data from blocktrades\n        let coin_types_url = checkUrl + \"/coins\";\n        let coin_types_promise = fetch(coin_types_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n\n        let wallet_types_url = checkUrl + \"/wallets\";\n        let wallet_types_promise = fetch(wallet_types_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n\n        let trading_pairs_url = checkUrl + \"/trading-pairs\";\n        let trading_pairs_promise = fetch(trading_pairs_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n\n        let active_wallets_url = checkUrl + \"/active-wallets\";\n        let active_wallets_promise = fetch(active_wallets_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n\n        Promise.all([\n            coin_types_promise,\n            wallet_types_promise,\n            trading_pairs_promise,\n            active_wallets_promise\n        ])\n            .then(json_responses => {\n                let [\n                    coin_types,\n                    wallet_types_reply,\n                    trading_pairs,\n                    active_wallets\n                ] = json_responses;\n\n                // get quick access to coins by their types\n                let coins_by_type = {};\n                coin_types.forEach(\n                    coin_type => (coins_by_type[coin_type.coinType] = coin_type)\n                );\n\n                // determine which mappings we will display for deposits and withdrawals\n                let allowed_mappings_for_deposit = {}; // all non-bts to bts\n                let allowed_mappings_for_withdraw = {}; // all bts to non-bts\n                let allowed_mappings_for_conversion = {}; // all bts to bts\n                trading_pairs.forEach(pair => {\n                    let input_coin_info = coins_by_type[pair.inputCoinType];\n                    let output_coin_info = coins_by_type[pair.outputCoinType];\n\n                    // filter out pairs where one asset is a backed asset and the other is a backing asset,\n                    // those pairs rightly belong under the gateway section, not under the bridge section.\n                    if (\n                        input_coin_info.backingCoinType !=\n                            pair.outputCoinType &&\n                        output_coin_info.backingCoinType !=\n                            pair.inputCoinType &&\n                        input_coin_info.restricted == false &&\n                        output_coin_info.restricted == false\n                    ) {\n                        // filter out mappings where one of the wallets is offline\n                        if (\n                            active_wallets.indexOf(\n                                input_coin_info.walletType\n                            ) != -1 &&\n                            active_wallets.indexOf(\n                                output_coin_info.walletType\n                            ) != -1\n                        ) {\n                            if (\n                                input_coin_info.walletType != \"bitshares2\" &&\n                                output_coin_info.walletType == \"bitshares2\"\n                            ) {\n                                allowed_mappings_for_deposit[\n                                    pair.inputCoinType\n                                ] =\n                                    allowed_mappings_for_deposit[\n                                        pair.inputCoinType\n                                    ] || [];\n                                allowed_mappings_for_deposit[\n                                    pair.inputCoinType\n                                ].push(pair.outputCoinType);\n                            } else if (\n                                input_coin_info.walletType == \"bitshares2\" &&\n                                output_coin_info.walletType != \"bitshares2\"\n                            ) {\n                                allowed_mappings_for_withdraw[\n                                    pair.inputCoinType\n                                ] =\n                                    allowed_mappings_for_withdraw[\n                                        pair.inputCoinType\n                                    ] || [];\n                                allowed_mappings_for_withdraw[\n                                    pair.inputCoinType\n                                ].push(pair.outputCoinType);\n                            } else if (\n                                input_coin_info.walletType == \"bitshares2\" &&\n                                output_coin_info.walletType == \"bitshares2\"\n                            ) {\n                                allowed_mappings_for_conversion[\n                                    pair.inputCoinType\n                                ] =\n                                    allowed_mappings_for_conversion[\n                                        pair.inputCoinType\n                                    ] || [];\n                                allowed_mappings_for_conversion[\n                                    pair.inputCoinType\n                                ].push(pair.outputCoinType);\n                            }\n                        }\n                    }\n                });\n\n                // we can now set the input and output coin types\n                let deposit_input_coin_type = null;\n                let deposit_output_coin_type = null;\n                let allowed_deposit_coin_types = Object.keys(\n                    allowed_mappings_for_deposit\n                );\n                allowed_deposit_coin_types.forEach(deposit_coin_type => {\n                    allowed_mappings_for_deposit[deposit_coin_type].sort();\n                });\n\n                if (allowed_deposit_coin_types.length) {\n                    if (\n                        this.props.initial_deposit_input_coin_type &&\n                        this.props.initial_deposit_input_coin_type in\n                            allowed_mappings_for_deposit\n                    )\n                        deposit_input_coin_type = this.props\n                            .initial_deposit_input_coin_type;\n                    else\n                        deposit_input_coin_type = allowed_deposit_coin_types[0];\n                    let output_coin_types_for_this_input =\n                        allowed_mappings_for_deposit[deposit_input_coin_type];\n                    if (\n                        this.props.initial_deposit_output_coin_type &&\n                        output_coin_types_for_this_input.indexOf(\n                            this.props.initial_deposit_output_coin_type\n                        ) != -1\n                    )\n                        deposit_output_coin_type = this.props\n                            .initial_deposit_output_coin_type;\n                    else\n                        deposit_output_coin_type =\n                            output_coin_types_for_this_input[0];\n                }\n\n                let withdraw_input_coin_type = null;\n                let withdraw_output_coin_type = null;\n                let conversion_input_coin_type = null;\n                let conversion_output_coin_type = null;\n                let allowed_withdraw_coin_types = Object.keys(\n                    allowed_mappings_for_withdraw\n                );\n                allowed_withdraw_coin_types.forEach(withdraw_coin_type => {\n                    allowed_mappings_for_withdraw[withdraw_coin_type].sort();\n                });\n\n                if (allowed_withdraw_coin_types.length) {\n                    if (\n                        this.props.initial_withdraw_input_coin_type &&\n                        this.props.initial_withdraw_input_coin_type in\n                            allowed_mappings_for_withdraw\n                    )\n                        withdraw_input_coin_type = this.props\n                            .initial_withdraw_input_coin_type;\n                    else\n                        withdraw_input_coin_type =\n                            allowed_withdraw_coin_types[0];\n                    let output_coin_types_for_this_input =\n                        allowed_mappings_for_withdraw[withdraw_input_coin_type];\n                    if (\n                        this.props.initial_withdraw_output_coin_type &&\n                        output_coin_types_for_this_input.indexOf(\n                            this.props.initial_withdraw_output_coin_type\n                        ) != -1\n                    )\n                        withdraw_output_coin_type = this.props\n                            .initial_withdraw_output_coin_type;\n                    else\n                        withdraw_output_coin_type =\n                            output_coin_types_for_this_input[0];\n                }\n\n                let allowed_conversion_coin_types = Object.keys(\n                    allowed_mappings_for_conversion\n                );\n                allowed_conversion_coin_types.forEach(conversion_coin_type => {\n                    allowed_mappings_for_conversion[\n                        conversion_coin_type\n                    ].sort();\n                });\n\n                if (allowed_conversion_coin_types.length) {\n                    if (\n                        this.props.initial_conversion_input_coin_type &&\n                        this.props.initial_conversion_input_coin_type in\n                            allowed_mappings_for_conversion\n                    )\n                        conversion_input_coin_type = this.props\n                            .initial_conversion_input_coin_type;\n                    else\n                        conversion_input_coin_type =\n                            allowed_conversion_coin_types[0];\n                    let output_coin_types_for_this_input =\n                        allowed_mappings_for_conversion[\n                            conversion_input_coin_type\n                        ];\n                    if (\n                        this.props.initial_conversion_output_coin_type &&\n                        output_coin_types_for_this_input.indexOf(\n                            this.props.initial_conversion_output_coin_type\n                        ) != -1\n                    )\n                        conversion_output_coin_type = this.props\n                            .initial_conversion_output_coin_type;\n                    else\n                        conversion_output_coin_type =\n                            output_coin_types_for_this_input[0];\n                }\n\n                let input_address_and_memo = this.getCachedOrGeneratedInputAddress(\n                    deposit_input_coin_type,\n                    deposit_output_coin_type\n                );\n\n                let deposit_limit = this.getCachedOrFreshDepositLimit(\n                    \"deposit\",\n                    deposit_input_coin_type,\n                    deposit_output_coin_type\n                );\n                let deposit_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"deposit\",\n                    deposit_input_coin_type,\n                    deposit_output_coin_type,\n                    this.state.deposit_estimated_input_amount\n                );\n\n                let withdraw_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"withdraw\",\n                    withdraw_input_coin_type,\n                    withdraw_output_coin_type,\n                    this.state.withdraw_estimated_input_amount\n                );\n                let withdraw_limit = this.getCachedOrFreshDepositLimit(\n                    \"withdraw\",\n                    withdraw_input_coin_type,\n                    withdraw_output_coin_type\n                );\n\n                let conversion_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"conversion\",\n                    conversion_input_coin_type,\n                    conversion_output_coin_type,\n                    this.state.conversion_estimated_input_amount\n                );\n                let conversion_limit = this.getCachedOrFreshDepositLimit(\n                    \"conversion\",\n                    conversion_input_coin_type,\n                    conversion_output_coin_type\n                );\n\n                if (this.unMounted) return;\n\n                this.setState({\n                    coin_info_request_state: this.coin_info_request_states\n                        .request_complete,\n                    coins_by_type: coins_by_type,\n                    allowed_mappings_for_deposit: allowed_mappings_for_deposit,\n                    allowed_mappings_for_withdraw: allowed_mappings_for_withdraw,\n                    allowed_mappings_for_conversion: allowed_mappings_for_conversion,\n                    deposit_input_coin_type: deposit_input_coin_type,\n                    deposit_output_coin_type: deposit_output_coin_type,\n                    input_address_and_memo: input_address_and_memo,\n                    deposit_limit: deposit_limit,\n                    deposit_estimated_output_amount: deposit_estimated_output_amount,\n                    deposit_estimate_direction: this.estimation_directions\n                        .output_from_input,\n                    withdraw_input_coin_type: withdraw_input_coin_type,\n                    withdraw_output_coin_type: withdraw_output_coin_type,\n                    withdraw_limit: withdraw_limit,\n                    withdraw_estimated_output_amount: withdraw_estimated_output_amount,\n                    conversion_input_coin_type: conversion_input_coin_type,\n                    conversion_output_coin_type: conversion_output_coin_type,\n                    conversion_limit: conversion_limit,\n                    conversion_estimated_output_amount: conversion_estimated_output_amount,\n                    withdraw_estimate_direction: this.estimation_directions\n                        .output_from_input,\n                    conversion_estimate_direction: this.estimation_directions\n                        .output_from_input,\n                    supports_output_memos:\n                        coins_by_type[\"btc\"].supportsOutputMemos\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    coin_info_request_state: state_coin_info,\n                    coins_by_type: null,\n                    allowed_mappings_for_deposit: null,\n                    allowed_mappings_for_withdraw: null,\n                    allowed_mappings_for_conversion: null\n                });\n            });\n    }\n\n    // functions for periodically updating our deposit limit and estimates\n    updateEstimates() {\n        if (\n            this.state.deposit_input_coin_type &&\n            this.state.deposit_output_coin_type\n        ) {\n            // input address won't usually need refreshing unless there was an error\n            // generating it last time around\n            let new_input_address_and_memo = this.getCachedOrGeneratedInputAddress(\n                this.state.deposit_input_coin_type,\n                this.state.deposit_output_coin_type\n            );\n\n            let new_deposit_limit = this.getCachedOrFreshDepositLimit(\n                \"deposit\",\n                this.state.deposit_input_coin_type,\n                this.state.deposit_output_coin_type\n            );\n            let new_deposit_estimated_input_amount = this.state\n                .deposit_estimated_input_amount;\n            let new_deposit_estimated_output_amount = this.state\n                .deposit_estimated_output_amount;\n\n            if (\n                this.state.deposit_estimate_direction ==\n                this.estimation_directions.output_from_input\n            )\n                new_deposit_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"deposit\",\n                    this.state.deposit_input_coin_type,\n                    this.state.deposit_output_coin_type,\n                    new_deposit_estimated_input_amount\n                );\n            else\n                new_deposit_estimated_input_amount = this.getAndUpdateInputEstimate(\n                    \"deposit\",\n                    this.state.deposit_input_coin_type,\n                    this.state.deposit_output_coin_type,\n                    new_deposit_estimated_output_amount\n                );\n\n            let new_withdraw_limit = this.getCachedOrFreshDepositLimit(\n                \"withdraw\",\n                this.state.withdraw_input_coin_type,\n                this.state.withdraw_output_coin_type\n            );\n            let new_withdraw_estimated_input_amount = this.state\n                .withdraw_estimated_input_amount;\n            let new_withdraw_estimated_output_amount = this.state\n                .withdraw_estimated_output_amount;\n\n            if (\n                this.state.withdraw_estimate_direction ==\n                this.estimation_directions.output_from_input\n            )\n                new_withdraw_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"withdraw\",\n                    this.state.withdraw_input_coin_type,\n                    this.state.withdraw_output_coin_type,\n                    new_withdraw_estimated_input_amount\n                );\n            else\n                new_withdraw_estimated_input_amount = this.getAndUpdateinputEstimate(\n                    \"withdraw\",\n                    this.state.withdraw_input_coin_type,\n                    this.state.withdraw_output_coin_type,\n                    new_withdraw_estimated_output_amount\n                );\n\n            let new_conversion_limit = this.getCachedOrFreshDepositLimit(\n                \"conversion\",\n                this.state.conversion_input_coin_type,\n                this.state.conversion_output_coin_type\n            );\n            let new_conversion_estimated_input_amount = this.state\n                .conversion_estimated_input_amount;\n            let new_conversion_estimated_output_amount = this.state\n                .conversion_estimated_output_amount;\n\n            if (\n                this.state.conversion_estimate_direction ==\n                this.estimation_directions.output_from_input\n            )\n                new_conversion_estimated_output_amount = this.getAndUpdateOutputEstimate(\n                    \"conversion\",\n                    this.state.conversion_input_coin_type,\n                    this.state.conversion_output_coin_type,\n                    new_conversion_estimated_input_amount\n                );\n            else\n                new_conversion_estimated_input_amount = this.getAndUpdateinputEstimate(\n                    \"conversion\",\n                    this.state.conversion_input_coin_type,\n                    this.state.conversion_output_coin_type,\n                    new_conversion_estimated_output_amount\n                );\n\n            this.setState({\n                input_address_and_memo: new_input_address_and_memo,\n                deposit_limit: new_deposit_limit,\n                deposit_estimated_input_amount: new_deposit_estimated_input_amount,\n                deposit_estimated_output_amount: new_deposit_estimated_output_amount,\n                withdraw_limit: new_withdraw_limit,\n                withdraw_estimated_input_amount: new_withdraw_estimated_input_amount,\n                withdraw_estimated_output_amount: new_withdraw_estimated_output_amount,\n                conversion_limit: new_conversion_limit,\n                conversion_estimated_input_amount: new_conversion_estimated_input_amount,\n                conversion_estimated_output_amount: new_conversion_estimated_output_amount,\n                key_for_withdrawal_dialog: new_withdraw_estimated_input_amount\n            });\n        }\n    }\n\n    componentWillMount() {\n        // check api.blocktrades.us/v2\n        let checkUrl = this.state.url;\n        this.urlConnection(checkUrl, 0);\n        let coin_types_promisecheck = fetch(checkUrl + \"/coins\", {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        let trading_pairs_promisecheck = fetch(checkUrl + \"/trading-pairs\", {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        let active_wallets_promisecheck = fetch(checkUrl + \"/active-wallets\", {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        Promise.all([\n            coin_types_promisecheck,\n            trading_pairs_promisecheck,\n            active_wallets_promisecheck\n        ])\n            .then(json_responses => {\n                let [\n                    coin_types,\n                    trading_pairs,\n                    active_wallets\n                ] = json_responses;\n                let coins_by_type = {};\n                coin_types.forEach(\n                    coin_type => (coins_by_type[coin_type.coinType] = coin_type)\n                );\n                trading_pairs.forEach(pair => {\n                    let input_coin_info = coins_by_type[pair.inputCoinType];\n                    let output_coin_info = coins_by_type[pair.outputCoinType];\n                    if (\n                        input_coin_info.backingCoinType !=\n                            pair.outputCoinType &&\n                        output_coin_info.backingCoinType != pair.inputCoinType\n                    ) {\n                        if (\n                            active_wallets.indexOf(\n                                input_coin_info.walletType\n                            ) != -1 &&\n                            active_wallets.indexOf(\n                                output_coin_info.walletType\n                            ) != -1\n                        ) {\n                        }\n                    }\n                });\n            })\n            .catch(error => {\n                this.urlConnection(\"https://api.blocktrades.info/v2\", 2);\n                this.setState({\n                    coin_info_request_state: 0,\n                    coins_by_type: null,\n                    allowed_mappings_for_deposit: null,\n                    allowed_mappings_for_withdraw: null,\n                    allowed_mappings_for_conversion: null\n                });\n            });\n    }\n\n    componentDidMount() {\n        this.update_timer = setInterval(\n            this.updateEstimates.bind(this),\n            this.refresh_interval\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.update_timer);\n        this.unMounted = true;\n    }\n\n    // functions for managing input addresses\n    getCachedInputAddress(input_coin_type, output_coin_type, memo) {\n        let account_name = this.props.account.get(\"name\");\n        return this.deposit_address_cache.getCachedInputAddress(\n            this.props.gateway,\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n    }\n\n    cacheInputAddress(input_coin_type, output_coin_type, address, memo) {\n        let account_name = this.props.account.get(\"name\");\n        this.deposit_address_cache.cacheInputAddress(\n            this.props.gateway,\n            account_name,\n            input_coin_type,\n            output_coin_type,\n            address,\n            memo\n        );\n    }\n\n    getCachedOrGeneratedInputAddress(input_coin_type, output_coin_type) {\n        // if we already have an address, just return it\n        let cached_input_address_and_memo = this.getCachedInputAddress(\n            input_coin_type,\n            output_coin_type\n        );\n        if (cached_input_address_and_memo) return cached_input_address_and_memo;\n\n        // if we've already asked for this address, return null, it will trigger a refresh when it completes\n        this.state.input_address_requests_in_progress[input_coin_type] =\n            this.state.input_address_requests_in_progress[input_coin_type] ||\n            {};\n        if (\n            this.state.input_address_requests_in_progress[input_coin_type][\n                output_coin_type\n            ]\n        )\n            return null;\n\n        // else, no active request for this mapping, kick one off\n        let body = JSON.stringify({\n            inputCoinType: input_coin_type,\n            outputCoinType: output_coin_type,\n            outputAddress: this.props.account.get(\"name\")\n        });\n\n        this.state.input_address_requests_in_progress[input_coin_type][\n            output_coin_type\n        ] = true;\n\n        fetch(this.state.url + \"/simple-api/initiate-trade\", {\n            method: \"post\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }),\n            body: body\n        }).then(\n            reply => {\n                reply.json().then(\n                    json => {\n                        console.assert(\n                            json.inputCoinType == input_coin_type,\n                            \"unexpected reply from initiate-trade\"\n                        );\n                        console.assert(\n                            json.outputCoinType == output_coin_type,\n                            \"unexpected reply from initiate-trade\"\n                        );\n                        if (\n                            json.inputCoinType != input_coin_type ||\n                            json.outputCoinType != output_coin_type\n                        )\n                            throw Error(\"unexpected reply from initiate-trade\");\n                        this.cacheInputAddress(\n                            json.inputCoinType,\n                            json.outputCoinType,\n                            json.inputAddress,\n                            json.inputMemo\n                        );\n                        delete this.state.input_address_requests_in_progress[\n                            input_coin_type\n                        ][output_coin_type];\n                        if (\n                            this.state.deposit_input_coin_type ==\n                                json.inputCoinType &&\n                            this.state.deposit_output_coin_type ==\n                                json.outputCoinType\n                        )\n                            this.setState({\n                                input_address_and_memo: {\n                                    address: json.inputAddress,\n                                    memo: json.inputMemo\n                                }\n                            });\n                    },\n                    error => {\n                        delete this.state.input_address_requests_in_progress[\n                            input_coin_type\n                        ][output_coin_type];\n                        if (\n                            this.state.deposit_input_coin_type ==\n                                input_coin_type &&\n                            this.state.deposit_output_coin_type ==\n                                output_coin_type\n                        )\n                            this.setState({\n                                input_address_and_memo: {\n                                    address: \"error generating address\",\n                                    memo: null\n                                }\n                            });\n                    }\n                );\n            },\n            error => {\n                delete this.state.input_address_requests_in_progress[\n                    input_coin_type\n                ][output_coin_type];\n                if (\n                    this.state.deposit_input_coin_type == input_coin_type &&\n                    this.state.deposit_output_coin_type == output_coin_type\n                )\n                    this.setState({\n                        input_address_and_memo: {\n                            address: \"error generating address\",\n                            memo: null\n                        }\n                    });\n            }\n        );\n        return null;\n    }\n\n    // functions for managing deposit limits\n    getCachedDepositLimit(input_coin_type, output_coin_type) {\n        this.state.deposit_limit_cache[input_coin_type] =\n            this.state.deposit_limit_cache[input_coin_type] || {};\n        if (this.state.deposit_limit_cache[input_coin_type][output_coin_type]) {\n            let deposit_limit_record = this.state.deposit_limit_cache[\n                input_coin_type\n            ][output_coin_type];\n            let cache_age = new Date() - deposit_limit_record.timestamp;\n            if (cache_age < this.refresh_interval) return deposit_limit_record;\n            delete this.state.deposit_limit_cache[input_coin_type][\n                output_coin_type\n            ];\n        }\n        return null;\n    }\n\n    cacheDepositLimit(input_coin_type, output_coin_type, deposit_limit_record) {\n        deposit_limit_record.timestamp = new Date();\n        this.state.deposit_limit_cache[input_coin_type] =\n            this.state.deposit_limit_cache[input_coin_type] || {};\n        this.state.deposit_limit_cache[input_coin_type][\n            output_coin_type\n        ] = deposit_limit_record;\n    }\n\n    getCachedOrFreshDepositLimit(\n        deposit_withdraw_or_convert,\n        input_coin_type,\n        output_coin_type\n    ) {\n        let deposit_limit_record = this.getCachedDepositLimit(\n            input_coin_type,\n            output_coin_type\n        );\n        if (deposit_limit_record) return deposit_limit_record;\n\n        this.state.deposit_limit_requests_in_progress[input_coin_type] =\n            this.state.input_address_requests_in_progress[input_coin_type] ||\n            {};\n        this.state.deposit_limit_requests_in_progress[input_coin_type][\n            output_coin_type\n        ] = true;\n\n        let deposit_limit_url =\n            this.state.url +\n            \"/deposit-limits?inputCoinType=\" +\n            encodeURIComponent(input_coin_type) +\n            \"&outputCoinType=\" +\n            encodeURIComponent(output_coin_type);\n        let deposit_limit_promise = fetch(deposit_limit_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        deposit_limit_promise.then(\n            reply => {\n                if (this.unMounted) return;\n                console.assert(\n                    reply.inputCoinType == input_coin_type &&\n                        reply.outputCoinType == output_coin_type,\n                    \"unexpected reply from deposit-limits\"\n                );\n                if (\n                    reply.inputCoinType != input_coin_type ||\n                    reply.outputCoinType != output_coin_type\n                )\n                    throw Error(\"unexpected reply from deposit-limits\");\n                let new_deposit_limit_record = {\n                    timestamp: new Date(),\n                    limit: reply.depositLimit\n                };\n                this.cacheDepositLimit(\n                    input_coin_type,\n                    output_coin_type,\n                    new_deposit_limit_record\n                );\n                delete this.state.deposit_limit_requests_in_progress[\n                    input_coin_type\n                ][output_coin_type];\n                if (\n                    this.state[\n                        deposit_withdraw_or_convert + \"_input_coin_type\"\n                    ] == input_coin_type &&\n                    this.state[\n                        deposit_withdraw_or_convert + \"_output_coin_type\"\n                    ] == output_coin_type\n                )\n                    this.setState({\n                        [deposit_withdraw_or_convert +\n                        \"_limit\"]: new_deposit_limit_record\n                    });\n            },\n            error => {\n                delete this.state.deposit_limit_requests_in_progress[\n                    input_coin_type\n                ][output_coin_type];\n            }\n        );\n        return null;\n    }\n\n    getAndUpdateOutputEstimate(\n        deposit_withdraw_or_convert,\n        input_coin_type,\n        output_coin_type,\n        input_amount\n    ) {\n        if (this.unMounted) return;\n        if (deposit_withdraw_or_convert == \"deposit\") {\n            this.setState({failed_calculate_deposit: null});\n        }\n        if (deposit_withdraw_or_convert == \"withdraw\") {\n            this.setState({failed_calculate_withdraw: null});\n        }\n        if (deposit_withdraw_or_convert == \"conversion\") {\n            this.setState({failed_calculate_conversion: null});\n        }\n\n        let estimate_output_url =\n            this.state.url +\n            \"/estimate-output-amount?inputAmount=\" +\n            encodeURIComponent(input_amount) +\n            \"&inputCoinType=\" +\n            encodeURIComponent(input_coin_type) +\n            \"&outputCoinType=\" +\n            encodeURIComponent(output_coin_type);\n        let estimate_output_promise = fetch(estimate_output_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        estimate_output_promise.then(\n            reply => {\n                if (this.unMounted) return;\n                // console.log(\"Reply: \", reply);\n                if (reply.error) {\n                    if (\n                        this.state[\n                            deposit_withdraw_or_convert + \"_input_coin_type\"\n                        ] == input_coin_type &&\n                        this.state[\n                            deposit_withdraw_or_convert + \"_output_coin_type\"\n                        ] == output_coin_type &&\n                        this.state[\n                            deposit_withdraw_or_convert +\n                                \"_estimated_input_amount\"\n                        ] == input_amount &&\n                        this.state[\n                            deposit_withdraw_or_convert + \"_estimate_direction\"\n                        ] == this.estimation_directions.output_from_input\n                    ) {\n                        let user_message = reply.error.message;\n\n                        if (deposit_withdraw_or_convert == \"deposit\") {\n                            this.setState({\n                                failed_calculate_deposit: \"Failed to calculate\"\n                            });\n                        }\n                        if (deposit_withdraw_or_convert == \"withdraw\") {\n                            this.setState({\n                                failed_calculate_withdraw: \"Failed to calculate\"\n                            });\n                        }\n                        if (deposit_withdraw_or_convert == \"conversion\") {\n                            this.setState({\n                                failed_calculate_conversion:\n                                    \"Failed to calculate\"\n                            });\n                        }\n\n                        let expected_prefix = \"Internal Server Error: \";\n                        if (user_message.startsWith(expected_prefix))\n                            user_message = user_message.substr(\n                                expected_prefix.length\n                            );\n\n                        this.setState({\n                            [deposit_withdraw_or_convert +\n                            \"_error\"]: user_message\n                        });\n                    }\n                } else {\n                    console.assert(\n                        reply.inputCoinType == input_coin_type &&\n                            reply.outputCoinType == output_coin_type &&\n                            reply.inputAmount == input_amount,\n                        \"unexpected reply from estimate-output-amount\"\n                    );\n                    if (\n                        reply.inputCoinType != input_coin_type ||\n                        reply.outputCoinType != output_coin_type ||\n                        reply.inputAmount != input_amount\n                    )\n                        throw Error(\n                            \"unexpected reply from estimate-output-amount\"\n                        );\n                    if (\n                        this.state[\n                            deposit_withdraw_or_convert + \"_input_coin_type\"\n                        ] == input_coin_type &&\n                        this.state[\n                            deposit_withdraw_or_convert + \"_output_coin_type\"\n                        ] == output_coin_type &&\n                        this.state[\n                            deposit_withdraw_or_convert +\n                                \"_estimated_input_amount\"\n                        ] == input_amount &&\n                        this.state[\n                            deposit_withdraw_or_convert + \"_estimate_direction\"\n                        ] == this.estimation_directions.output_from_input\n                    )\n                        this.setState({\n                            [deposit_withdraw_or_convert +\n                            \"_estimated_output_amount\"]: reply.outputAmount,\n                            [deposit_withdraw_or_convert + \"_error\"]: null\n                        });\n                }\n            },\n            error => {}\n        );\n\n        return null;\n    }\n\n    getAndUpdateInputEstimate(\n        deposit_withdraw_or_convert,\n        input_coin_type,\n        output_coin_type,\n        output_amount\n    ) {\n        if (this.unMounted) return;\n        if (deposit_withdraw_or_convert == \"deposit\") {\n            this.setState({failed_calculate_deposit: null});\n        }\n        if (deposit_withdraw_or_convert == \"withdraw\") {\n            this.setState({failed_calculate_withdraw: null});\n        }\n        if (deposit_withdraw_or_convert == \"conversion\") {\n            this.setState({failed_calculate_conversion: null});\n        }\n\n        let estimate_input_url =\n            this.state.url +\n            \"/estimate-input-amount?outputAmount=\" +\n            encodeURIComponent(output_amount) +\n            \"&inputCoinType=\" +\n            encodeURIComponent(input_coin_type) +\n            \"&outputCoinType=\" +\n            encodeURIComponent(output_coin_type);\n        let estimate_input_promise = fetch(estimate_input_url, {\n            method: \"get\",\n            headers: new Headers({Accept: \"application/json\"})\n        }).then(response => response.json());\n        estimate_input_promise.then(\n            reply => {\n                if (this.unMounted) return;\n\n                console.assert(\n                    reply.inputCoinType == input_coin_type &&\n                        reply.outputCoinType == output_coin_type &&\n                        reply.outputAmount == output_amount,\n                    \"unexpected reply from estimate-input-amount\"\n                );\n                if (\n                    reply.inputCoinType != input_coin_type ||\n                    reply.outputCoinType != output_coin_type ||\n                    reply.outputAmount != output_amount\n                ) {\n                    if (deposit_withdraw_or_convert == \"deposit\") {\n                        this.setState({\n                            failed_calculate_deposit: \"Failed to calculate\"\n                        });\n                    }\n                    if (deposit_withdraw_or_convert == \"withdraw\") {\n                        this.setState({\n                            failed_calculate_withdraw: \"Failed to calculate\"\n                        });\n                    }\n                    if (deposit_withdraw_or_convert == \"conversion\") {\n                        this.setState({\n                            failed_calculate_conversion: \"Failed to calculate\"\n                        });\n                    }\n                }\n\n                if (\n                    this.state[\n                        deposit_withdraw_or_convert + \"_input_coin_type\"\n                    ] == input_coin_type &&\n                    this.state[\n                        deposit_withdraw_or_convert + \"_output_coin_type\"\n                    ] == output_coin_type &&\n                    this.state[\n                        deposit_withdraw_or_convert + \"_estimated_output_amount\"\n                    ] == output_amount &&\n                    this.state[\n                        deposit_withdraw_or_convert + \"_estimate_direction\"\n                    ] == this.estimation_directions.input_from_output\n                )\n                    this.setState({\n                        [deposit_withdraw_or_convert +\n                        \"_estimated_input_amount\"]: reply.inputAmount,\n                        key_for_withdrawal_dialog: reply.inputAmount\n                    });\n            },\n            error => {}\n        );\n\n        return null;\n    }\n\n    onInputAmountChanged(deposit_withdraw_or_convert, event) {\n        let new_estimated_input_amount = event.target.value;\n        if (new_estimated_input_amount == \"\") {\n            new_estimated_input_amount = \"0\";\n        }\n\n        let new_estimated_output_amount = this.getAndUpdateOutputEstimate(\n            deposit_withdraw_or_convert,\n            this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n            this.state[deposit_withdraw_or_convert + \"_output_coin_type\"],\n            new_estimated_input_amount\n        );\n\n        this.setState({\n            [deposit_withdraw_or_convert +\n            \"_estimated_input_amount\"]: new_estimated_input_amount,\n            [deposit_withdraw_or_convert +\n            \"_estimated_output_amount\"]: new_estimated_output_amount,\n            [deposit_withdraw_or_convert + \"_estimate_direction\"]: this\n                .estimation_directions.output_from_input,\n            key_for_withdrawal_dialog: new_estimated_input_amount\n        });\n    }\n\n    onOutputAmountChanged(deposit_withdraw_or_convert, event) {\n        let new_estimated_output_amount = event.target.value;\n        if (new_estimated_output_amount == \"\") {\n            new_estimated_output_amount = \"0\";\n        }\n\n        let new_estimated_input_amount = this.getAndUpdateInputEstimate(\n            deposit_withdraw_or_convert,\n            this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n            this.state[deposit_withdraw_or_convert + \"_output_coin_type\"],\n            new_estimated_output_amount\n        );\n\n        this.setState({\n            [deposit_withdraw_or_convert +\n            \"_estimated_output_amount\"]: new_estimated_output_amount,\n            [deposit_withdraw_or_convert +\n            \"_estimated_input_amount\"]: new_estimated_input_amount,\n            [deposit_withdraw_or_convert + \"_estimate_direction\"]: this\n                .estimation_directions.input_from_output\n        });\n    }\n\n    getWithdrawModalId() {\n        return \"withdraw_asset_\" + this.props.gateway + \"_bridge\";\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    onInputCoinTypeChanged(deposit_withdraw_or_convert, event) {\n        let estimated_input_output_amount = null;\n        let estimated_input_output_amount_state = \"_estimated_output_amount\";\n        let new_input_coin_type = event.target.value;\n        let possible_output_coin_types = this.state[\n            \"allowed_mappings_for_\" + deposit_withdraw_or_convert\n        ][new_input_coin_type];\n        let new_output_coin_type = possible_output_coin_types[0];\n        if (\n            possible_output_coin_types.indexOf(\n                this.state[deposit_withdraw_or_convert + \"_output_coin_type\"]\n            ) != -1\n        )\n            new_output_coin_type = this.state[\n                deposit_withdraw_or_convert + \"_output_coin_type\"\n            ];\n\n        let new_input_address_and_memo = this.state.input_address_and_memo;\n        if (deposit_withdraw_or_convert == \"deposit\")\n            new_input_address_and_memo = this.getCachedOrGeneratedInputAddress(\n                new_input_coin_type,\n                new_output_coin_type\n            );\n        let new_deposit_limit = this.getCachedOrFreshDepositLimit(\n            deposit_withdraw_or_convert,\n            new_input_coin_type,\n            new_output_coin_type\n        );\n\n        if (\n            !this.state[deposit_withdraw_or_convert + \"_estimated_input_amount\"]\n        ) {\n            estimated_input_output_amount = this.getAndUpdateInputEstimate(\n                deposit_withdraw_or_convert,\n                new_input_coin_type,\n                new_output_coin_type,\n                this.state[\n                    deposit_withdraw_or_convert + \"_estimated_output_amount\"\n                ]\n            );\n            estimated_input_output_amount_state = \"_estimated_input_amount\";\n        } else {\n            estimated_input_output_amount = this.getAndUpdateOutputEstimate(\n                deposit_withdraw_or_convert,\n                new_input_coin_type,\n                new_output_coin_type,\n                this.state[\n                    deposit_withdraw_or_convert + \"_estimated_input_amount\"\n                ]\n            );\n        }\n\n        if (deposit_withdraw_or_convert == \"withdraw\") {\n            possible_output_coin_types.forEach(\n                allowed_withdraw_output_coin_type => {\n                    if (\n                        new_output_coin_type ===\n                        allowed_withdraw_output_coin_type\n                    ) {\n                        this.setState({\n                            coin_symbol: new_input_coin_type + \"input\",\n                            supports_output_memos: this.state.coins_by_type[\n                                allowed_withdraw_output_coin_type\n                            ].supportsOutputMemos\n                        });\n                    }\n                }\n            );\n        }\n\n        this.setState({\n            [deposit_withdraw_or_convert +\n            \"_input_coin_type\"]: new_input_coin_type,\n            [deposit_withdraw_or_convert +\n            \"_output_coin_type\"]: new_output_coin_type,\n            input_address_and_memo: new_input_address_and_memo,\n            [deposit_withdraw_or_convert + \"_limit\"]: new_deposit_limit,\n            [deposit_withdraw_or_convert +\n            estimated_input_output_amount_state]: estimated_input_output_amount,\n            [deposit_withdraw_or_convert + \"_estimate_direction\"]: this\n                .estimation_directions.output_from_input\n        });\n    }\n\n    onOutputCoinTypeChanged(deposit_withdraw_or_convert, event) {\n        let estimated_input_output_amount = null;\n        let estimated_input_output_amount_state = \"_estimated_output_amount\";\n        let new_output_coin_type = event.target.value;\n        let withdraw_output_coin_types = this.state\n            .allowed_mappings_for_withdraw[this.state.withdraw_input_coin_type];\n\n        if (deposit_withdraw_or_convert == \"withdraw\") {\n            withdraw_output_coin_types.forEach(\n                allowed_withdraw_output_coin_type => {\n                    if (\n                        new_output_coin_type ===\n                        allowed_withdraw_output_coin_type\n                    ) {\n                        this.setState({\n                            coin_symbol: new_output_coin_type + \"output\",\n                            supports_output_memos: this.state.coins_by_type[\n                                allowed_withdraw_output_coin_type\n                            ].supportsOutputMemos,\n                            key_for_withdrawal_dialog: new_output_coin_type\n                        });\n                    }\n                }\n            );\n        }\n\n        let new_input_address_and_memo = this.state.input_address_and_memo;\n        if (deposit_withdraw_or_convert == \"deposit\")\n            new_input_address_and_memo = this.getCachedOrGeneratedInputAddress(\n                this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n                new_output_coin_type\n            );\n        let new_deposit_limit = this.getCachedOrFreshDepositLimit(\n            deposit_withdraw_or_convert,\n            this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n            new_output_coin_type\n        );\n\n        if (\n            !this.state[deposit_withdraw_or_convert + \"_estimated_input_amount\"]\n        ) {\n            estimated_input_output_amount = this.getAndUpdateInputEstimate(\n                deposit_withdraw_or_convert,\n                this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n                new_output_coin_type,\n                this.state[\n                    deposit_withdraw_or_convert + \"_estimated_output_amount\"\n                ]\n            );\n            estimated_input_output_amount_state = \"_estimated_input_amount\";\n        } else {\n            estimated_input_output_amount = this.getAndUpdateOutputEstimate(\n                deposit_withdraw_or_convert,\n                this.state[deposit_withdraw_or_convert + \"_input_coin_type\"],\n                new_output_coin_type,\n                this.state[\n                    deposit_withdraw_or_convert + \"_estimated_input_amount\"\n                ]\n            );\n        }\n\n        this.setState({\n            [deposit_withdraw_or_convert +\n            \"_output_coin_type\"]: new_output_coin_type,\n            input_address_and_memo: new_input_address_and_memo,\n            [deposit_withdraw_or_convert + \"_limit\"]: new_deposit_limit,\n            [deposit_withdraw_or_convert +\n            estimated_input_output_amount_state]: estimated_input_output_amount,\n            [deposit_withdraw_or_convert + \"_estimate_direction\"]: this\n                .estimation_directions.output_from_input\n        });\n    }\n\n    render() {\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.gateway\n        )\n            return <div />;\n\n        let announcements,\n            deposit_body,\n            deposit_header,\n            withdraw_body,\n            withdraw_header,\n            conversion_body,\n            conversion_header,\n            withdraw_modal_id,\n            conversion_modal_id;\n\n        if (\n            this.state.coin_info_request_state ==\n            this.coin_info_request_states.request_failed\n        ) {\n            return (\n                <div>\n                    <p>\n                        Error connecting to blocktrades.us, please try again\n                        later\n                    </p>\n                </div>\n            );\n        } else if (\n            this.state.coin_info_request_state ==\n                this.coin_info_request_states.never_requested ||\n            this.state.coin_info_request_state ==\n                this.coin_info_request_states.request_in_progress\n        ) {\n            return (\n                <div>\n                    <p>Retrieving current trade data from blocktrades.us</p>\n                </div>\n            );\n        } else {\n            // depending on what wallets are online, we might support deposits, withdrawals, conversions, all, or neither at any given time.\n            let deposit_table = null;\n            let withdraw_table = null;\n            let amount_to_withdraw = null;\n\n            let calcTextDeposit = <Translate content=\"gateway.calc\" />;\n            if (this.state.failed_calculate_deposit != null) {\n                calcTextDeposit = this.state.failed_calculate_deposit;\n            }\n            let calcTextWithdraw = <Translate content=\"gateway.calc\" />;\n            if (this.state.failed_calculate_withdraw != null) {\n                calcTextWithdraw = this.state.failed_calculate_withdraw;\n            }\n            let calcTextConversion = <Translate content=\"gateway.calc\" />;\n            if (this.state.failed_calculate_conversion != null) {\n                calcTextConversion = this.state.failed_calculate_conversion;\n            }\n\n            if (\n                Object.getOwnPropertyNames(\n                    this.state.allowed_mappings_for_deposit\n                ).length > 0\n            ) {\n                // deposit\n                let deposit_input_coin_type_options = [];\n                Object.keys(this.state.allowed_mappings_for_deposit)\n                    .sort()\n                    .forEach(allowed_deposit_input_coin_type => {\n                        deposit_input_coin_type_options.push(\n                            <option\n                                key={allowed_deposit_input_coin_type}\n                                value={allowed_deposit_input_coin_type || \"\"}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_deposit_input_coin_type\n                                    ].symbol\n                                }\n                            </option>\n                        );\n                    });\n                let deposit_input_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"external-coin-types\"\n                        value={this.state.deposit_input_coin_type || \"\"}\n                        onChange={this.onInputCoinTypeChanged.bind(\n                            this,\n                            \"deposit\"\n                        )}\n                    >\n                        {deposit_input_coin_type_options}\n                    </select>\n                );\n\n                let deposit_output_coin_type_options = [];\n                let deposit_output_coin_types = this.state\n                    .allowed_mappings_for_deposit[\n                    this.state.deposit_input_coin_type\n                ];\n                deposit_output_coin_types.forEach(\n                    allowed_deposit_output_coin_type => {\n                        deposit_output_coin_type_options.push(\n                            <option\n                                key={allowed_deposit_output_coin_type}\n                                value={allowed_deposit_output_coin_type || \"\"}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_deposit_output_coin_type\n                                    ].walletSymbol\n                                }\n                            </option>\n                        );\n                    }\n                );\n                let deposit_output_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"native-coin-types\"\n                        value={this.state.deposit_output_coin_type || \"\"}\n                        onChange={this.onOutputCoinTypeChanged.bind(\n                            this,\n                            \"deposit\"\n                        )}\n                    >\n                        {deposit_output_coin_type_options}\n                    </select>\n                );\n\n                let input_address_and_memo = this.state.input_address_and_memo\n                    ? this.state.input_address_and_memo\n                    : {address: \"unknown\", memo: null};\n\n                let estimated_input_amount_text = this.state\n                    .deposit_estimated_input_amount;\n                let estimated_output_amount_text = this.state\n                    .deposit_estimated_output_amount;\n\n                let deposit_input_amount_edit_box = estimated_input_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_input_amount_text || \"\"}\n                        onChange={this.onInputAmountChanged.bind(\n                            this,\n                            \"deposit\"\n                        )}\n                    />\n                ) : (\n                    calcTextDeposit\n                );\n                let deposit_output_amount_edit_box = estimated_output_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_output_amount_text || \"\"}\n                        onChange={this.onOutputAmountChanged.bind(\n                            this,\n                            \"deposit\"\n                        )}\n                    />\n                ) : (\n                    calcTextDeposit\n                );\n\n                let deposit_limit_element = <span>updating</span>;\n                if (this.state.deposit_limit) {\n                    if (this.state.deposit_limit.limit)\n                        deposit_limit_element = (\n                            <div className=\"blocktrades-bridge\">\n                                <span className=\"deposit-limit\">\n                                    <Translate\n                                        content=\"gateway.limit\"\n                                        amount={utils.format_number(\n                                            this.state.deposit_limit.limit,\n                                            8\n                                        )}\n                                        symbol={\n                                            this.state.coins_by_type[\n                                                this.state\n                                                    .deposit_input_coin_type\n                                            ].walletSymbol\n                                        }\n                                    />\n                                </span>\n                            </div>\n                        );\n                    else deposit_limit_element = null;\n                    //else\n                    //    deposit_limit_element = <span>no limit</span>;\n                }\n\n                let deposit_error_element = null;\n                if (this.state.deposit_error)\n                    deposit_error_element = (\n                        <div>{this.state.deposit_error}</div>\n                    );\n\n                deposit_header = (\n                    <thead>\n                        <tr>\n                            <th>\n                                <Translate content=\"gateway.deposit\" />\n                            </th>\n                            <th>\n                                <Translate content=\"gateway.balance\" />\n                            </th>\n                            <th>\n                                <Translate\n                                    content=\"gateway.deposit_to\"\n                                    asset={this.state.deposit_input_coin_type}\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                );\n\n                let deposit_address_and_memo_element = null;\n                if (input_address_and_memo.memo)\n                    deposit_address_and_memo_element = (\n                        <Translate\n                            unsafe\n                            content=\"gateway.address_with_memo\"\n                            address={input_address_and_memo.address}\n                            memo={input_address_and_memo.memo}\n                        />\n                    );\n                else\n                    deposit_address_and_memo_element = (\n                        <span>{input_address_and_memo.address}</span>\n                    );\n                //<span><span className=\"blocktrades-with-memo\">with memo</span> {input_address_and_memo.memo}</span>;\n\n                deposit_body = (\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div className=\"blocktrades-bridge\">\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {deposit_input_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {deposit_input_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    &rarr;\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {deposit_output_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {deposit_output_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    <div>{deposit_error_element}</div>\n                                </div>\n                            </td>\n                            <td>\n                                <AccountBalance\n                                    account={this.props.account.get(\"name\")}\n                                    asset={\n                                        this.state.coins_by_type[\n                                            this.state.deposit_output_coin_type\n                                        ].walletSymbol\n                                    }\n                                />\n                            </td>\n                            <td>\n                                {deposit_address_and_memo_element}\n                                <br />\n                                {deposit_limit_element}\n                            </td>\n                        </tr>\n                    </tbody>\n                );\n            }\n\n            if (\n                Object.getOwnPropertyNames(\n                    this.state.allowed_mappings_for_withdraw\n                ).length > 0\n            ) {\n                withdraw_modal_id = this.getWithdrawModalId();\n                let withdraw_asset_symbol = this.state.coins_by_type[\n                    this.state.withdraw_input_coin_type\n                ].symbol;\n\n                // withdrawal\n\n                amount_to_withdraw = this.state.withdraw_estimated_input_amount;\n\n                let withdraw_input_coin_type_options = [];\n                Object.keys(this.state.allowed_mappings_for_withdraw)\n                    .sort()\n                    .forEach(allowed_withdraw_input_coin_type => {\n                        withdraw_input_coin_type_options.push(\n                            <option\n                                key={allowed_withdraw_input_coin_type}\n                                value={allowed_withdraw_input_coin_type}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_withdraw_input_coin_type\n                                    ].walletSymbol\n                                }\n                            </option>\n                        );\n                    });\n                let withdraw_input_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"native-coin-types\"\n                        value={this.state.withdraw_input_coin_type}\n                        onChange={this.onInputCoinTypeChanged.bind(\n                            this,\n                            \"withdraw\"\n                        )}\n                    >\n                        {withdraw_input_coin_type_options}\n                    </select>\n                );\n\n                let withdraw_output_coin_type_options = [];\n                let withdraw_output_coin_types = this.state\n                    .allowed_mappings_for_withdraw[\n                    this.state.withdraw_input_coin_type\n                ];\n                withdraw_output_coin_types.forEach(\n                    allowed_withdraw_output_coin_type => {\n                        withdraw_output_coin_type_options.push(\n                            <option\n                                key={allowed_withdraw_output_coin_type}\n                                value={allowed_withdraw_output_coin_type}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_withdraw_output_coin_type\n                                    ].symbol\n                                }\n                            </option>\n                        );\n                    }\n                );\n                let withdraw_output_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"external-coin-types\"\n                        value={this.state.withdraw_output_coin_type}\n                        onChange={this.onOutputCoinTypeChanged.bind(\n                            this,\n                            \"withdraw\"\n                        )}\n                    >\n                        {withdraw_output_coin_type_options}\n                    </select>\n                );\n\n                let estimated_input_amount_text = this.state\n                    .withdraw_estimated_input_amount;\n\n                let withdraw_input_amount_edit_box = estimated_input_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_input_amount_text || \"\"}\n                        onChange={this.onInputAmountChanged.bind(\n                            this,\n                            \"withdraw\"\n                        )}\n                    />\n                ) : (\n                    calcTextWithdraw\n                );\n\n                let estimated_output_amount_text = this.state\n                    .withdraw_estimated_output_amount;\n\n                let withdraw_output_amount_edit_box = estimated_output_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_output_amount_text || \"\"}\n                        onChange={this.onOutputAmountChanged.bind(\n                            this,\n                            \"withdraw\"\n                        )}\n                    />\n                ) : (\n                    calcTextWithdraw\n                );\n\n                let withdraw_button = (\n                    <ButtonWithdrawContainer\n                        key={this.state.key_for_withdrawal_dialog}\n                        account={this.props.account.get(\"name\")}\n                        issuer={this.props.issuer_account.get(\"name\")}\n                        asset={\n                            this.state.coins_by_type[\n                                this.state.withdraw_input_coin_type\n                            ].walletSymbol\n                        }\n                        output_coin_name={\n                            this.state.coins_by_type[\n                                this.state.withdraw_output_coin_type\n                            ].name\n                        }\n                        output_coin_symbol={\n                            this.state.coins_by_type[\n                                this.state.withdraw_output_coin_type\n                            ].symbol\n                        }\n                        output_coin_type={this.state.withdraw_output_coin_type}\n                        output_supports_memos={this.state.supports_output_memos}\n                        amount_to_withdraw={amount_to_withdraw}\n                        url={this.state.url}\n                        gateway={this.props.gateway}\n                        output_wallet_type={\n                            this.state.coins_by_type[\n                                this.state.withdraw_output_coin_type\n                            ].walletType\n                        }\n                    />\n                );\n\n                let withdraw_error_element = null;\n                if (this.state.withdraw_error)\n                    withdraw_error_element = (\n                        <div>{this.state.withdraw_error}</div>\n                    );\n\n                let withdraw_limit_element = <span>...</span>;\n                if (this.state.withdraw_limit) {\n                    if (this.state.withdraw_limit.limit)\n                        withdraw_limit_element = (\n                            <div className=\"blocktrades-bridge\">\n                                <span className=\"deposit-limit\">\n                                    <Translate\n                                        content=\"gateway.limit\"\n                                        amount={utils.format_number(\n                                            this.state.withdraw_limit.limit,\n                                            8\n                                        )}\n                                        symbol={\n                                            this.state.coins_by_type[\n                                                this.state\n                                                    .withdraw_input_coin_type\n                                            ].walletSymbol\n                                        }\n                                    />\n                                </span>\n                            </div>\n                        );\n                    else\n                        withdraw_limit_element = (\n                            <div className=\"blocktrades-bridge\">\n                                <span className=\"deposit-limit\">no limit</span>\n                            </div>\n                        );\n                }\n\n                withdraw_header = (\n                    <thead>\n                        <tr>\n                            <th>\n                                <Translate content=\"gateway.withdraw\" />\n                            </th>\n                            <th>\n                                <Translate content=\"gateway.balance\" />\n                            </th>\n                            <th />\n                        </tr>\n                    </thead>\n                );\n\n                withdraw_body = (\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div className=\"blocktrades-bridge\">\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {withdraw_input_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {withdraw_input_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    &rarr;\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {withdraw_output_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {withdraw_output_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    <div>{withdraw_error_element}</div>\n                                </div>\n                            </td>\n                            <td>\n                                <AccountBalance\n                                    account={this.props.account.get(\"name\")}\n                                    asset={\n                                        this.state.coins_by_type[\n                                            this.state.withdraw_input_coin_type\n                                        ].walletSymbol\n                                    }\n                                />\n                            </td>\n                            <td>\n                                {withdraw_button}\n                                <br />\n                                {withdraw_limit_element}\n                            </td>\n                        </tr>\n                    </tbody>\n                );\n            }\n\n            if (\n                Object.getOwnPropertyNames(\n                    this.state.allowed_mappings_for_conversion\n                ).length > 0\n            ) {\n                // conversion\n                let conversion_input_coin_type_options = [];\n                Object.keys(this.state.allowed_mappings_for_conversion)\n                    .sort()\n                    .forEach(allowed_conversion_input_coin_type => {\n                        conversion_input_coin_type_options.push(\n                            <option\n                                key={allowed_conversion_input_coin_type}\n                                value={allowed_conversion_input_coin_type}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_conversion_input_coin_type\n                                    ].walletSymbol\n                                }\n                            </option>\n                        );\n                    });\n                let conversion_input_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"native-coin-types\"\n                        value={this.state.conversion_input_coin_type}\n                        onChange={this.onInputCoinTypeChanged.bind(\n                            this,\n                            \"conversion\"\n                        )}\n                    >\n                        {conversion_input_coin_type_options}\n                    </select>\n                );\n\n                let conversion_output_coin_type_options = [];\n                let conversion_output_coin_types = this.state\n                    .allowed_mappings_for_conversion[\n                    this.state.conversion_input_coin_type\n                ];\n                conversion_output_coin_types.forEach(\n                    allowed_conversion_output_coin_type => {\n                        conversion_output_coin_type_options.push(\n                            <option\n                                key={allowed_conversion_output_coin_type}\n                                value={allowed_conversion_output_coin_type}\n                            >\n                                {\n                                    this.state.coins_by_type[\n                                        allowed_conversion_output_coin_type\n                                    ].symbol\n                                }\n                            </option>\n                        );\n                    }\n                );\n                let conversion_output_coin_type_select = (\n                    <select\n                        style={{width: \"11rem\"}}\n                        className=\"external-coin-types\"\n                        value={this.state.conversion_output_coin_type}\n                        onChange={this.onOutputCoinTypeChanged.bind(\n                            this,\n                            \"conversion\"\n                        )}\n                    >\n                        {conversion_output_coin_type_options}\n                    </select>\n                );\n\n                let estimated_input_amount_text = this.state\n                    .conversion_estimated_input_amount;\n\n                let conversion_input_amount_edit_box = estimated_input_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_input_amount_text || \"\"}\n                        onChange={this.onInputAmountChanged.bind(\n                            this,\n                            \"conversion\"\n                        )}\n                    />\n                ) : (\n                    calcTextConversion\n                );\n\n                let estimated_output_amount_text = this.state\n                    .conversion_estimated_output_amount;\n\n                let conversion_output_amount_edit_box = estimated_output_amount_text ? (\n                    <input\n                        style={{width: \"11rem\"}}\n                        type=\"text\"\n                        value={estimated_output_amount_text || \"\"}\n                        onChange={this.onOutputAmountChanged.bind(\n                            this,\n                            \"conversion\"\n                        )}\n                    />\n                ) : (\n                    calcTextConversion\n                );\n\n                let conversion_button = (\n                    <ButtonConversionContainer\n                        asset={\n                            this.state.coins_by_type[\n                                this.state.conversion_input_coin_type\n                            ].walletSymbol\n                        }\n                        account={this.props.account}\n                        input_coin_type={this.state.conversion_input_coin_type}\n                        output_coin_type={\n                            this.state.conversion_output_coin_type\n                        }\n                        account_name={this.props.account.get(\"name\")}\n                        amount={this.state.conversion_estimated_input_amount}\n                        account_id={this.props.account.get(\"id\")}\n                        account_balances={this.props.account.get(\"balances\")}\n                        url={this.state.url}\n                    />\n                );\n\n                let conversion_error_element = null;\n                if (this.state.conversion_error)\n                    conversion_error_element = (\n                        <div>{this.state.conversion_error}</div>\n                    );\n\n                let conversion_limit_element = <span>...</span>;\n                if (this.state.conversion_limit) {\n                    if (this.state.conversion_limit.limit)\n                        conversion_limit_element = (\n                            <div className=\"blocktrades-bridge\">\n                                <span className=\"deposit-limit\">\n                                    <Translate\n                                        content=\"gateway.limit\"\n                                        amount={utils.format_number(\n                                            this.state.conversion_limit.limit,\n                                            8\n                                        )}\n                                        symbol={\n                                            this.state.coins_by_type[\n                                                this.state\n                                                    .conversion_input_coin_type\n                                            ].walletSymbol\n                                        }\n                                    />\n                                </span>\n                            </div>\n                        );\n                    else\n                        conversion_limit_element = (\n                            <div className=\"blocktrades-bridge\">\n                                <span className=\"deposit-limit\">no limit</span>\n                            </div>\n                        );\n                }\n\n                conversion_header = (\n                    <thead>\n                        <tr>\n                            <th>\n                                <Translate content=\"gateway.convert\" />\n                            </th>\n                            <th>\n                                <Translate content=\"gateway.balance\" />\n                            </th>\n                            <th />\n                        </tr>\n                    </thead>\n                );\n\n                conversion_body = (\n                    <tbody>\n                        <tr>\n                            <td>\n                                <div className=\"blocktrades-bridge\">\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {conversion_input_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {conversion_input_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    &rarr;\n                                    <div className=\"inline-block\">\n                                        <div>\n                                            {conversion_output_coin_type_select}\n                                        </div>\n                                        <div>\n                                            {conversion_output_amount_edit_box}\n                                        </div>\n                                    </div>\n                                    <div>{conversion_error_element}</div>\n                                </div>\n                            </td>\n                            <td>\n                                <AccountBalance\n                                    account={this.props.account.get(\"name\")}\n                                    asset={\n                                        this.state.coins_by_type[\n                                            this.state\n                                                .conversion_input_coin_type\n                                        ].walletSymbol\n                                    }\n                                />\n                            </td>\n                            <td>\n                                {conversion_button}\n                                <br />\n                                {conversion_limit_element}\n                            </td>\n                        </tr>\n                    </tbody>\n                );\n            }\n\n            if (this.state.announcements.length > 0) {\n                announcements = (\n                    <div className=\"blocktrades-announcements-container\">\n                        {this.state.announcements.map(function(data, index) {\n                            let add_color = \"txtann info\";\n\n                            if (data.status === 10) {\n                                add_color = \"txtann error\";\n                            } else if (data.status === 20) {\n                                add_color = \"txtann warning\";\n                            } else if (data.status === 30) {\n                                add_color = \"txtann success\";\n                            } else if (data.status === 40) {\n                                add_color = \"txtann info\";\n                            }\n\n                            if (data.format === 1) {\n                                data.message.replace(/\\r\\n|\\r|\\n/g, \"<br />\");\n                            }\n\n                            return (\n                                <div\n                                    className={\n                                        \"blocktrades-announcements \" + add_color\n                                    }\n                                    key={index}\n                                >\n                                    {data.message}\n                                </div>\n                            );\n                        }, this)}\n                    </div>\n                );\n            }\n\n            return (\n                <div>\n                    <div style={{paddingBottom: 15}}>\n                        <Translate\n                            component=\"h5\"\n                            content=\"gateway.bridge_text\"\n                        />\n                    </div>\n                    {announcements}\n                    <table className=\"table\">\n                        {deposit_header}\n                        {deposit_body}\n                        {withdraw_header}\n                        {withdraw_body}\n                        {conversion_header}\n                        {conversion_body}\n                    </table>\n                </div>\n            );\n        }\n    }\n} // BlockTradesBridgeDepositRequest\n\nexport default BindToChainState(BlockTradesBridgeDepositRequest);\n","import React from \"react\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport Translate from \"react-translate-component\";\nimport cnames from \"classnames\";\nimport TransactionConfirmStore from \"stores/TransactionConfirmStore\";\nimport AccountActions from \"actions/AccountActions\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AccountBalance from \"../Account/AccountBalance\";\nimport utils from \"common/utils\";\nimport SettingsStore from \"stores/SettingsStore\";\n\nclass BitKapital extends React.Component {\n    static propTypes = {\n        jianjolly: ChainTypes.ChainAccount.isRequired,\n        onay: ChainTypes.ChainAccount.isRequired,\n        bitKapital: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired\n    };\n\n    static defaultProps = {\n        jianjolly: \"1.2.126253\", // \"jianjolly-0\",\n        bitKapital: \"1.2.130090\",\n        onay: \"1.2.139289\", // bitkapital dedicated whitelist management account\n        asset: \"KAPITAL\"\n    };\n\n    constructor(props) {\n        super();\n\n        this.state = {\n            action: props.viewSettings.get(\"bktAction\", \"deposit\"),\n            min: 50,\n            max: 100000\n        };\n    }\n\n    _renderDeposits() {\n        //       return <iframe\n        //           style={{width: \"100%\", border: 0, minHeight: 800}}\n        //           src={\"https://bitkapital.com/kapital.html?u=\" + this.props.account.get(\"name\") + `&theme=${SettingsStore.getState().settings.get(\"themes\")}`}\n        //       >\n        //       </iframe>;\n\n        // interim maintenance tout per issue #341\n        return;\n        <div style={{width: \"100%\", border: 0, minHeight: 600}}>\n            Onarim / Under Maintenance\n        </div>;\n    }\n\n    _renderWithdrawals() {\n        return (\n            <form onSubmit={this._onSubmit.bind(this)}>\n                <div style={{padding: \"20px 0\"}}>\n                    <Translate content=\"gateway.balance\" />: &nbsp;<span\n                        style={{\n                            fontWeight: \"bold\",\n                            color: \"#4A90E2\",\n                            textAlign: \"right\"\n                        }}\n                    >\n                        <AccountBalance\n                            account={this.props.account.get(\"name\")}\n                            asset={this.props.asset.get(\"symbol\")}\n                        />\n                    </span>\n                </div>\n\n                <label>\n                    <Translate content=\"exchange.quantity\" />\n                    <input\n                        ref=\"amount\"\n                        required\n                        id=\"amount\"\n                        type=\"number\"\n                        min={this.state.min}\n                        max={this.state.max}\n                    />\n                </label>\n\n                <label>\n                    <Translate content=\"gateway.iban\" />\n                    <input ref=\"iban\" required id=\"iban\" type=\"text\" />\n                </label>\n\n                <button className=\"button\" type=\"submit\">\n                    <Translate content=\"gateway.withdraw_now\" />\n                </button>\n            </form>\n        );\n    }\n\n    changeAction(action) {\n        this.setState({\n            action\n        });\n\n        SettingsActions.changeViewSetting({\n            bktAction: action\n        });\n    }\n\n    _onSubmit(e) {\n        e.preventDefault();\n        let {min, max} = this.state;\n        let {asset, account, bitKapital} = this.props;\n\n        let amount = parseInt(this.refs.amount.value, 10);\n        let iban = this.refs.iban.value;\n        console.log(\"amount:\", amount, \"iban:\", iban);\n\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n\n        if (amount < min || amount > max) {\n            return;\n        }\n\n        AccountActions.transfer(\n            account.get(\"id\"), // from user\n            bitKapital.get(\"id\"), // to bitkapital account\n            parseInt(amount * precision, 10), // amount in full precision\n            asset.get(\"id\"), // bitkapital asset id\n            new Buffer(\"BOZDURMA - \" + iban.toUpperCase(), \"utf-8\"), // memo\n            null, // propose set to false\n            asset.get(\"id\") // Pay fee with KAPITAL\n        ).then(() => {\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.listen(this.onTrxIncluded);\n        });\n    }\n\n    onTrxIncluded(confirm_store_state) {\n        if (\n            confirm_store_state.included &&\n            confirm_store_state.broadcasted_transaction\n        ) {\n            // this.setState(Transfer.getInitialState());\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        } else if (confirm_store_state.closed) {\n            TransactionConfirmStore.unlisten(this.onTrxIncluded);\n            TransactionConfirmStore.reset();\n        }\n    }\n\n    render() {\n        let {jianjolly, onay, account} = this.props;\n        let {action} = this.state;\n        // console.log(\"jianjolly:\", jianjolly.toJS(), \"asset:\", asset.toJS());\n\n        return (\n            <div className=\"BitKapital\">\n                <div className=\"content-block\">\n                    <div style={{paddingBottom: 15}}>\n                        <div\n                            style={{marginRight: 10}}\n                            onClick={this.changeAction.bind(this, \"deposit\")}\n                            className={cnames(\n                                \"button\",\n                                action === \"deposit\" ? \"active\" : \"outline\"\n                            )}\n                        >\n                            <Translate content=\"gateway.deposit\" />\n                        </div>\n                        <div\n                            onClick={this.changeAction.bind(this, \"withdraw\")}\n                            className={cnames(\n                                \"button\",\n                                action === \"withdraw\" ? \"active\" : \"outline\"\n                            )}\n                        >\n                            <Translate content=\"gateway.withdraw\" />\n                        </div>\n                    </div>\n                    {action === \"deposit\"\n                        ? this._renderDeposits()\n                        : this._renderWithdrawals()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BindToChainState(BitKapital);\n","import React from \"react\";\nimport RuDexGatewayDepositRequest from \"./RuDexGatewayDepositRequest\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport AssetImage from \"../../Utility/AssetImage\";\nimport {\n    RecentTransactions,\n    TransactionWrapper\n} from \"components/Account/RecentTransactions\";\nimport Immutable from \"immutable\";\nimport cnames from \"classnames\";\nimport LoadingIndicator from \"../../LoadingIndicator\";\nimport Select from \"react-select\";\nimport \"react-select/dist/react-select.css\";\n\nclass RuDexGateway extends React.Component {\n    constructor(props) {\n        super();\n\n        let action = props.viewSettings.get(\"rudexAction\", \"deposit\");\n        this.state = {\n            activeCoin: this._getActiveCoin(props, {action: action}),\n            action: action\n        };\n    }\n\n    _findCoinByName(props, name) {\n        for (let i = 0; i < props.coins.length; i++) {\n            let coin = props.coins[i];\n            if (coin.backingCoin.toUpperCase() === name) return coin;\n        }\n        return props.coins[0];\n    }\n\n    _findCoinBySymbol(props, name) {\n        for (let i = 0; i < props.coins.length; i++) {\n            let coin = props.coins[i];\n            if (coin.symbol.toUpperCase() === name) return coin;\n        }\n        return null;\n    }\n\n    _getActiveCoin(props, state) {\n        let cachedCoin = props.viewSettings.get(\"activeCoin_rudex\", null);\n        let firstTimeCoin = \"PPY\";\n        let activeCoin = cachedCoin ? cachedCoin : firstTimeCoin;\n\n        if (state.action === \"withdraw\") {\n            activeCoin = this._findCoinByName(props, activeCoin).symbol;\n        }\n\n        return activeCoin;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.provider !== this.props.provider) {\n            this.setState({\n                activeCoin: this._getActiveCoin(nextProps, this.state.action)\n            });\n        }\n    }\n\n    // onSelectCoin(e) {\n    //     this.setState({\n    //         activeCoin: e.target.value\n    //     });\n    //\n    //     let setting = {};\n    //     let coinName = e.target.value;\n    //     if (this.state.action === \"withdraw\") {\n    //         coinName = this._findCoinBySymbol(this.props, coinName).backingCoin;\n    //     }\n    //     setting[\"activeCoin_rudex\"] = coinName;\n    //     SettingsActions.changeViewSetting(setting);\n    // }\n\n    onSelectCoin(e) {\n        this.setState({\n            activeCoin: e.value\n        });\n\n        let setting = {};\n        let coinName = e.value;\n        if (this.state.action === \"withdraw\") {\n            coinName = this._findCoinBySymbol(this.props, coinName).backingCoin;\n        }\n        setting[\"activeCoin_rudex\"] = coinName;\n        SettingsActions.changeViewSetting(setting);\n    }\n\n    changeAction(type) {\n        let activeCoin = this._getActiveCoin(this.props, {action: type});\n\n        this.setState({\n            action: type,\n            activeCoin: activeCoin\n        });\n\n        SettingsActions.changeViewSetting({[`rudexAction`]: type});\n    }\n\n    render() {\n        let {coins, account} = this.props;\n        let {activeCoin, action} = this.state;\n\n        if (!coins.length) {\n            return <LoadingIndicator />;\n        }\n\n        let filteredCoins = coins.filter(a => {\n            if (!a || !a.symbol) {\n                return false;\n            } else {\n                return action === \"deposit\"\n                    ? a.depositAllowed\n                    : a.withdrawalAllowed;\n            }\n        });\n\n        let coinOptions = filteredCoins\n            .map(coin => {\n                let option =\n                    action === \"deposit\"\n                        ? coin.backingCoin.toUpperCase()\n                        : coin.symbol;\n                // return (\n                //     <option value={option} key={coin.symbol}>\n                //         {option.replace(\"RUDEX.\", \"\")}\n                //     </option>\n\n                // Work around to get symbol name\n                let name = option.replace(\"RUDEX.\", \"\");\n                let prefix = name === \"PPY\" ? \"\" : \"RUDEX.\";\n\n                return {\n                    value: option,\n                    label: (\n                        <div>\n                            <AssetImage\n                                replaceNoneToBts={false}\n                                maxWidth={20}\n                                name={prefix + name}\n                            />\n                            {option.replace(\"RUDEX.\", \"\")}\n                        </div>\n                    )\n                };\n            })\n            .filter(a => {\n                return a !== null;\n            });\n\n        let coin = filteredCoins.filter(coin => {\n            return action === \"deposit\"\n                ? coin.backingCoin.toUpperCase() === activeCoin\n                : coin.symbol === activeCoin;\n        })[0];\n\n        if (!coin) coin = filteredCoins[0];\n\n        let isDeposit = this.state.action === \"deposit\";\n\n        let supportUrl = \"https://rudex.freshdesk.com\";\n\n        return (\n            <div style={this.props.style}>\n                <div className=\"grid-block no-margin vertical medium-horizontal no-padding\">\n                    <div className=\"medium-4\">\n                        <div>\n                            <label\n                                style={{minHeight: \"2rem\"}}\n                                className=\"left-label\"\n                            >\n                                <Translate\n                                    content={\"gateway.choose_\" + action}\n                                />:{\" \"}\n                            </label>\n                            <Select\n                                //className=\"external-coin-types bts-select\"\n                                //onChange={this.onSelectCoin.bind(this)}\n                                onChange={this.onSelectCoin.bind(this)}\n                                clearable={false}\n                                searchable={false}\n                                value={activeCoin}\n                                options={coinOptions}\n                            />\n\n                            {/*</Select>*/}\n                        </div>\n                    </div>\n\n                    <div className=\"medium-6 medium-offset-1\">\n                        <label\n                            style={{minHeight: \"2rem\"}}\n                            className=\"left-label\"\n                        >\n                            <Translate content=\"gateway.gateway_text\" />:\n                        </label>\n                        <div style={{paddingBottom: 15}}>\n                            <ul className=\"button-group segmented no-margin\">\n                                <li\n                                    className={\n                                        action === \"deposit\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"deposit\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.deposit\" />\n                                    </a>\n                                </li>\n                                <li\n                                    className={\n                                        action === \"withdraw\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"withdraw\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.withdraw\" />\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                {!coin ? null : (\n                    <div>\n                        <div style={{marginBottom: 15}}>\n                            <RuDexGatewayDepositRequest\n                                key={`${coin.symbol}`}\n                                gateway={coin.gatewayWallet}\n                                issuer_account={coin.issuer}\n                                account={account}\n                                deposit_asset={coin.backingCoin.toUpperCase()}\n                                deposit_asset_name={coin.name}\n                                deposit_coin_type={coin.backingCoin.toLowerCase()}\n                                deposit_account={coin.gatewayWallet}\n                                deposit_wallet_type={coin.walletType}\n                                receive_asset={coin.symbol}\n                                receive_coin_type={coin.symbol.toLowerCase()}\n                                supports_output_memos={coin.memoSupport}\n                                min_amount={coin.minAmount}\n                                withdraw_fee={coin.withdrawFee}\n                                deposit_fee={coin.depositFee}\n                                asset_precision={coin.precision}\n                                action={this.state.action}\n                            />\n                            <label className=\"left-label\">Support</label>\n                            <div>\n                                <Translate content=\"gateway.rudex.support_block\" />\n                                <br />\n                                <br />\n                                <a\n                                    href={supportUrl}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {supportUrl}\n                                </a>\n                            </div>\n                        </div>\n\n                        {coin && coin.symbol ? (\n                            <TransactionWrapper\n                                asset={coin.symbol}\n                                fromAccount={\n                                    isDeposit\n                                        ? coin.issuerId\n                                        : this.props.account.get(\"id\")\n                                }\n                                to={\n                                    isDeposit\n                                        ? this.props.account.get(\"id\")\n                                        : coin.issuerId\n                                }\n                            >\n                                {({asset, to, fromAccount}) => {\n                                    return (\n                                        <RecentTransactions\n                                            accountsList={Immutable.List([\n                                                this.props.account.get(\"id\")\n                                            ])}\n                                            limit={10}\n                                            compactView={true}\n                                            fullHeight={true}\n                                            filter=\"transfer\"\n                                            title={\n                                                <Translate\n                                                    content={\n                                                        \"gateway.recent_\" +\n                                                        this.state.action\n                                                    }\n                                                />\n                                            }\n                                            customFilter={{\n                                                fields: [\n                                                    \"to\",\n                                                    \"from\",\n                                                    \"asset_id\"\n                                                ],\n                                                values: {\n                                                    to: to.get(\"id\"),\n                                                    from: fromAccount.get(\"id\"),\n                                                    asset_id: asset.get(\"id\")\n                                                }\n                                            }}\n                                        />\n                                    );\n                                }}\n                            </TransactionWrapper>\n                        ) : null}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    RuDexGateway,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {\n                viewSettings: SettingsStore.getState().viewSettings\n            };\n        }\n    }\n);\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {ChainStore} from \"bitsharesjs\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport RuDexWithdrawModal from \"./RuDexWithdrawModal\";\nimport Modal from \"react-foundation-apps/src/modal\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport RuDexDepositAddressCache from \"lib/common/RuDexDepositAddressCache\";\nimport {requestDepositAddress} from \"lib/common/RuDexMethods\";\nimport AssetName from \"components/Utility/AssetName\";\nimport LinkToAccountById from \"components/Utility/LinkToAccountById\";\nimport utils from \"lib/common/utils\";\nimport counterpart from \"counterpart\";\nimport PropTypes from \"prop-types\";\n\nclass RuDexGatewayDepositRequest extends React.Component {\n    static propTypes = {\n        gateway: PropTypes.string,\n        deposit_coin_type: PropTypes.string,\n        deposit_asset_name: PropTypes.string,\n        deposit_account: PropTypes.string,\n        receive_coin_type: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        deposit_asset: PropTypes.string,\n        deposit_wallet_type: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset,\n        deprecated_in_favor_of: ChainTypes.ChainAsset,\n        deprecated_message: PropTypes.string,\n        action: PropTypes.string,\n        supports_output_memos: PropTypes.bool.isRequired,\n        min_amount: PropTypes.number,\n        deposit_fee: PropTypes.number,\n        withdraw_fee: PropTypes.number,\n        asset_precision: PropTypes.number\n    };\n\n    constructor(props) {\n        super(props);\n        this.deposit_address_cache = new RuDexDepositAddressCache();\n\n        this.state = {\n            account_name: null,\n            receive_address: null\n        };\n\n        this.addDepositAddress = this.addDepositAddress.bind(this);\n        this._copy = this._copy.bind(this);\n        document.addEventListener(\"copy\", this._copy);\n    }\n\n    _copy(e) {\n        try {\n            if (this.state.clipboardText)\n                e.clipboardData.setData(\"text/plain\", this.state.clipboardText);\n            else\n                e.clipboardData.setData(\n                    \"text/plain\",\n                    counterpart\n                        .translate(\"gateway.use_copy_button\")\n                        .toUpperCase()\n                );\n            e.preventDefault();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    _getDepositObject() {\n        return {\n            walletType: this.props.deposit_wallet_type,\n            inputCoinType: this.props.deposit_coin_type,\n            outputCoinType: this.props.receive_coin_type,\n            outputAddress: this.props.account.get(\"name\"),\n            stateCallback: this.addDepositAddress\n        };\n    }\n\n    // componentWillMount() {\n    //     let account_name = this.props.account.get(\"name\");\n    //\n    //     // let receive_address = this.deposit_address_cache.getCachedInputAddress(this.props.gateway, account_name, this.props.deposit_coin_type, this.props.receive_coin_type);\n    // }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"copy\", this._copy);\n    }\n\n    addDepositAddress(receive_address) {\n        let account_name = this.props.account.get(\"name\");\n        // this.deposit_address_cache.cacheInputAddress(\n        //     this.props.gateway,\n        //     account_name,\n        //     this.props.deposit_coin_type,\n        //     this.props.receive_coin_type,\n        //     receive_address.address,\n        //     receive_address.memo\n        // );\n        this.setState({account_name});\n        this.setState({receive_address});\n    }\n\n    getWithdrawModalId() {\n        // console.log( \"this.props.issuer: \", this.props.issuer_account.toJS() )\n        // console.log( \"this.receive_asset.issuer: \", this.props.receive_asset.toJS() )\n        return (\n            \"withdraw_asset_\" +\n            this.props.issuer_account.get(\"name\") +\n            \"_\" +\n            this.props.receive_asset.get(\"symbol\")\n        );\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    toClipboard(clipboardText) {\n        try {\n            this.setState({clipboardText}, () => {\n                document.execCommand(\"copy\");\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    render() {\n        let emptyRow = <div style={{display: \"none\", minHeight: 150}} />;\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.receive_asset\n        )\n            return emptyRow;\n\n        let account_balances_object = this.props.account.get(\"balances\");\n\n        // let balance = \"0 \" + this.props.receive_asset.get(\"symbol\");\n        if (this.props.deprecated_in_favor_of) {\n            let has_nonzero_balance = false;\n            let balance_object_id = account_balances_object.get(\n                this.props.receive_asset.get(\"id\")\n            );\n            if (balance_object_id) {\n                let balance_object = ChainStore.getObject(balance_object_id);\n                if (balance_object) {\n                    let balance = balance_object.get(\"balance\");\n                    if (balance != 0) has_nonzero_balance = true;\n                }\n            }\n            if (!has_nonzero_balance) return emptyRow;\n        }\n\n        let receive_address = null;\n        let prev_account_name = this.state.account_name;\n        if (prev_account_name === this.props.account.get(\"name\"))\n            receive_address = this.state.receive_address;\n\n        if (!receive_address) {\n            let account_name = this.props.account.get(\"name\");\n            // receive_address = this.deposit_address_cache.getCachedInputAddress(\n            //     this.props.gateway,\n            //     account_name,\n            //     this.props.deposit_coin_type,\n            //     this.props.receive_coin_type\n            // );\n        }\n\n        if (!receive_address) {\n            requestDepositAddress(this._getDepositObject());\n            return emptyRow;\n        }\n\n        let withdraw_modal_id = this.getWithdrawModalId();\n        let deposit_address_fragment = null;\n        let deposit_memo = null;\n        // if (this.props.deprecated_in_favor_of)\n        // {\n        //     deposit_address_fragment = <span>please use {this.props.deprecated_in_favor_of.get(\"symbol\")} instead. <span data-tip={this.props.deprecated_message} data-place=\"right\" data-html={true}><Icon name=\"question-circle\" title=\"icons.question_circle\" /></span><ReactTooltip /></span>;\n        // }\n        // else\n        // {\n        let clipboardText = \"\";\n        let memoText;\n        if (this.props.deposit_account) {\n            deposit_address_fragment = (\n                <span>{this.props.deposit_account}</span>\n            );\n            clipboardText = this.props.deposit_account;\n            memoText = \"dex:\" + this.props.account.get(\"name\");\n            deposit_memo = <span>{memoText}</span>;\n            var withdraw_memo_prefix = this.props.deposit_coin_type + \":\";\n        } else {\n            if (receive_address.memo) {\n                // This is a client that uses a deposit memo (like ethereum), we need to display both the address and the memo they need to send\n                memoText = receive_address.memo;\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n                deposit_memo = <span>{receive_address.memo}</span>;\n            } else {\n                // This is a client that uses unique deposit addresses to select the output\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n            }\n            var withdraw_memo_prefix = \"\";\n        }\n\n        let minDeposit = utils.format_number(\n            this.props.min_amount /\n                utils.get_asset_precision(this.props.asset_precision),\n            this.props.asset_precision,\n            false\n        );\n\n        if (this.props.action === \"deposit\") {\n            return (\n                <div className=\"rudex__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_deposit\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.your_account\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.deposit_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <label className=\"left-label\">\n                            <b>\n                                <Translate\n                                    content=\"gateway.rudex.min_amount\"\n                                    minAmount={minDeposit}\n                                    symbol={this.props.deposit_coin_type}\n                                />\n                            </b>\n                        </label>\n                        <div style={{padding: \"10px 0\", fontSize: \"1.1rem\"}}>\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <Translate\n                                                style={{\n                                                    textTransform: \"uppercase\"\n                                                }}\n                                                content=\"gateway.address\"\n                                            />:{\" \"}\n                                            <b>{deposit_address_fragment}</b>\n                                        </td>\n                                    </tr>\n                                    {deposit_memo ? (\n                                        <tr>\n                                            <td>\n                                                <Translate\n                                                    style={{\n                                                        textTransform:\n                                                            \"uppercase\"\n                                                    }}\n                                                    content=\"gateway.memo\"\n                                                />: <b>{deposit_memo}</b>\n                                            </td>\n                                        </tr>\n                                    ) : null}\n                                </tbody>\n                            </table>\n                            <div\n                                className=\"button-group\"\n                                style={{paddingTop: 10}}\n                            >\n                                {deposit_address_fragment ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            clipboardText\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.copy_address\" />\n                                    </div>\n                                ) : null}\n                                {memoText ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            memoText\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.copy_memo\" />\n                                    </div>\n                                ) : null}\n                            </div>\n                            <Translate\n                                className=\"has-error fz_14\"\n                                component=\"p\"\n                                content=\"gateway.min_deposit_warning_amount\"\n                                minDeposit={minDeposit}\n                                coin={this.props.deposit_asset}\n                            />\n                            <Translate\n                                className=\"has-error fz_14\"\n                                component=\"p\"\n                                content=\"gateway.min_deposit_warning_asset\"\n                                minDeposit={minDeposit}\n                                coin={this.props.deposit_asset}\n                            />\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"rudex__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_withdraw\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        {/*<p>When you withdraw {this.props.receive_asset.get(\"symbol\")}, you will receive {this.props.deposit_asset} at a 1:1 ratio (minus fees).</p>*/}\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.withdraw_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <div className=\"button-group\" style={{paddingTop: 20}}>\n                            <button\n                                className=\"button success\"\n                                style={{fontSize: \"1.3rem\"}}\n                                onClick={this.onWithdraw.bind(this)}\n                            >\n                                <Translate content=\"gateway.withdraw_now\" />{\" \"}\n                            </button>\n                        </div>\n                    </div>\n                    <Modal id={withdraw_modal_id} overlay={true}>\n                        <Trigger close={withdraw_modal_id}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <RuDexWithdrawModal\n                                account={this.props.account.get(\"name\")}\n                                issuer={this.props.issuer_account.get(\"name\")}\n                                asset={this.props.receive_asset.get(\"symbol\")}\n                                output_coin_name={this.props.deposit_asset_name}\n                                output_coin_symbol={this.props.deposit_asset}\n                                output_coin_type={this.props.deposit_coin_type}\n                                output_wallet_type={\n                                    this.props.deposit_wallet_type\n                                }\n                                output_supports_memos={\n                                    this.props.supports_output_memos\n                                }\n                                memo_prefix={withdraw_memo_prefix}\n                                modal_id={withdraw_modal_id}\n                                min_amount={this.props.min_amount}\n                                withdraw_fee={this.props.withdraw_fee}\n                                asset_precision={this.props.asset_precision}\n                                balance={\n                                    this.props.account.get(\"balances\").toJS()[\n                                        this.props.receive_asset.get(\"id\")\n                                    ]\n                                }\n                            />\n                        </div>\n                    </Modal>\n                </div>\n            );\n        }\n    }\n}\n\nexport default BindToChainState(RuDexGatewayDepositRequest, {\n    keep_updating: true\n});\n","import React from \"react\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport AccountActions from \"actions/AccountActions\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {validateAddress, WithdrawAddresses} from \"common/RuDexMethods\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Modal from \"react-foundation-apps/src/modal\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport {Price, Asset} from \"common/MarketClasses\";\nimport {debounce} from \"lodash-es\";\nimport PropTypes from \"prop-types\";\n\nclass RuDexWithdrawModal extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        output_coin_name: PropTypes.string.isRequired,\n        output_coin_symbol: PropTypes.string.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        url: PropTypes.string,\n        output_wallet_type: PropTypes.string,\n        output_supports_memos: PropTypes.bool.isRequired,\n        amount_to_withdraw: PropTypes.string,\n        balance: ChainTypes.ChainObject,\n        min_amount: PropTypes.number,\n        withdraw_fee: PropTypes.number\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            withdraw_amount: this.props.amount_to_withdraw,\n            withdraw_address: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            withdraw_address_check_in_progress: true,\n            withdraw_address_is_valid: null,\n            options_is_valid: false,\n            confirmation_is_valid: false,\n            withdraw_address_selected: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            memo: \"\",\n            withdraw_address_first: true,\n            empty_withdraw_value: false,\n            from_account: props.account,\n            fee_asset_id: \"1.3.0\",\n            feeStatus: {}\n        };\n\n        this._validateAddress(this.state.withdraw_address, props);\n\n        this._checkBalance = this._checkBalance.bind(this);\n        this._checkMinAmount = this._checkMinAmount.bind(this);\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n    }\n\n    componentWillMount() {\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.account !== this.state.from_account &&\n            np.account !== this.props.account\n        ) {\n            this.setState(\n                {\n                    from_account: np.account,\n                    feeStatus: {},\n                    fee_asset_id: \"1.3.0\",\n                    feeAmount: new Asset({amount: 0})\n                },\n                () => {\n                    this._updateFee();\n                    this._checkFeeStatus();\n                }\n            );\n        }\n    }\n\n    _updateFee(state = this.state) {\n        let {fee_asset_id, from_account} = state;\n        const {fee_asset_types} = this._getAvailableAssets(state);\n        if (\n            fee_asset_types.length === 1 &&\n            fee_asset_types[0] !== fee_asset_id\n        ) {\n            fee_asset_id = fee_asset_types[0];\n        }\n\n        if (!from_account) return null;\n        checkFeeStatusAsync({\n            accountID: from_account.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content:\n                    this.props.output_coin_type +\n                    \":\" +\n                    state.withdraw_address +\n                    (state.memo ? \":\" + state.memo : \"\")\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) => {\n            if (this.unMounted) return;\n\n            this.setState(\n                {\n                    feeAmount: fee,\n                    hasBalance,\n                    hasPoolBalance,\n                    error: !hasBalance || !hasPoolBalance\n                },\n                this._checkBalance\n            );\n        });\n    }\n\n    _checkFeeStatus(state = this.state) {\n        let account = state.from_account;\n        if (!account) return;\n\n        const {fee_asset_types: assets} = this._getAvailableAssets(state);\n        // const assets = [\"1.3.0\", this.props.asset.get(\"id\")];\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content:\n                            this.props.output_coin_type +\n                            \":\" +\n                            state.withdraw_address +\n                            (state.memo ? \":\" + state.memo : \"\")\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    onWithdrawAmountChange({amount}) {\n        this.setState(\n            {\n                withdraw_amount: amount,\n                empty_withdraw_value:\n                    amount !== undefined && !parseFloat(amount)\n            },\n            function() {\n                this._checkBalance;\n                this._checkMinAmount();\n            }\n        );\n    }\n\n    onSelectChanged(index) {\n        let new_withdraw_address = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        )[index];\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: new_withdraw_address\n        });\n\n        this.setState(\n            {\n                withdraw_address_selected: new_withdraw_address,\n                options_is_valid: false,\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    onWithdrawAddressChanged(e) {\n        let new_withdraw_address = e.target.value.trim();\n\n        this.setState(\n            {\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_selected: new_withdraw_address,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    _validateAddress(new_withdraw_address, props = this.props) {\n        validateAddress({\n            url: props.url,\n            walletType: props.output_wallet_type,\n            newAddress: new_withdraw_address\n        }).then(isValid => {\n            if (this.state.withdraw_address === new_withdraw_address) {\n                this.setState({\n                    withdraw_address_check_in_progress: false,\n                    withdraw_address_is_valid: isValid\n                });\n            }\n        });\n    }\n\n    _checkBalance() {\n        const {feeAmount, withdraw_amount} = this.state;\n        const {asset, balance} = this.props;\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            withdraw_amount,\n            asset,\n            feeAmount,\n            balance\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n        return hasBalance;\n    }\n\n    _checkMinAmount() {\n        const {withdraw_amount} = this.state;\n\n        if (withdraw_amount === null) return;\n        const lessThanMinimum =\n            withdraw_amount <\n            this.props.min_amount /\n                utils.get_asset_precision(this.props.asset_precision);\n        console.log(\n            \"X\",\n            withdraw_amount,\n            this.props.min_amount /\n                utils.get_asset_precision(this.props.asset_precision)\n        );\n        this.setState({minAmountError: lessThanMinimum});\n        return lessThanMinimum;\n    }\n\n    onSubmit() {\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address &&\n                this.state.withdraw_address.length) &&\n            this.state.withdraw_amount !== null\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                ZfApi.publish(this.getWithdrawModalId(), \"open\");\n            } else if (parseFloat(this.state.withdraw_amount) > 0) {\n                if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n                    let withdrawals = [];\n                    withdrawals.push(this.state.withdraw_address);\n                    WithdrawAddresses.set({\n                        wallet: this.props.output_wallet_type,\n                        addresses: withdrawals\n                    });\n                } else {\n                    let withdrawals = WithdrawAddresses.get(\n                        this.props.output_wallet_type\n                    );\n                    if (\n                        withdrawals.indexOf(this.state.withdraw_address) == -1\n                    ) {\n                        withdrawals.push(this.state.withdraw_address);\n                        WithdrawAddresses.set({\n                            wallet: this.props.output_wallet_type,\n                            addresses: withdrawals\n                        });\n                    }\n                }\n                WithdrawAddresses.setLast({\n                    wallet: this.props.output_wallet_type,\n                    address: this.state.withdraw_address\n                });\n                let asset = this.props.asset;\n\n                const {feeAmount} = this.state;\n\n                let amount = parseFloat(\n                    String.prototype.replace.call(\n                        this.state.withdraw_amount,\n                        /,/g,\n                        \"\"\n                    )\n                );\n                let sendAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: amount\n                });\n\n                AccountActions.transfer(\n                    this.props.account.get(\"id\"),\n                    this.props.issuer.get(\"id\"),\n                    sendAmount.getAmount(),\n                    asset.get(\"id\"),\n                    this.props.output_coin_type +\n                        \":\" +\n                        this.state.withdraw_address +\n                        (this.state.memo\n                            ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                            : \"\"),\n                    null,\n                    feeAmount ? feeAmount.asset_id : \"1.3.0\"\n                );\n\n                this.setState({\n                    empty_withdraw_value: false\n                });\n            } else {\n                this.setState({\n                    empty_withdraw_value: true\n                });\n            }\n        }\n    }\n\n    onSubmitConfirmation() {\n        ZfApi.publish(this.getWithdrawModalId(), \"close\");\n\n        if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n            let withdrawals = [];\n            withdrawals.push(this.state.withdraw_address);\n            WithdrawAddresses.set({\n                wallet: this.props.output_wallet_type,\n                addresses: withdrawals\n            });\n        } else {\n            let withdrawals = WithdrawAddresses.get(\n                this.props.output_wallet_type\n            );\n            if (withdrawals.indexOf(this.state.withdraw_address) == -1) {\n                withdrawals.push(this.state.withdraw_address);\n                WithdrawAddresses.set({\n                    wallet: this.props.output_wallet_type,\n                    addresses: withdrawals\n                });\n            }\n        }\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: this.state.withdraw_address\n        });\n        let asset = this.props.asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = String.prototype.replace.call(\n            this.state.withdraw_amount,\n            /,/g,\n            \"\"\n        );\n\n        const {feeAmount} = this.state;\n\n        AccountActions.transfer(\n            this.props.account.get(\"id\"),\n            this.props.issuer.get(\"id\"),\n            parseInt(amount * precision, 10),\n            asset.get(\"id\"),\n            this.props.output_coin_type +\n                \":\" +\n                this.state.withdraw_address +\n                (this.state.memo\n                    ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                    : \"\"),\n            null,\n            feeAmount ? feeAmount.asset_id : \"1.3.0\"\n        );\n    }\n\n    onDropDownList() {\n        if (WithdrawAddresses.has(this.props.output_wallet_type)) {\n            if (this.state.options_is_valid === false) {\n                this.setState({options_is_valid: true});\n                this.setState({withdraw_address_first: false});\n            }\n\n            if (this.state.options_is_valid === true) {\n                this.setState({options_is_valid: false});\n            }\n        }\n    }\n\n    getWithdrawModalId() {\n        return \"confirmation\";\n    }\n\n    onAccountBalance() {\n        const {feeAmount} = this.state;\n        if (\n            Object.keys(this.props.account.get(\"balances\").toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            let total = new Asset({\n                amount: this.props.balance.get(\"balance\"),\n                asset_id: this.props.asset.get(\"id\"),\n                precision: this.props.asset.get(\"precision\")\n            });\n\n            // Subtract the fee if it is using the same asset\n            if (total.asset_id === feeAmount.asset_id) {\n                total.minus(feeAmount);\n            }\n\n            this.setState(\n                {\n                    withdraw_amount: total.getAmount({real: true}),\n                    empty_withdraw_value: false\n                },\n                this._checkBalance\n            );\n        }\n    }\n\n    setNestedRef(ref) {\n        this.nestedRef = ref;\n    }\n\n    onFeeChanged({asset}) {\n        this.setState(\n            {\n                fee_asset_id: asset.get(\"id\")\n            },\n            this._updateFee\n        );\n    }\n\n    _getAvailableAssets(state = this.state) {\n        const {from_account, feeStatus} = state;\n        function hasFeePoolBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        let fee_asset_types = [];\n        if (!(from_account && from_account.get(\"balances\"))) {\n            return {fee_asset_types};\n        }\n        let account_balances = state.from_account.get(\"balances\").toJS();\n        fee_asset_types = Object.keys(account_balances).sort(utils.sortID);\n        for (let key in account_balances) {\n            let asset = ChainStore.getObject(key);\n            let balanceObject = ChainStore.getObject(account_balances[key]);\n            if (balanceObject && balanceObject.get(\"balance\") === 0) {\n                if (fee_asset_types.indexOf(key) !== -1) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n\n            if (asset) {\n                // Remove any assets that do not have valid core exchange rates\n                let priceIsValid = false,\n                    p;\n                try {\n                    p = new Price({\n                        base: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"base\"\n                                ])\n                                .toJS()\n                        ),\n                        quote: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"quote\"\n                                ])\n                                .toJS()\n                        )\n                    });\n                    priceIsValid = p.isValid();\n                } catch (err) {\n                    priceIsValid = false;\n                }\n\n                if (asset.get(\"id\") !== \"1.3.0\" && !priceIsValid) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n        }\n\n        fee_asset_types = fee_asset_types.filter(a => {\n            return hasFeePoolBalance(a) && hasBalance(a);\n        });\n\n        return {fee_asset_types};\n    }\n\n    render() {\n        let {withdraw_address_selected, memo} = this.state;\n        let storedAddress = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        );\n        let balance = null;\n\n        let account_balances = this.props.account.get(\"balances\").toJS();\n        let asset_types = Object.keys(account_balances);\n\n        let withdrawModalId = this.getWithdrawModalId();\n        let invalid_address_message = null;\n        let options = null;\n        let confirmation = null;\n\n        if (this.state.options_is_valid) {\n            options = (\n                <div\n                    className={\n                        !storedAddress.length\n                            ? \"rudex-disabled-options\"\n                            : \"rudex-options\"\n                    }\n                >\n                    {storedAddress.map(function(name, index) {\n                        return (\n                            <a\n                                key={index}\n                                onClick={this.onSelectChanged.bind(this, index)}\n                            >\n                                {name}\n                            </a>\n                        );\n                    }, this)}\n                </div>\n            );\n        }\n\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address && this.state.withdraw_address.length)\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                invalid_address_message = (\n                    <div className=\"has-error\" style={{paddingTop: 10}}>\n                        <Translate\n                            content=\"gateway.valid_address\"\n                            coin_type={this.props.output_coin_type}\n                        />\n                    </div>\n                );\n                confirmation = (\n                    <Modal id={withdrawModalId} overlay={true}>\n                        <Trigger close={withdrawModalId}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <label>\n                            <Translate content=\"modal.confirmation.title\" />\n                        </label>\n                        <br />\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onSubmitConfirmation.bind(this)}\n                                value={counterpart.translate(\n                                    \"modal.confirmation.accept\"\n                                )}\n                            />\n                            <Trigger close={withdrawModalId}>\n                                <a className=\"secondary button\">\n                                    <Translate content=\"modal.confirmation.cancel\" />\n                                </a>\n                            </Trigger>\n                        </div>\n                    </Modal>\n                );\n            }\n            // if (this.state.withdraw_address_is_valid)\n            //   invalid_address_message = <Icon name=\"checkmark-circle\" title=\"icons.checkmark_circle.operation_succeed\" className=\"success\" />;\n            // else\n            //   invalid_address_message = <Icon name=\"cross-circle\" title=\"icons.cross_circle.operation_failed\" className=\"alert\" />;\n        }\n\n        let tabIndex = 1;\n        let withdraw_memo = null;\n\n        if (this.props.output_supports_memos) {\n            withdraw_memo = (\n                <div className=\"content-block\">\n                    <label>\n                        <Translate component=\"span\" content=\"transfer.memo\" />\n                    </label>\n                    <textarea\n                        rows=\"3\"\n                        value={memo}\n                        tabIndex={tabIndex++}\n                        onChange={this.onMemoChanged.bind(this)}\n                    />\n                </div>\n            );\n        }\n\n        // Estimate fee VARIABLES\n        let {fee_asset_types} = this._getAvailableAssets();\n\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.asset.get(\"id\");\n            if (current_asset_id) {\n                let current = account_balances[current_asset_id];\n                balance = (\n                    <span\n                        style={{\n                            borderBottom: \"#A09F9F 1px dotted\",\n                            cursor: \"pointer\"\n                        }}\n                    >\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />&nbsp;:&nbsp;\n                        <span\n                            className=\"set-cursor\"\n                            onClick={this.onAccountBalance.bind(this)}\n                        >\n                            {current ? (\n                                <BalanceComponent\n                                    balance={account_balances[current_asset_id]}\n                                />\n                            ) : (\n                                0\n                            )}\n                        </span>\n                    </span>\n                );\n            } else balance = \"No funds\";\n        } else {\n            balance = \"No funds\";\n        }\n\n        let minDeposit = utils.format_number(\n            this.props.min_amount /\n                utils.get_asset_precision(this.props.asset_precision),\n            this.props.asset_precision,\n            false\n        );\n        let gateFee = this.props.withdraw_fee\n            ? utils.format_number(\n                  this.props.withdraw_fee /\n                      utils.get_asset_precision(this.props.asset_precision),\n                  this.props.asset_precision,\n                  false\n              )\n            : null;\n\n        return (\n            <form className=\"grid-block vertical full-width-content\">\n                <div className=\"grid-container\">\n                    <div className=\"content-block\">\n                        <h3>\n                            <Translate\n                                content=\"gateway.withdraw_coin\"\n                                coin={this.props.output_coin_name}\n                                symbol={this.props.output_coin_symbol}\n                            />\n                        </h3>\n                    </div>\n\n                    {/* Withdraw amount */}\n                    <div className=\"content-block\">\n                        <AmountSelector\n                            label=\"modal.withdraw.amount\"\n                            amount={this.state.withdraw_amount}\n                            asset={this.props.asset.get(\"id\")}\n                            assets={[this.props.asset.get(\"id\")]}\n                            placeholder=\"0.0\"\n                            onChange={this.onWithdrawAmountChange.bind(this)}\n                            display_balance={balance}\n                        />\n                        {this.state.empty_withdraw_value ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.valid\" />\n                            </p>\n                        ) : null}\n                        {this.state.balanceError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.insufficient\" />\n                            </p>\n                        ) : null}\n                        {this.state.minAmountError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"gateway.rudex.min_amount_error\" />\n                            </p>\n                        ) : null}\n                        <p className=\"no-margin\" style={{paddingTop: 10}}>\n                            <b>\n                                <Translate\n                                    content=\"gateway.rudex.min_amount\"\n                                    minAmount={minDeposit}\n                                    symbol={this.props.output_coin_symbol}\n                                />\n                            </b>\n                        </p>\n                    </div>\n\n                    {/* Fee selection */}\n                    {this.state.feeAmount ? (\n                        <div className=\"content-block gate_fee\">\n                            <AmountSelector\n                                refCallback={this.setNestedRef.bind(this)}\n                                label=\"transfer.fee\"\n                                disabled={true}\n                                amount={this.state.feeAmount.getAmount({\n                                    real: true\n                                })}\n                                onChange={this.onFeeChanged.bind(this)}\n                                asset={this.state.feeAmount.asset_id}\n                                assets={fee_asset_types}\n                                tabIndex={tabIndex++}\n                            />\n                            {!this.state.hasBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noFeeBalance\" />\n                                </p>\n                            ) : null}\n                            {!this.state.hasPoolBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noPoolBalance\" />\n                                </p>\n                            ) : null}\n                        </div>\n                    ) : null}\n\n                    {/* Gate fee */}\n                    {gateFee ? (\n                        <div\n                            className=\"amount-selector right-selector\"\n                            style={{paddingBottom: 20}}\n                        >\n                            <label className=\"left-label\">\n                                <Translate content=\"gateway.fee\" />\n                            </label>\n                            <div className=\"inline-label input-wrapper\">\n                                <input type=\"text\" disabled value={gateFee} />\n                                <div className=\"form-label select floating-dropdown\">\n                                    <div className=\"dropdown-wrapper inactive\">\n                                        <div>\n                                            {this.props.output_coin_symbol}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : null}\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">\n                            <Translate\n                                component=\"span\"\n                                content=\"modal.withdraw.address\"\n                            />\n                        </label>\n                        <div className=\"rudex-select-dropdown\">\n                            <div className=\"inline-label\">\n                                <input\n                                    type=\"text\"\n                                    value={withdraw_address_selected}\n                                    tabIndex=\"4\"\n                                    onChange={this.onWithdrawAddressChanged.bind(\n                                        this\n                                    )}\n                                    autoComplete=\"off\"\n                                />\n                                <span onClick={this.onDropDownList.bind(this)}>\n                                    &#9660;\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"rudex-position-options\">{options}</div>\n                        {invalid_address_message}\n                    </div>\n\n                    {/* Memo input */}\n                    {withdraw_memo}\n\n                    {/* Withdraw/Cancel buttons */}\n                    <div className=\"button-group\">\n                        <div\n                            onClick={this.onSubmit.bind(this)}\n                            className={\n                                \"button\" +\n                                (this.state.error ||\n                                this.state.balanceError ||\n                                this.state.minAmountError\n                                    ? \" disabled\"\n                                    : \"\")\n                            }\n                        >\n                            <Translate content=\"modal.withdraw.submit\" />\n                        </div>\n\n                        <Trigger close={this.props.modal_id}>\n                            <div className=\"button\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                    {confirmation}\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default BindToChainState(RuDexWithdrawModal, {keep_updating: true});\n","import ls from \"./localStorage\";\nimport {rudexAPIs} from \"api/apiConfig\";\nconst rudexStorage = new ls(\"\");\n\nexport function fetchCoinList(url = rudexAPIs.BASE + rudexAPIs.COINS_LIST) {\n    return fetch(url, {method: \"post\"})\n        .then(reply =>\n            reply.json().then(result => {\n                return result;\n            })\n        )\n        .catch(err => {\n            console.log(\"error fetching rudex list of coins\", err, url);\n        });\n}\n\nexport function requestDepositAddress({\n    walletType,\n    inputCoinType,\n    outputCoinType,\n    outputAddress,\n    url = rudexAPIs.BASE,\n    stateCallback\n}) {\n    let body = {\n        inputCoinType,\n        outputCoinType,\n        outputAddress\n    };\n\n    let body_string = JSON.stringify(body);\n\n    fetch(url + `/wallets/${walletType}/new-deposit-address`, {\n        method: \"post\",\n        headers: new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }),\n        body: body_string\n    })\n        .then(\n            reply => {\n                reply.json().then(\n                    json => {\n                        // console.log( \"reply: \", json )\n                        let address = {\n                            address: json.inputAddress || \"unknown\",\n                            memo: json.inputMemo,\n                            error: json.error || null\n                        };\n                        if (stateCallback) stateCallback(address);\n                    },\n                    error => {\n                        // console.log( \"error: \",error  );\n                        if (stateCallback)\n                            stateCallback({address: \"unknown\", memo: null});\n                    }\n                );\n            },\n            error => {\n                // console.log( \"error: \",error  );\n                if (stateCallback)\n                    stateCallback({address: \"unknown\", memo: null});\n            }\n        )\n        .catch(err => {\n            console.log(\"fetch error:\", err);\n        });\n}\n\nexport function validateAddress({\n    url = rudexAPIs.BASE,\n    walletType,\n    newAddress\n}) {\n    if (!newAddress) return new Promise(res => res());\n    return fetch(url + \"/wallets/\" + walletType + \"/check-address\", {\n        method: \"post\",\n        headers: new Headers({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }),\n        body: JSON.stringify({address: newAddress})\n    })\n        .then(reply => reply.json().then(json => json.isValid))\n        .catch(err => {\n            console.log(\"validate error:\", err);\n        });\n}\n\nfunction hasWithdrawalAddress(wallet) {\n    return rudexStorage.has(`history_address_${wallet}`);\n}\n\nfunction setWithdrawalAddresses({wallet, addresses}) {\n    rudexStorage.set(`history_address_${wallet}`, addresses);\n}\n\nfunction getWithdrawalAddresses(wallet) {\n    return rudexStorage.get(`history_address_${wallet}`, []);\n}\n\nfunction setLastWithdrawalAddress({wallet, address}) {\n    rudexStorage.set(`history_address_last_${wallet}`, address);\n}\n\nfunction getLastWithdrawalAddress(wallet) {\n    return rudexStorage.get(`history_address_last_${wallet}`, \"\");\n}\n\nexport const WithdrawAddresses = {\n    has: hasWithdrawalAddress,\n    set: setWithdrawalAddresses,\n    get: getWithdrawalAddresses,\n    setLast: setLastWithdrawalAddress,\n    getLast: getLastWithdrawalAddress\n};\n","import WalletDb from \"stores/WalletDb\";\n\nclass RuDexDepositAddressCache {\n    constructor() {\n        // increment this to force generating new addresses for all mappings\n        this.current_rudex_address_cache_version_string = \"1\";\n    }\n\n    getIndexForDepositKeyInExchange(\n        account_name,\n        input_coin_type,\n        output_coin_type\n    ) {\n        let args = [\n            this.current_rudex_address_cache_version_string,\n            account_name,\n            input_coin_type,\n            output_coin_type\n        ];\n        return args.reduce(function(previous, current) {\n            return previous.concat(\"[\", current, \"]\");\n        }, \"\");\n    }\n\n    // returns {\"address\": address, \"memo\": memo}, with a null memo if not applicable\n    getCachedInputAddress(\n        exchange_name,\n        account_name,\n        input_coin_type,\n        output_coin_type\n    ) {\n        let wallet = WalletDb.getWallet();\n        if (!wallet) return null;\n        wallet.deposit_keys = wallet.deposit_keys || {};\n        wallet.deposit_keys[exchange_name] =\n            wallet.deposit_keys[exchange_name] || {};\n        let index = this.getIndexForDepositKeyInExchange(\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n        wallet.deposit_keys[exchange_name][index] =\n            wallet.deposit_keys[exchange_name][index] || [];\n\n        let number_of_keys = wallet.deposit_keys[exchange_name][index].length;\n        if (number_of_keys)\n            return wallet.deposit_keys[exchange_name][index][\n                number_of_keys - 1\n            ];\n        return null;\n    }\n\n    cacheInputAddress(\n        exchange_name,\n        account_name,\n        input_coin_type,\n        output_coin_type,\n        address,\n        memo\n    ) {\n        let wallet = WalletDb.getWallet();\n        if (!wallet) return null;\n        wallet.deposit_keys = wallet.deposit_keys || {};\n        wallet.deposit_keys[exchange_name] =\n            wallet.deposit_keys[exchange_name] || {};\n        let index = this.getIndexForDepositKeyInExchange(\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n        wallet.deposit_keys[exchange_name][index] =\n            wallet.deposit_keys[exchange_name][index] || [];\n        wallet.deposit_keys[exchange_name][index].push({\n            address: address,\n            memo: memo\n        });\n        WalletDb._updateWallet();\n    }\n} // RuDexDepositAddressCache\n\nexport default RuDexDepositAddressCache;\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport WalletDb from \"stores/WalletDb\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport PropTypes from \"prop-types\";\n\nvar mrktCashLogo = `${__BASE_URL__}images/partner-mrktcash.png`;\n\nclass RuDexFiatDepositWithdrawal extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    componentWillUnmount() {}\n\n    render() {\n        if (!this.props.account) return <div />;\n\n        let markCashLink = (\n            <a\n                style={{padding: \"12px 1.75rem\"}}\n                href=\"https://mrkt.cash/?r=102\"\n                target=\"_blank\"\n            >\n                <img style={{margin: 0, height: 80}} src={mrktCashLogo} />\n            </a>\n        );\n\n        return (\n            <div>\n                <h1>\n                    <Translate content=\"gateway.rudex.partners.mrktcash.title\" />\n                </h1>\n                <h3>\n                    <Translate content=\"gateway.rudex.partners.mrktcash.description\" />\n                </h3>\n                <p>{markCashLink}</p>\n            </div>\n        );\n    }\n} // RuDexFiatDepositWithdrawal\nRuDexFiatDepositWithdrawal = BindToChainState(RuDexFiatDepositWithdrawal);\n\nexport default RuDexFiatDepositWithdrawal;\n","import React from \"react\";\nimport {fetchAssets, fetchUserInfo} from \"common/gdexMethods\";\nimport LoadingIndicator from \"../../LoadingIndicator\";\nimport Translate from \"react-translate-component\";\nimport GdexGatewayInfo from \"./GdexGatewayInfo\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport GdexCache from \"../../../lib/common/GdexCache\";\nimport GdexHistory from \"./GdexHistory\";\nimport GdexAgreementModal from \"./GdexAgreementModal\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {\n    fetchWithdrawRule,\n    userAgreement\n} from \"../../../lib/common/gdexMethods\";\nvar NodeRSA = require(\"node-rsa\");\nlet gdexPublicKey = new NodeRSA(\n    \"-----BEGIN PUBLIC KEY-----\\n\" +\n        \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCH+QtHPKcWxdL25xL4pCuu16tKh6yPx/TFnd/8\\n\" +\n        \"cSt2TC+sPuYsD0h/sy4VKNxhBb7F7U/TLXjMxNcSfPVPjPM3X2LvOlmU9LOEcJGrmlmOOiyO/kws\\n\" +\n        \"yKKOhR4UyZ1NghhfHjuyDBj6V8fCL+xBZTJWsh/X61Z0wLCwOzXcQCsNJwIDAQAB\\n\" +\n        \"-----END PUBLIC KEY-----\"\n);\n\nclass GdexGateway extends React.Component {\n    constructor(props) {\n        super();\n        const action = props.viewSettings.get(\n            `${props.provider}Action`,\n            \"deposit\"\n        );\n\n        this.state = {\n            coins: null,\n            activeCoinInfo: this._getActiveCoinInfo(props, {action}),\n            action,\n            down: false,\n            isAvailable: true,\n            user_info: null,\n            isAgree: false,\n            agreeChecked: true,\n            agreeNotice: false,\n            locale: props.viewSettings.get(\"locale\"),\n            intermediate: null,\n            memo_rule: null\n        };\n        this.user_info_cache = new GdexCache();\n    }\n\n    _getActiveCoinInfo(props, state) {\n        let cachedCoinName = props.viewSettings.get(\n            `activeCoin_${props.provider}_${state.action}`,\n            null\n        );\n        let cachedCoinId = props.viewSettings.get(\n            `activeCoinId_${props.provider}`,\n            null\n        );\n        let firstTimeCoinName = null;\n        if (state.action == \"deposit\") {\n            firstTimeCoinName = \"BTC\";\n        } else {\n            firstTimeCoinName = \"GDEX.BTC\";\n        }\n        let firstTimeCoinId = 1002;\n        let activeCoinName = cachedCoinName\n            ? cachedCoinName\n            : firstTimeCoinName;\n        let activeCoinId = cachedCoinId ? cachedCoinId : firstTimeCoinId;\n        this._getWithdrawRule(activeCoinId);\n        return {name: activeCoinName, id: activeCoinId};\n    }\n\n    _transformCoin(data) {\n        var result = [];\n        try {\n            data\n                .filter(asset => {\n                    return asset.status != 0;\n                })\n                .forEach(asset => {\n                    let coin = {};\n                    if (asset.type == 1) {\n                        // inner asset\n                        coin.innerAssetId = asset.assetId;\n                        coin.innerAssetName = asset.assetName;\n                        coin.innerSymbol = asset.assetSymbol;\n                        coin.outerAssetId = asset.relationId;\n                        coin.outerAssetName = asset.relationSymbol;\n                        coin.outerSymbol = asset.relationSymbol;\n                        coin.status = asset.withdrawStatus;\n                        coin.gateFee = asset.withdrawFees;\n                        coin.needMemo = asset.needMemo;\n                        coin.minTransactionAmount = asset.minWithdrawAmount;\n                        coin.type = asset.type;\n                        coin.relationPrecision = asset.relationPrecision;\n                    } else if (asset.type == 2) {\n                        // outer asset\n                        coin.innerAssetId = asset.relationId;\n                        coin.innerAssetName = asset.relationSymbol;\n                        coin.innerSymbol = asset.relationSymbol;\n                        coin.outerAssetId = asset.assetId;\n                        coin.outerAssetName = asset.assetName;\n                        coin.outerSymbol = asset.assetSymbol;\n                        coin.status = asset.depositStatus;\n                        coin.gateFee = asset.depositFees;\n                        coin.needMemo = asset.needMemo;\n                        coin.minTransactionAmount = asset.minDepositAmount;\n                        coin.type = asset.type;\n                        coin.relationPrecision = asset.relationPrecision;\n                    } else {\n                        coin = null;\n                    }\n                    if (coin) result.push(coin);\n                });\n        } catch (err) {\n            console.log(\"Transform coin failed: \", err);\n        }\n        return result;\n    }\n\n    _getUserInfo(userName = null, isAgree = null) {\n        if (!userName) userName = this.props.account.get(\"name\");\n        if (!isAgree) isAgree = this.state.isAgree;\n        //User must agree to the agreement\n        if (!isAgree) return;\n\n        var result = fetchUserInfo({userAccount: userName, isAgree: isAgree});\n        let _this = this;\n        result.then(function(res) {\n            var user = res.user;\n            _this.setState({\n                isAgree: true,\n                user_info: {user_id: user.uid, status: user.status}\n            });\n            if (user.status == 0 && user.agreeAgreement) {\n                _this.user_info_cache.cacheUserInfo(\n                    userName,\n                    user.uid,\n                    user.status\n                );\n            } else {\n                _this.user_info_cache.delUserInfo(userName);\n            }\n        });\n        result.catch(err => {\n            console.log(\"Exception in fetching user info: \" + err);\n        });\n    }\n\n    _getCoins() {\n        var result = fetchAssets({userAccount: this.props.account.get(\"name\")});\n\n        let _this = this;\n        result.then(\n            function(data) {\n                let trans_data = _this._transformCoin(data.assets);\n                _this.setState({isAvailable: true, coins: trans_data});\n            },\n            function(errMsg) {\n                console.log(\"fail\" + errMsg);\n            }\n        );\n        result.catch(err => {\n            console.log(err);\n            _this.setState({isAvailable: false});\n        });\n    }\n\n    _checkIsAgree(userName = null) {\n        if (!userName) userName = this.props.account.get(\"name\");\n        var user_info = this.user_info_cache.getUserInfo(userName);\n        if (user_info) {\n            this.setState({user_info: user_info, isAgree: true});\n            return;\n        }\n        var result = userAgreement({userAccount: userName});\n        let _this = this;\n        result.then(\n            function(data) {\n                if (data.agree) {\n                    _this.setState({isAgree: true});\n                    _this._getUserInfo(userName, true);\n                } else {\n                    _this.setState({isAgree: false});\n                }\n            },\n            function(errMsg) {\n                console.log(\"fail\" + errMsg);\n            }\n        );\n        result.catch(err => {\n            console.log(err);\n            _this.setState({isAvailable: false});\n        });\n    }\n\n    componentWillMount() {\n        this._checkIsAgree();\n        this._getCoins();\n    }\n\n    _getWithdrawAssetId(assetName) {\n        let assetType = 1;\n        let assetSymbol = \"innerSymbol\";\n        if (this.state.action == \"deposit\") {\n            assetType = 2;\n            assetSymbol = \"outerSymbol\";\n        }\n        let assetId = this.state.coins.filter(coin => {\n            return coin.type == assetType && coin[assetSymbol] == assetName;\n        })[0].innerAssetId;\n        return assetId;\n    }\n\n    onSelectCoin(e) {\n        let activeCoinInfo = this.state.activeCoinInfo;\n        activeCoinInfo.name = e.target.value;\n        let assetId = this._getWithdrawAssetId(e.target.value);\n        activeCoinInfo.id = assetId;\n        this.setState({\n            activeCoinInfo: activeCoinInfo\n        });\n        this._getWithdrawRule(assetId);\n        let setting = {};\n        setting[`activeCoin_${this.props.provider}_${this.state.action}`] =\n            e.target.value;\n        setting[`activeCoinId_${this.props.provider}`] = assetId;\n        SettingsActions.changeViewSetting(setting);\n    }\n\n    _getWithdrawRule(assetId) {\n        var result = fetchWithdrawRule({assetId: assetId});\n        let _this = this;\n        result.then(\n            function(data) {\n                var intermediate = gdexPublicKey.decryptPublic(\n                    data.transferToAccount,\n                    \"utf-8\"\n                );\n                _this.setState({\n                    intermediate: intermediate,\n                    memo_rule: data.memoRule\n                });\n            },\n            function(errMsg) {\n                console.log(\"fail\" + errMsg);\n                _this.setState({intermediate: null});\n            }\n        );\n        result.catch(err => {\n            console.log(err);\n            _this.setState({intermediate: null});\n        });\n    }\n    changeAction(type) {\n        let activeCoinInfo = this._getActiveCoinInfo(this.props, {\n            action: type\n        });\n        this.setState({\n            action: type,\n            activeCoinInfo: activeCoinInfo\n        });\n        SettingsActions.changeViewSetting({\n            [`${this.props.provider}Action`]: type\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.account != nextProps.account) {\n            this._checkIsAgree(nextProps.account.get(\"name\"));\n        }\n    }\n\n    _updateCheck() {\n        this.setState({agreeChecked: !this.state.agreeChecked});\n        this.setState({agreeNotice: false});\n    }\n\n    _showUserAgreement() {\n        ZfApi.publish(\"gdex_agreement\", \"open\");\n    }\n\n    _registerUser() {\n        if (this.state.agreeChecked) {\n            this._getUserInfo(null, true);\n        } else {\n            this.setState({agreeNotice: true});\n        }\n    }\n    render() {\n        let {account} = this.props;\n        let {\n            coins,\n            activeCoinInfo,\n            action,\n            isAvailable,\n            user_info,\n            isAgree,\n            agreeChecked,\n            agreeNotice,\n            intermediate,\n            memo_rule\n        } = this.state;\n        let issuer = {\n            ticket: \"https://support.gdex.io/\",\n            qq: \"602573197\",\n            telgram: \"https://t.me/GDEXer\"\n        };\n        let supportContent = (\n            <div>\n                {/*<label className=\"left-label\">Support</label>*/}\n                <br />\n                <br />\n                <Translate content=\"gateway.support_gdex\" />\n                <br />\n                <br />\n                <p>\n                    Help:{\" \"}\n                    <a\n                        href={issuer.ticket}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {issuer.ticket}\n                    </a>\n                </p>\n                <p>\n                    QQ:{\" \"}\n                    <a\n                        target=\"_blank\"\n                        href=\"//shang.qq.com/wpa/qunwpa?idkey=5d192c325146762cf5a9256038fed9faef4fcace21a36882854354dd1d599f11\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {issuer.qq}\n                    </a>\n                </p>\n                <p>\n                    Telegram:{\" \"}\n                    <a\n                        href={issuer.telgram}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {issuer.telgram}\n                    </a>\n                </p>\n            </div>\n        );\n        if (!isAgree) {\n            return (\n                <div>\n                    <span>\n                        <input\n                            type=\"checkbox\"\n                            style={{marginRight: \"10px\"}}\n                            checked={agreeChecked}\n                            onChange={this._updateCheck.bind(this)}\n                        />\n                        <Translate\n                            className=\"txtlabel\"\n                            content=\"gateway.agreement.hint\"\n                        />\n                        <a onClick={this._showUserAgreement.bind(this)}>\n                            {\" \"}\n                            <Translate\n                                className=\"txtlabel\"\n                                content=\"gateway.agreement.name\"\n                            />\n                        </a>\n                    </span>\n                    {agreeNotice ? (\n                        <div className=\"has-error\" style={{paddingTop: 10}}>\n                            <Translate\n                                className=\"txtlabel\"\n                                content=\"gateway.agreement.notice\"\n                            />\n                        </div>\n                    ) : null}\n\n                    <div className=\"buttonGroup\">\n                        <span\n                            style={{marginTop: \"20px\"}}\n                            onClick={this._registerUser.bind(this)}\n                            className=\" button\"\n                        >\n                            <Translate\n                                className=\"txtlabel\"\n                                content=\"gateway.agreement.register\"\n                            />\n                        </span>\n                    </div>\n                    <BaseModal id={\"gdex_agreement\"} overlay={true}>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <GdexAgreementModal\n                                locale={this.props.settings.get(\"locale\", \"en\")}\n                            />\n                        </div>\n                    </BaseModal>\n                    {supportContent}\n                </div>\n            );\n        }\n        if (!coins && isAvailable) {\n            return <LoadingIndicator />;\n        }\n        if (!isAvailable) {\n            return (\n                <div>\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.unavailable\"\n                        component=\"h4\"\n                    />\n                </div>\n            );\n        }\n\n        var assetSymbol = null;\n        var assetId = null;\n        var actionType = null;\n        if (action == \"deposit\") {\n            assetId = \"outerAssetId\";\n            assetSymbol = \"outerSymbol\";\n            actionType = 2;\n        } else {\n            assetId = \"innerAssetId\";\n            assetSymbol = \"innerSymbol\";\n            actionType = 1;\n        }\n        coins = coins.filter(coin => {\n            return coin.type == actionType;\n        });\n        let coinOptions = coins\n            .map(coin => {\n                return (\n                    <option value={coin[assetSymbol]} key={coin[assetSymbol]}>\n                        {coin[assetSymbol]}\n                    </option>\n                );\n            })\n            .filter(a => {\n                return a !== null;\n            });\n\n        let coin = coins.filter(coin => {\n            return coin[assetSymbol] == activeCoinInfo.name;\n        })[0];\n\n        let infos = null;\n        if (!coin || coin.status != 0) {\n            infos = (\n                <label className=\"left-label\">\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.asset_unavailable\"\n                        asset={activeCoinInfo.name}\n                        component=\"h4\"\n                    />\n                </label>\n            );\n        } else if (!user_info) {\n            infos = (\n                <label className=\"left-label\">\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.user_unavailable\"\n                        component=\"h4\"\n                    />\n                </label>\n            );\n        } else if (user_info.status != 0) {\n            infos = (\n                <label className=\"left-label\">\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.frozen\"\n                        account={account.get(\"name\")}\n                        component=\"h4\"\n                    />\n                </label>\n            );\n        }\n\n        return (\n            <div style={this.props.style}>\n                <div className=\"grid-block no-margin vertical medium-horizontal no-padding\">\n                    <div className=\"medium-4\">\n                        <div>\n                            <label\n                                style={{minHeight: \"2rem\"}}\n                                className=\"left-label\"\n                            >\n                                <Translate\n                                    content={\"gateway.choose_\" + action}\n                                />:{\" \"}\n                            </label>\n                            <select\n                                className=\"external-coin-types bts-select\"\n                                onChange={this.onSelectCoin.bind(this)}\n                                value={activeCoinInfo.name}\n                            >\n                                {coinOptions}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"medium-6 medium-offset-1\">\n                        <label\n                            style={{minHeight: \"2rem\"}}\n                            className=\"left-label\"\n                        >\n                            <Translate content=\"gateway.gateway_text\" />:\n                        </label>\n                        <div style={{paddingBottom: 15}}>\n                            <ul className=\"button-group segmented no-margin\">\n                                <li\n                                    className={\n                                        action === \"deposit\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"deposit\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.deposit\" />\n                                    </a>\n                                </li>\n                                <li\n                                    className={\n                                        action === \"withdraw\" ? \"is-active\" : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"withdraw\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.withdraw\" />\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                {infos ? (\n                    infos\n                ) : (\n                    <div>\n                        <div style={{marginBottom: 15}}>\n                            <GdexGatewayInfo\n                                account={account}\n                                coin={coin}\n                                issuer_account={intermediate}\n                                user_id={user_info.user_id}\n                                action={this.state.action}\n                                gateway={\"gdex\"}\n                                btsCoin={coin.innerSymbol}\n                                memo_rule={memo_rule}\n                            />\n                        </div>\n                        <GdexHistory\n                            userId={user_info.user_id}\n                            userAccount={account.get(\"name\")}\n                            assetId={coin[assetId]}\n                            assetName={coin[assetSymbol]}\n                            compactView={true}\n                            fullHeight={true}\n                            recordType={action == \"deposit\" ? 1 : 2}\n                            filter=\"transfer\"\n                            title={\n                                <Translate\n                                    content={\n                                        \"gateway.recent_\" + this.state.action\n                                    }\n                                />\n                            }\n                        />\n                    </div>\n                )}\n\n                {supportContent}\n            </div>\n        );\n    }\n}\n\nexport default connect(GdexGateway, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            viewSettings: SettingsStore.getState().viewSettings,\n            settings: SettingsStore.getState().settings\n        };\n    }\n});\n","import ls from \"./localStorage\";\nimport {gdexAPIs} from \"api/apiConfig\";\n\nconst gdexStorage = new ls(\"\");\n\nlet assetsRequest = {};\nlet REQUEST_TIMEOUT = 10000;\n\nexport function fetchWithdrawRule(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.WITHDRAW_RULE,\n        timeout\n    );\n}\n\nexport function userAgreement(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.USER_AGREEMENT,\n        timeout\n    );\n}\n\nexport function fetchAssets(reqBody, timeout = -1) {\n    if (!reqBody.requestType) reqBody.requestType = 0;\n    if (!reqBody.assetType) reqBody.assetType = 0;\n    if (!reqBody.version) reqBody.version = \"1.1\";\n    return requestSimple(reqBody, gdexAPIs.BASE + gdexAPIs.ASSET_LIST, timeout);\n}\n\n//\"userAccount\"\nexport function fetchUserInfo(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.GET_USER_INFO,\n        timeout\n    );\n}\n\nexport function validateAddress(reqBody, timeout = -1) {\n    if (!reqBody.address) return new Promise(res => res());\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.CHECK_WITHDRAY_ADDRESS,\n        timeout\n    );\n}\n\nexport function requestDepositAddress(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.GET_DEPOSIT_ADDRESS,\n        timeout\n    );\n}\n\nexport function getTransactionRecordList(reqBody, type, timeout = -1) {\n    if (type == 1) return getDepositRecordList(reqBody, timeout);\n    else if (type == 2) return getWithdrawRecordList(reqBody, timeout);\n    else return new Promise(res => res());\n}\n\nexport function getDepositRecordList(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.DEPOSIT_RECORD_LIST,\n        timeout\n    );\n}\n\nexport function getWithdrawRecordList(reqBody, timeout = -1) {\n    return requestSimple(\n        reqBody,\n        gdexAPIs.BASE + gdexAPIs.WITHDRAW_RECORD_LIST,\n        timeout\n    );\n}\n\nfunction requestSimple(reqBody, reqUrl, timeout = -1) {\n    if (timeout == -1) {\n        return requestWithTimeout(reqBody, reqUrl, REQUEST_TIMEOUT);\n    } else if (timeout == 0) {\n        return requestWithoutTimeout(reqBody, reqUrl);\n    } else {\n        return requestWithTimeout(reqBody, reqUrl, timeout);\n    }\n}\n\nfunction requestWithTimeout(reqBody, reqUrl, timeout) {\n    if (!reqBody.requestChannel) reqBody.requestChannel = 0;\n    if (!reqBody.version) reqBody.version = \"1.0\";\n    if (!reqBody.timestamp) reqBody.timestamp = new Date().getTime();\n    if (!reqBody.outerChannel) reqBody.outerChannel = \"Bitshares\";\n    let body_string = JSON.stringify(reqBody);\n    if (assetsRequest[body_string]) return;\n    assetsRequest[body_string] = true;\n    return Promise.race([\n        new Promise((resolve, reject) => {\n            fetch(reqUrl, {\n                method: \"post\",\n                headers: new Headers({\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\"\n                }),\n                body: body_string\n                // mode: \"no-cors\"\n            }).then(reply => {\n                reply\n                    .json()\n                    .then(json => {\n                        delete assetsRequest[body_string];\n                        if (json.code !== 0) {\n                            console.log(json);\n                            reject({code: json.code, message: json.message});\n                        }\n                        resolve(json.data);\n                    })\n                    .catch(err => {\n                        delete assetsRequest[body_string];\n                        reject({code: -1, message: err.message});\n                    });\n            });\n        }),\n        new Promise(function(resolve, reject) {\n            setTimeout(() => {\n                reject({code: -2, message: \"Request timeout.\"});\n            }, timeout);\n        })\n    ]);\n}\n\nfunction requestWithoutTimeout(reqBody, reqUrl) {\n    if (!reqBody.requestChannel) reqBody.requestChannel = 0;\n    if (!reqBody.version) reqBody.version = \"1.0\";\n    if (!reqBody.timestamp) reqBody.timestamp = new Date().getTime();\n    if (!reqBody.outerChannel) reqBody.outerChannel = \"Bitshares\";\n    let body_string = JSON.stringify(reqBody);\n    if (assetsRequest[body_string]) return;\n    assetsRequest[body_string] = true;\n    new Promise((resolve, reject) => {\n        fetch(reqUrl, {\n            method: \"post\",\n            headers: new Headers({\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            }),\n            body: body_string\n        }).then(reply => {\n            reply\n                .json()\n                .then(json => {\n                    delete assetsRequest[body_string];\n                    if (json.code !== 0) {\n                        console.log(json);\n                        reject({code: json.code, message: json.message});\n                    }\n                    resolve(json.data);\n                })\n                .catch(err => {\n                    delete assetsRequest[body_string];\n                    reject({code: -1, message: err.message});\n                });\n        });\n    });\n}\n\nfunction hasWithdrawalAddress(wallet) {\n    return gdexStorage.has(`gdex_history_address_${wallet}`);\n}\n\nfunction setWithdrawalAddresses({wallet, addresses}) {\n    gdexStorage.set(`gdex_history_address_${wallet}`, addresses);\n}\n\nfunction getWithdrawalAddresses(wallet) {\n    return gdexStorage.get(`gdex_history_address_${wallet}`, []);\n}\n\nfunction setLastWithdrawalAddress({wallet, address}) {\n    gdexStorage.set(`gdex_history_address_last_${wallet}`, address);\n}\n\nfunction getLastWithdrawalAddress(wallet) {\n    return gdexStorage.get(`gdex_history_address_last_${wallet}`, \"\");\n}\n\nexport const WithdrawAddresses = {\n    has: hasWithdrawalAddress,\n    set: setWithdrawalAddresses,\n    get: getWithdrawalAddresses,\n    setLast: setLastWithdrawalAddress,\n    getLast: getLastWithdrawalAddress\n};\n","import React from \"react\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport Translate from \"react-translate-component\";\nimport AssetName from \"../../Utility/AssetName\";\nimport LinkToAccountById from \"../../Utility/LinkToAccountById\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport ChainTypes from \"../../Utility/ChainTypes\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport GdexCache from \"../../../lib/common/GdexCache\";\nimport {requestDepositAddress} from \"../../../lib/common/gdexMethods\";\nimport QRCode from \"qrcode.react\";\nimport GdexWithdrawModal from \"./GdexWithdrawModal\";\nimport counterpart from \"counterpart\";\nimport PropTypes from \"prop-types\";\n\nclass GdexGatewayInfo extends React.Component {\n    static propTypes = {\n        // inner_asset_name:               PropTypes.string,\n        // outer_asset_name:           PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        gateway: PropTypes.string,\n        btsCoin: ChainTypes.ChainAsset,\n        memo_rule: PropTypes.string\n    };\n\n    static defaultProps = {\n        autosubscribe: false\n    };\n\n    constructor() {\n        super();\n        this.state = {\n            receive_address: null,\n            isAvailable: true,\n            qrcode: \"\"\n        };\n        this.deposit_address_cache = new GdexCache();\n        this._copy = this._copy.bind(this);\n        document.addEventListener(\"copy\", this._copy);\n    }\n\n    getDepositAddress() {\n        this._getDepositAddress(\n            this.props.user_id,\n            this.props.account.get(\"name\"),\n            this.props.coin,\n            this.props.action\n        );\n    }\n\n    _getDepositAddress(user_id, user_name, coin, action) {\n        // The coin can only support withdraw sometime, no need to call get deposit address\n        if (action != \"deposit\") return;\n\n        let cached_receive_address = this.deposit_address_cache.getCachedInputAddress(\n            user_name,\n            coin.outerSymbol,\n            coin.innerSymbol\n        );\n        if (\n            cached_receive_address &&\n            cached_receive_address != this.state.receive_address\n        ) {\n            this.setState({receive_address: cached_receive_address});\n            return;\n        }\n        // Get address from server side\n        var _this = this;\n        requestDepositAddress({\n            btsAssetId: coin.innerAssetId,\n            outAssetId: coin.outerAssetId,\n            uid: user_id,\n            userAccount: user_name\n        })\n            .then(data => {\n                if (data.address && data.address.address) {\n                    var receive_address = {\n                        address: data.address.address,\n                        memo: data.address.memo\n                    };\n                    _this.deposit_address_cache.cacheInputAddress(\n                        user_name,\n                        coin.outerSymbol,\n                        coin.innerSymbol,\n                        receive_address.address,\n                        receive_address.memo\n                    );\n                    _this.setState({receive_address: receive_address});\n                } else {\n                    _this.setState({receive_address: null});\n                }\n            })\n            .catch(err => {\n                _this.setState({receive_address: null});\n                console.log(err);\n            });\n    }\n\n    componentWillMount() {\n        this.getDepositAddress();\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.user_id !== this.props.user_id ||\n            np.action !== this.props.action ||\n            np.coin != this.props.coin\n        ) {\n            this._getDepositAddress(\n                np.user_id,\n                np.account.get(\"name\"),\n                np.coin,\n                np.action\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"copy\", this._copy);\n    }\n\n    getWithdrawModalId() {\n        return (\n            \"withdraw_asset_\" +\n            this.props.issuer_account.get(\"name\") +\n            \"_\" +\n            this.props.coin.innerSymbol\n        );\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    onShowQrcode(text) {\n        this.setState({qrcode: text}, () => ZfApi.publish(\"qrcode\", \"open\"));\n    }\n\n    _copy(e) {\n        try {\n            if (this.state.clipboardText)\n                e.clipboardData.setData(\"text/plain\", this.state.clipboardText);\n            else\n                e.clipboardData.setData(\n                    \"text/plain\",\n                    counterpart\n                        .translate(\"gateway.use_copy_button\")\n                        .toUpperCase()\n                );\n            e.preventDefault();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    toClipboard(clipboardText) {\n        try {\n            this.setState({clipboardText}, () => {\n                document.execCommand(\"copy\");\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    render() {\n        let emptyRow = <div style={{display: \"none\", minHeight: 150}} />;\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.coin\n        )\n            return emptyRow;\n        const {coin, btsCoin} = this.props;\n        // asset is not loaded\n        if (!btsCoin) return emptyRow;\n        let receive_address = this.state.receive_address;\n        let qrcode = this.state.qrcode;\n        let withdraw_modal_id = this.getWithdrawModalId();\n        let deposit_address_fragment = null;\n        let clipboardText = \"\";\n        let memoText = \"\";\n        let deposit_memo_fragment = null;\n\n        var withdraw_memo_prefix = coin.outerSymbol + \":\";\n        if (this.props.action === \"deposit\") {\n            if (receive_address) {\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n                clipboardText = receive_address.address;\n                if (receive_address.memo) {\n                    deposit_memo_fragment = <span>{receive_address.memo}</span>;\n                    memoText = receive_address.memo;\n                }\n            }\n            withdraw_memo_prefix = \"\";\n        }\n        let balance = null;\n        let account_balances_object = this.props.account.get(\"balances\");\n\n        if (account_balances_object)\n            balance = account_balances_object.toJS()[btsCoin.get(\"id\")];\n\n        if (this.props.action === \"deposit\") {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_deposit\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {coin.outerSymbol}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={coin.innerSymbol}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.your_account\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={coin.innerSymbol}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.deposit_to\"\n                                asset={coin.outerSymbol}\n                            />:\n                        </label>\n                        <p style={{color: \"red\"}}>\n                            <Translate\n                                content=\"gateway.deposit_warning\"\n                                asset={coin.outerSymbol}\n                            />\n                        </p>\n                        {memoText ? (\n                            <p style={{color: \"red\"}}>\n                                <Translate\n                                    content=\"gateway.deposit_warning_memo\"\n                                    asset={coin.outerSymbol}\n                                />\n                            </p>\n                        ) : null}\n                        <div>\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.address\" />:\n                                        </td>\n                                        <td>{deposit_address_fragment}</td>\n                                        <td>\n                                            <div\n                                                style={{width: \"125px\"}}\n                                                className=\"button\"\n                                                onClick={this.toClipboard.bind(\n                                                    this,\n                                                    clipboardText\n                                                )}\n                                            >\n                                                <Translate content=\"transfer.copy_address\" />\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div\n                                                className=\"button\"\n                                                onClick={this.onShowQrcode.bind(\n                                                    this,\n                                                    clipboardText\n                                                )}\n                                            >\n                                                <Translate content=\"modal.qrcode.label\" />\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {memoText ? (\n                                        <tr>\n                                            <td>\n                                                <Translate content=\"gateway.memo\" />:\n                                            </td>\n                                            <td>{memoText}</td>\n                                            <td>\n                                                <div\n                                                    style={{width: \"125px\"}}\n                                                    className=\"button\"\n                                                    onClick={this.toClipboard.bind(\n                                                        this,\n                                                        memoText\n                                                    )}\n                                                >\n                                                    <Translate content=\"transfer.copy_memo\" />\n                                                </div>\n                                            </td>\n                                            <td>\n                                                <div\n                                                    className=\"button\"\n                                                    onClick={this.onShowQrcode.bind(\n                                                        this,\n                                                        memoText\n                                                    )}\n                                                >\n                                                    <Translate content=\"modal.qrcode.label\" />\n                                                </div>\n                                            </td>\n                                        </tr>\n                                    ) : null}\n                                </tbody>\n                            </table>\n                            <BaseModal id=\"qrcode\" overlay={true}>\n                                {/*<div className=\"gdex-gateway\">abc</div>*/}\n                                <DepositQrCodeModal text={qrcode} />\n                            </BaseModal>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_withdraw\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={coin.innerSymbol}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {coin.outerSymbol}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={coin.innerSymbol}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.withdraw_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <div className=\"button-group\" style={{paddingTop: 20}}>\n                            <button\n                                className=\"button success\"\n                                style={{fontSize: \"1.3rem\"}}\n                                onClick={this.onWithdraw.bind(this)}\n                            >\n                                <Translate content=\"gateway.withdraw_now\" />{\" \"}\n                            </button>\n                        </div>\n                    </div>\n                    <BaseModal id={withdraw_modal_id} overlay={true}>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <GdexWithdrawModal\n                                account={this.props.account.get(\"name\")}\n                                issuer={this.props.issuer_account.get(\"name\")}\n                                asset={coin.innerSymbol}\n                                output_coin_name={coin.outerAssetName}\n                                gateFee={coin.gateFee}\n                                output_coin_id={coin.outerAssetId}\n                                output_coin_symbol={coin.outerSymbol}\n                                output_supports_memos={coin.needMemo == 1}\n                                minWithdrawAmount={coin.minTransactionAmount}\n                                output_coin_precision={coin.relationPrecision}\n                                memo_prefix={withdraw_memo_prefix}\n                                memo_rule={this.props.memo_rule}\n                                modal_id={withdraw_modal_id}\n                                balance={balance}\n                            />\n                        </div>\n                    </BaseModal>\n                </div>\n            );\n        }\n    }\n}\n\nclass DepositQrCodeModal extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let text = this.props.text;\n        return (\n            <div className=\"small-12\" style={{textAlign: \"center\"}}>\n                <QRCode size={200} value={text} />\n                <br />\n                <br />\n                <label>{text}</label>\n            </div>\n        );\n    }\n}\n\nexport default BindToChainState(GdexGatewayInfo);\n","import ss from \"common/localStorage\";\n\nconst session = new ss(\"__gdex__user_\");\n\nclass GdexCache {\n    constructor() {\n        this.current_gdex_address_cache_version_string = \"1\";\n        this.day = 86400;\n    }\n\n    getUserInfo(user_account) {\n        let user_info = session.get(user_account, null);\n        if (!user_info) return null;\n        let cur_time = Math.floor(new Date().getTime() / 1000);\n        // User info expire time set to 1 day\n        if (Math.abs(user_info.ctime - cur_time) > this.day) {\n            session.remove(user_account);\n            return null;\n        }\n        return user_info;\n    }\n\n    cacheUserInfo(user_account, user_id, status) {\n        let user_info = session.get(user_account, {});\n        if (user_info != {}) {\n            user_info = {\n                user_id: user_id,\n                status: status,\n                ctime: Math.floor(new Date().getTime() / 1000)\n            };\n            session.set(user_account, user_info);\n        }\n    }\n\n    delUserInfo(user_account) {\n        if (session.has(user_account)) session.del(user_account);\n    }\n\n    getIndexForDepositKey(account_name, input_coin_type, output_coin_type) {\n        let args = [\n            this.current_gdex_address_cache_version_string,\n            account_name,\n            input_coin_type,\n            output_coin_type\n        ];\n        return args.reduce(function(previous, current) {\n            return previous.concat(\"[\", current, \"]\");\n        }, \"\");\n    }\n\n    getCachedInputAddress(account_name, input_coin_type, output_coin_type) {\n        const index = this.getIndexForDepositKey(\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n        let deposit_keys = session.get(\"deposit_keys\", {});\n        let result = deposit_keys[index] || null;\n        if (!result) return;\n        if (result.address) {\n            // cache deposit address for 1 week\n            let cur_time = Math.floor(new Date().getTime() / 1000);\n            if (Math.abs(result.ctime - cur_time) > this.day) {\n                this.clearInputAddress(\n                    account_name,\n                    input_coin_type,\n                    output_coin_type\n                );\n                return null;\n            }\n            return result;\n        }\n        return null;\n    }\n\n    cacheInputAddress(\n        account_name,\n        input_coin_type,\n        output_coin_type,\n        address,\n        memo\n    ) {\n        const index = this.getIndexForDepositKey(\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n        let deposit_keys = session.get(\"deposit_keys\", {});\n        deposit_keys[index] = {\n            address: address,\n            memo: memo,\n            ctime: Math.floor(new Date().getTime() / 1000)\n        };\n        session.set(\"deposit_keys\", deposit_keys);\n    }\n\n    clearInputAddress(account_name, input_coin_type, output_coin_type) {\n        const index = this.getIndexForDepositKey(\n            account_name,\n            input_coin_type,\n            output_coin_type\n        );\n        let deposit_keys = session.get(\"deposit_keys\", null);\n        if (!deposit_keys) return;\n        if (!deposit_keys[index]) {\n            // Deposit key is empty, no need to clear\n            return;\n        }\n        deposit_keys[index] = {address: null, memo: null, ctime: null};\n        session.set(\"deposit_keys\", deposit_keys);\n    }\n}\n\nexport default GdexCache;\n","import React from \"react\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport AccountActions from \"actions/AccountActions\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {validateAddress, WithdrawAddresses} from \"common/gdexMethods\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Modal from \"react-foundation-apps/src/modal\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport {Asset, Price} from \"common/MarketClasses\";\nimport {debounce} from \"lodash-es\";\nimport PropTypes from \"prop-types\";\n\nclass GdexWithdrawModal extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        memo_rule: PropTypes.string.isRequired,\n        balance: ChainTypes.ChainObject,\n        output_supports_memos: PropTypes.bool.isRequired\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            withdraw_amount: this.props.amount_to_withdraw,\n            withdraw_address: WithdrawAddresses.getLast(props.output_coin_name),\n            withdraw_address_check_in_progress: true,\n            withdraw_address_is_valid: null,\n            options_is_valid: false,\n            withdraw_address_selected: WithdrawAddresses.getLast(\n                props.output_coin_name\n            ),\n            memo: \"\",\n            withdraw_address_first: true,\n            empty_withdraw_value: false,\n            below_minumum_withdraw_value: false,\n            precision_error: false,\n            memo_error: false,\n            memo_length_error: false,\n            from_account: props.account,\n            fee_asset_id: \"1.3.0\",\n            feeStatus: {},\n            withdraw_address_error_code: null,\n            withdraw_address_error_message: null\n        };\n\n        this._validateAddress(this.state.withdraw_address, props);\n\n        this._checkBalance = this._checkBalance.bind(this);\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n    }\n\n    componentWillMount() {\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (np.output_coin_name != this.props.output_coin_name) {\n            this.setState({\n                withdraw_address: WithdrawAddresses.getLast(\n                    np.output_coin_name\n                ),\n                withdraw_address_selected: WithdrawAddresses.getLast(\n                    np.output_coin_name\n                )\n            });\n        }\n        if (\n            np.account !== this.state.from_account &&\n            np.account !== this.props.account\n        ) {\n            this.setState(\n                {\n                    from_account: np.account,\n                    feeStatus: {},\n                    fee_asset_id: \"1.3.0\",\n                    feeAmount: new Asset({amount: 0})\n                },\n                () => {\n                    this._updateFee();\n                    this._checkFeeStatus();\n                }\n            );\n        }\n    }\n\n    _assembleMemo() {\n        let memo_rule = this.props.memo_rule;\n        let memo_message = \"\";\n        try {\n            if (memo_rule) {\n                memo_rule.split(\";\").forEach(item => {\n                    switch (item[0]) {\n                        case \"C\":\n                            memo_message += item.slice(2);\n                            break;\n                        case \"D\":\n                            memo_message += this.state.withdraw_address;\n                            break;\n                        case \"B\":\n                            memo_message += item.slice(2);\n                            break;\n                        case \"S\":\n                            memo_message += this.state.memo;\n                            break;\n                    }\n                });\n                if (memo_message.length > 100) {\n                    this.setState({memo_length_error: true});\n                    return null;\n                } else {\n                    this.setState({memo_length_error: false});\n                }\n                this.setState({memo_error: false});\n                return memo_message;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        this.setState({memo_error: true});\n        return null;\n    }\n\n    _updateFee(state = this.state) {\n        let {fee_asset_id, from_account} = state;\n        const {fee_asset_types} = this._getAvailableAssets(state);\n        if (\n            fee_asset_types.length === 1 &&\n            fee_asset_types[0] !== fee_asset_id\n        ) {\n            fee_asset_id = fee_asset_types[0];\n        }\n\n        if (!from_account) return null;\n        checkFeeStatusAsync({\n            accountID: from_account.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content: this._assembleMemo()\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) => {\n            if (this.unMounted) return;\n\n            this.setState(\n                {\n                    feeAmount: fee,\n                    hasBalance,\n                    hasPoolBalance,\n                    error: !hasBalance || !hasPoolBalance\n                },\n                this._checkBalance\n            );\n        });\n    }\n\n    _checkFeeStatus(state = this.state) {\n        let account = state.from_account;\n        if (!account) return;\n\n        const {fee_asset_types: assets} = this._getAvailableAssets(state);\n        // const assets = [\"1.3.0\", this.props.asset.get(\"id\")];\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content:\n                            this.props.output_coin_name +\n                            \":\" +\n                            state.withdraw_address +\n                            (state.memo ? \":\" + state.memo : \"\")\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    onWithdrawAmountChange({amount}) {\n        this.setState(\n            {\n                withdraw_amount: amount,\n                empty_withdraw_value:\n                    amount !== undefined && !parseFloat(amount)\n            },\n            this._checkBalance\n        );\n    }\n\n    onSelectChanged(index) {\n        let new_withdraw_address = WithdrawAddresses.get(\n            this.props.output_coin_symbol\n        )[index];\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_coin_symbol,\n            address: new_withdraw_address\n        });\n\n        this.setState(\n            {\n                withdraw_address_selected: new_withdraw_address,\n                options_is_valid: false,\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    onWithdrawAddressChanged(e) {\n        let new_withdraw_address = e.target.value.trim();\n\n        this.setState(\n            {\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_selected: new_withdraw_address,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    _validateAddress(new_withdraw_address, props = this.props) {\n        validateAddress({\n            assetId: props.output_coin_id,\n            assetName: props.output_coin_name,\n            address: new_withdraw_address\n        })\n            .then(data => {\n                this.setState({\n                    withdraw_address_check_in_progress: false,\n                    withdraw_address_is_valid: data.valid,\n                    withdraw_address_error_code: null,\n                    withdraw_address_error_message: null\n                });\n            })\n            .catch(err => {\n                let message = err.message;\n                let code = err.code;\n                if (code < 0) message = \"System error: please try again later\";\n                this.setState({\n                    withdraw_address_check_in_progress: false,\n                    withdraw_address_is_valid: null,\n                    withdraw_address_error_code: err.code,\n                    withdraw_address_error_message: message\n                });\n            });\n    }\n    _checkPrecision() {\n        let {withdraw_amount} = this.state;\n        let {output_coin_precision} = this.props;\n        if (output_coin_precision === \"undefined\") return;\n        if (typeof withdraw_amount !== \"string\")\n            withdraw_amount = withdraw_amount.toString();\n        withdraw_amount = withdraw_amount.trim();\n        if (withdraw_amount.indexOf(\".\") === -1) {\n            this.setState({precision_error: false});\n            return;\n        }\n        if (\n            withdraw_amount.length - withdraw_amount.indexOf(\".\") - 1 >\n            output_coin_precision\n        ) {\n            this.setState({precision_error: true});\n        } else {\n            this.setState({precision_error: false});\n        }\n    }\n\n    _checkBalance() {\n        let {feeAmount, withdraw_amount} = this.state;\n        let {asset, balance, minWithdrawAmount} = this.props;\n        if (!balance) {\n            // does not own any asset\n            this.setState({balanceError: true});\n            return;\n        }\n        if (!feeAmount) return;\n        const hasBalance = checkBalance(\n            withdraw_amount,\n            asset,\n            feeAmount,\n            balance\n        );\n        // balance is zero\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n\n        if (typeof withdraw_amount === \"string\")\n            withdraw_amount = parseFloat(\n                String.prototype.replace.call(withdraw_amount, /,/g, \"\")\n            );\n        if (typeof minWithdrawAmount === \"string\")\n            minWithdrawAmount = parseFloat(\n                String.prototype.replace.call(minWithdrawAmount, /,/g, \"\")\n            );\n        if (withdraw_amount < minWithdrawAmount) {\n            this.setState({below_minumum_withdraw_value: true});\n            return;\n        } else {\n            this.setState({below_minumum_withdraw_value: false});\n        }\n        this._checkPrecision();\n        return hasBalance;\n    }\n\n    onSubmit() {\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address &&\n                this.state.withdraw_address.length) &&\n            this.state.withdraw_amount !== null\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                ZfApi.publish(this.getWithdrawModalId(), \"open\");\n            } else if (parseFloat(this.state.withdraw_amount) > 0) {\n                if (!WithdrawAddresses.has(this.props.output_coin_symbol)) {\n                    let withdrawals = [];\n                    withdrawals.push(this.state.withdraw_address);\n                    WithdrawAddresses.set({\n                        wallet: this.props.output_coin_symbol,\n                        addresses: withdrawals\n                    });\n                } else {\n                    let withdrawals = WithdrawAddresses.get(\n                        this.props.output_coin_symbol\n                    );\n                    if (\n                        withdrawals.indexOf(this.state.withdraw_address) == -1\n                    ) {\n                        withdrawals.push(this.state.withdraw_address);\n                        WithdrawAddresses.set({\n                            wallet: this.props.output_coin_symbol,\n                            addresses: withdrawals\n                        });\n                    }\n                }\n                WithdrawAddresses.setLast({\n                    wallet: this.props.output_coin_symbol,\n                    address: this.state.withdraw_address\n                });\n                let asset = this.props.asset;\n\n                const {feeAmount} = this.state;\n\n                let amount = parseFloat(\n                    String.prototype.replace.call(\n                        this.state.withdraw_amount,\n                        /,/g,\n                        \"\"\n                    )\n                );\n\n                let sendAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: amount\n                });\n                AccountActions.transfer(\n                    this.props.account.get(\"id\"),\n                    this.props.issuer.get(\"id\"),\n                    sendAmount.getAmount(),\n                    asset.get(\"id\"),\n                    this._assembleMemo(),\n                    null,\n                    feeAmount ? feeAmount.asset_id : \"1.3.0\"\n                );\n\n                this.setState({\n                    empty_withdraw_value: false\n                });\n            } else {\n                this.setState({\n                    empty_withdraw_value: true\n                });\n            }\n        }\n    }\n\n    onSubmitConfirmation() {\n        ZfApi.publish(this.getWithdrawModalId(), \"close\");\n\n        if (!WithdrawAddresses.has(this.props.output_coin_symbol)) {\n            let withdrawals = [];\n            withdrawals.push(this.state.withdraw_address);\n            WithdrawAddresses.set({\n                wallet: this.props.output_coin_symbol,\n                addresses: withdrawals\n            });\n        } else {\n            let withdrawals = WithdrawAddresses.get(\n                this.props.output_coin_symbol\n            );\n            if (withdrawals.indexOf(this.state.withdraw_address) == -1) {\n                withdrawals.push(this.state.withdraw_address);\n                WithdrawAddresses.set({\n                    wallet: this.props.output_coin_symbol,\n                    addresses: withdrawals\n                });\n            }\n        }\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_coin_symbol,\n            address: this.state.withdraw_address\n        });\n        let asset = this.props.asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = String.prototype.replace.call(\n            this.state.withdraw_amount,\n            /,/g,\n            \"\"\n        );\n\n        const {feeAmount} = this.state;\n\n        AccountActions.transfer(\n            this.props.account.get(\"id\"),\n            this.props.issuer.get(\"id\"),\n            parseInt(amount * precision, 10),\n            asset.get(\"id\"),\n            this._assembleMemo(),\n            null,\n            feeAmount ? feeAmount.asset_id : \"1.3.0\"\n        );\n    }\n\n    onDropDownList() {\n        if (WithdrawAddresses.has(this.props.output_coin_symbol)) {\n            if (this.state.options_is_valid === false) {\n                this.setState({options_is_valid: true});\n                this.setState({withdraw_address_first: false});\n            }\n\n            if (this.state.options_is_valid === true) {\n                this.setState({options_is_valid: false});\n            }\n        }\n    }\n\n    getWithdrawModalId() {\n        return \"confirmation\";\n    }\n\n    onAccountBalance() {\n        const {feeAmount} = this.state;\n        if (\n            Object.keys(this.props.account.get(\"balances\").toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            let total = new Asset({\n                amount: this.props.balance.get(\"balance\"),\n                asset_id: this.props.asset.get(\"id\"),\n                precision: this.props.asset.get(\"precision\")\n            });\n\n            // Subtract the fee if it is using the same asset\n            if (total.asset_id === feeAmount.asset_id) {\n                total.minus(feeAmount);\n            }\n\n            this.setState(\n                {\n                    withdraw_amount: total.getAmount({real: true}),\n                    empty_withdraw_value: false\n                },\n                this._checkBalance\n            );\n        }\n    }\n\n    setNestedRef(ref) {\n        this.nestedRef = ref;\n    }\n\n    onFeeChanged({asset}) {\n        this.setState(\n            {\n                fee_asset_id: asset.get(\"id\")\n            },\n            this._updateFee\n        );\n    }\n\n    _getAvailableAssets(state = this.state) {\n        const {from_account, feeStatus} = state;\n        function hasFeePoolBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        let fee_asset_types = [];\n        if (!(from_account && from_account.get(\"balances\"))) {\n            return {fee_asset_types};\n        }\n        let account_balances = state.from_account.get(\"balances\").toJS();\n        fee_asset_types = Object.keys(account_balances).sort(utils.sortID);\n        for (let key in account_balances) {\n            let asset = ChainStore.getObject(key);\n            let balanceObject = ChainStore.getObject(account_balances[key]);\n            if (balanceObject && balanceObject.get(\"balance\") === 0) {\n                if (fee_asset_types.indexOf(key) !== -1) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n\n            if (asset) {\n                // Remove any assets that do not have valid core exchange rates\n                let priceIsValid = false,\n                    p;\n                try {\n                    p = new Price({\n                        base: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"base\"\n                                ])\n                                .toJS()\n                        ),\n                        quote: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"quote\"\n                                ])\n                                .toJS()\n                        )\n                    });\n                    priceIsValid = p.isValid();\n                } catch (err) {\n                    priceIsValid = false;\n                }\n\n                if (asset.get(\"id\") !== \"1.3.0\" && !priceIsValid) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n        }\n\n        fee_asset_types = fee_asset_types.filter(a => {\n            return hasFeePoolBalance(a) && hasBalance(a);\n        });\n\n        return {fee_asset_types};\n    }\n\n    render() {\n        let {withdraw_address_selected, memo} = this.state;\n        let storedAddress = WithdrawAddresses.get(\n            this.props.output_coin_symbol\n        );\n        let balance = null;\n\n        let account_balances = this.props.account.get(\"balances\").toJS();\n        let asset_types = Object.keys(account_balances);\n\n        let withdrawModalId = this.getWithdrawModalId();\n        let invalid_address_message = null;\n        let options = null;\n        let confirmation = null;\n\n        if (this.state.options_is_valid) {\n            options = (\n                <div\n                    className={\n                        !storedAddress.length\n                            ? \"blocktrades-disabled-options\"\n                            : \"blocktrades-options\"\n                    }\n                >\n                    {storedAddress.map(function(name, index) {\n                        return (\n                            <a\n                                key={index}\n                                onClick={this.onSelectChanged.bind(this, index)}\n                            >\n                                {name}\n                            </a>\n                        );\n                    }, this)}\n                </div>\n            );\n        }\n\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address && this.state.withdraw_address.length)\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                if (this.state.withdraw_address_error_code) {\n                    invalid_address_message = (\n                        <div className=\"has-error\" style={{paddingTop: 10}}>\n                            {this.state.withdraw_address_error_code}:{\" \"}\n                            {this.state.withdraw_address_error_message}\n                        </div>\n                    );\n                } else {\n                    invalid_address_message = (\n                        <div className=\"has-error\" style={{paddingTop: 10}}>\n                            <Translate\n                                content=\"gateway.valid_address\"\n                                coin_type={this.props.output_coin_name}\n                            />\n                        </div>\n                    );\n                }\n\n                confirmation = (\n                    <Modal id={withdrawModalId} overlay={true}>\n                        <Trigger close={withdrawModalId}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <label>\n                            <Translate content=\"modal.confirmation.title\" />\n                        </label>\n                        <br />\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onSubmitConfirmation.bind(this)}\n                                value={counterpart.translate(\n                                    \"modal.confirmation.accept\"\n                                )}\n                            />\n                            <Trigger close={withdrawModalId}>\n                                <a className=\"secondary button\">\n                                    <Translate content=\"modal.confirmation.cancel\" />\n                                </a>\n                            </Trigger>\n                        </div>\n                    </Modal>\n                );\n            }\n        }\n\n        let tabIndex = 1;\n        let withdraw_memo = null;\n\n        if (this.props.output_supports_memos) {\n            withdraw_memo = (\n                <div className=\"content-block\">\n                    <label>\n                        <Translate component=\"span\" content=\"transfer.memo\" />\n                    </label>\n                    <textarea\n                        rows=\"3\"\n                        value={memo}\n                        tabIndex={tabIndex++}\n                        onChange={this.onMemoChanged.bind(this)}\n                    />\n                    {this.state.memo_error ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content=\"transfer.errors.memo_error\" />\n                        </p>\n                    ) : null}\n                    {this.state.memo_length_error ? (\n                        <p\n                            className=\"has-error no-margin\"\n                            style={{paddingTop: 10}}\n                        >\n                            <Translate content=\"transfer.errors.memo_length_error\" />\n                        </p>\n                    ) : null}\n                </div>\n            );\n        }\n\n        // Estimate fee VARIABLES\n        let {fee_asset_types} = this._getAvailableAssets();\n\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.asset.get(\"id\");\n            if (current_asset_id) {\n                let current = account_balances[current_asset_id];\n                balance = (\n                    <span\n                        style={{\n                            borderBottom: \"#A09F9F 1px dotted\",\n                            cursor: \"pointer\"\n                        }}\n                    >\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />&nbsp;:&nbsp;\n                        <span\n                            className=\"set-cursor\"\n                            onClick={this.onAccountBalance.bind(this)}\n                        >\n                            {current ? (\n                                <BalanceComponent\n                                    balance={account_balances[current_asset_id]}\n                                />\n                            ) : (\n                                0\n                            )}\n                        </span>\n                    </span>\n                );\n            } else balance = \"No funds\";\n        } else {\n            balance = \"No funds\";\n        }\n\n        return (\n            <form className=\"grid-block vertical full-width-content\">\n                <div className=\"grid-container\">\n                    <div className=\"content-block\">\n                        <h3>\n                            <Translate\n                                content=\"gateway.withdraw_coin\"\n                                coin={this.props.output_coin_symbol}\n                                symbol={this.props.output_coin_name}\n                            />\n                        </h3>\n                    </div>\n\n                    {/* Withdraw amount */}\n                    <div className=\"content-block\">\n                        <AmountSelector\n                            label=\"modal.withdraw.amount\"\n                            amount={this.state.withdraw_amount}\n                            asset={this.props.asset.get(\"id\")}\n                            assets={[this.props.asset.get(\"id\")]}\n                            placeholder=\"0.0\"\n                            onChange={this.onWithdrawAmountChange.bind(this)}\n                            display_balance={balance}\n                        />\n                        {this.state.empty_withdraw_value ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.valid\" />\n                            </p>\n                        ) : null}\n                        {this.state.balanceError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.insufficient\" />\n                            </p>\n                        ) : null}\n                        {this.state.below_minumum_withdraw_value ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate\n                                    content=\"transfer.errors.minimum_amount\"\n                                    amount={this.props.minWithdrawAmount}\n                                    symbol={this.props.asset.get(\"symbol\")}\n                                />\n                            </p>\n                        ) : null}\n                        {this.state.precision_error ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate\n                                    content=\"transfer.errors.precision\"\n                                    precision={this.props.output_coin_precision}\n                                />\n                            </p>\n                        ) : null}\n                    </div>\n\n                    {/* Fee selection */}\n                    {this.state.feeAmount ? (\n                        <div className=\"content-block gate_fee\">\n                            <AmountSelector\n                                refCallback={this.setNestedRef.bind(this)}\n                                label=\"transfer.fee\"\n                                disabled={true}\n                                amount={this.state.feeAmount.getAmount({\n                                    real: true\n                                })}\n                                onChange={this.onFeeChanged.bind(this)}\n                                asset={this.state.feeAmount.asset_id}\n                                assets={fee_asset_types}\n                                tabIndex={tabIndex++}\n                            />\n                            {!this.state.hasBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noFeeBalance\" />\n                                </p>\n                            ) : null}\n                            {!this.state.hasPoolBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noPoolBalance\" />\n                                </p>\n                            ) : null}\n                        </div>\n                    ) : null}\n\n                    {/* Gate fee */}\n                    {this.props.gateFee ? (\n                        <div\n                            className=\"amount-selector right-selector\"\n                            style={{paddingBottom: 20}}\n                        >\n                            <label className=\"left-label\">\n                                <Translate content=\"gateway.fee\" />\n                            </label>\n                            <div className=\"inline-label input-wrapper\">\n                                <input\n                                    type=\"text\"\n                                    disabled\n                                    value={this.props.gateFee}\n                                />\n\n                                <div className=\"form-label select floating-dropdown\">\n                                    <div className=\"dropdown-wrapper inactive\">\n                                        <div>\n                                            {this.props.output_coin_symbol}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : null}\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">\n                            <Translate\n                                component=\"span\"\n                                content=\"modal.withdraw.address\"\n                            />\n                        </label>\n                        <div className=\"blocktrades-select-dropdown\">\n                            <div className=\"inline-label\">\n                                <input\n                                    type=\"text\"\n                                    value={withdraw_address_selected}\n                                    tabIndex=\"4\"\n                                    onChange={this.onWithdrawAddressChanged.bind(\n                                        this\n                                    )}\n                                    autoComplete=\"off\"\n                                />\n                                <span onClick={this.onDropDownList.bind(this)}>\n                                    &#9660;\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"blocktrades-position-options\">\n                            {options}\n                        </div>\n                        {invalid_address_message}\n                    </div>\n\n                    {/* Memo input */}\n                    {withdraw_memo}\n\n                    {/* Withdraw/Cancel buttons */}\n                    <div className=\"button-group\">\n                        <div\n                            onClick={this.onSubmit.bind(this)}\n                            className={\n                                \"button\" +\n                                (this.state.below_minumum_withdraw_value ||\n                                this.state.memo_error ||\n                                this.state.memo_length_error ||\n                                this.state.error ||\n                                this.state.balanceError ||\n                                this.state.precision_error\n                                    ? \" disabled\"\n                                    : \"\")\n                            }\n                        >\n                            <Translate content=\"modal.withdraw.submit\" />\n                        </div>\n\n                        <Trigger close={this.props.modal_id}>\n                            <div className=\"button\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                    {confirmation}\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default BindToChainState(GdexWithdrawModal);\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport utils from \"common/utils\";\nimport Icon from \"../../Icon/Icon\";\nimport {getTransactionRecordList} from \"../../../lib/common/gdexMethods\";\nimport PropTypes from \"prop-types\";\n\nconst DEPOSIT_STATUS = {\n    1: \"confirming\",\n    2: \"waiting\",\n    3: \"transfering\",\n    4: \"success\",\n    5: \"fail\"\n};\nconst WITHDRAW_STATUS = {\n    1: \"confirming\",\n    2: \"auditing\",\n    3: \"audited\",\n    4: \"refused\",\n    5: \"transfering\",\n    6: \"success\",\n    7: \"fail\"\n};\n\nclass GdexHistory extends React.Component {\n    static propTypes = {\n        compactView: PropTypes.bool,\n        maxHeight: PropTypes.number,\n        fullHeight: PropTypes.bool,\n        userId: PropTypes.number,\n        assetId: PropTypes.number,\n        assetName: PropTypes.string,\n        recordType: PropTypes.number,\n        userAccount: PropTypes.string\n    };\n\n    static defaultProps = {\n        maxHeight: 500,\n        fullHeight: false,\n        pageSize: 10\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            headerHeight: 85,\n            pageNum: 0,\n            totalNum: 0,\n            nextPageEnabled: false,\n            allData: {},\n            historyStatusType:\n                props.recordType == 1\n                    ? \"deposit_history_status\"\n                    : \"withdraw_history_status\",\n            historyStatusValue:\n                props.recordType == 1 ? DEPOSIT_STATUS : WITHDRAW_STATUS\n        };\n    }\n\n    componentWillMount() {\n        this.getTransactionHistory();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            this.props.recordType != nextProps.recordType ||\n            this.props.assetId != nextProps.assetId ||\n            this.props.assetName != nextProps.assetName ||\n            this.props.userId != nextProps.userId ||\n            this.props.userAccount != nextProps.userAccount\n        ) {\n            this._getTransactionHistory(\n                nextProps.userId,\n                nextProps.assetId,\n                nextProps.assetName,\n                nextProps.recordType,\n                nextProps.userAccount,\n                true\n            );\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!utils.are_equal_shallow(this.props.userId, nextProps.userId)) {\n            return true;\n        }\n        if (this.state.allData != nextState.allData) {\n            return true;\n        }\n        if (this.state.pageNum != nextState.pageNum) return true;\n        return false;\n    }\n\n    _getTransactionHistory(\n        userId,\n        assetId,\n        assetName,\n        recordType,\n        userAccount,\n        force = false\n    ) {\n        let pageSize = this.props.pageSize;\n        let {\n            pageNum,\n            allData,\n            historyStatusValue,\n            historyStatusType\n        } = this.state;\n        if (force == true) {\n            pageNum = 1;\n            allData = {};\n            historyStatusType =\n                recordType == 1\n                    ? \"deposit_history_status\"\n                    : \"withdraw_history_status\";\n            historyStatusValue =\n                recordType == 1 ? DEPOSIT_STATUS : WITHDRAW_STATUS;\n        } else {\n            pageNum += 1;\n        }\n\n        var _this = this;\n        getTransactionRecordList(\n            {\n                uid: userId,\n                assetId: assetId,\n                pageNum: pageNum,\n                pageSize: pageSize,\n                userAccount: userAccount\n            },\n            recordType\n        )\n            .then(res => {\n                if (res.records) {\n                    res.records.forEach(item => {\n                        allData[item.txid] = {\n                            txid: item.txid,\n                            amount: item.amount,\n                            time: item.ctime,\n                            unixtime: Date.parse(item.ctime),\n                            status: [\n                                \"gateway\",\n                                historyStatusType,\n                                historyStatusValue[item.status]\n                            ].join(\".\"),\n                            failReason: item.failReason,\n                            assetName: assetName\n                        };\n                    });\n\n                    _this.setState({\n                        totalNum: res.total,\n                        nextPageEnabled: res.total > pageNum * pageSize,\n                        allData: allData,\n                        pageNum: pageNum,\n                        historyStatusType: historyStatusType,\n                        historyStatusValue: historyStatusValue\n                    });\n                }\n            })\n            .catch(() => {\n                _this.setState({\n                    totalNum: 0,\n                    nextPageEnabled: false,\n                    allData: {},\n                    pageNum: 0\n                });\n            });\n    }\n    getTransactionHistory() {\n        let {userId, assetId, assetName, recordType, userAccount} = this.props;\n        this._getTransactionHistory(\n            userId,\n            assetId,\n            assetName,\n            recordType,\n            userAccount,\n            false\n        );\n    }\n\n    render() {\n        let {assetName, compactView, style, maxHeight} = this.props;\n        let {headerHeight, allData} = this.state;\n\n        let history = [];\n        Object.keys(allData).forEach(item => {\n            history.push(allData[item]);\n        });\n        history.sort((a, b) => {\n            return b.unixtime - a.unixtime;\n        });\n        style = style ? style : {};\n        style.width = \"100%\";\n        style.height = \"100%\";\n\n        if (allData.length == 0) {\n        }\n        let display_history = history.length\n            ? history.map(o => {\n                  return (\n                      <tr key={o.txid}>\n                          <td\n                              style={{textAlign: \"left\"}}\n                              className=\"left-td column-hide-tiny\"\n                          >\n                              <Translate content={o.status} />\n                          </td>\n                          <td\n                              style={{\n                                  padding: \"8px 5px\",\n                                  textAlign: \"left\",\n                                  fontSize: 14\n                              }}\n                          >\n                              <Translate\n                                  content=\"gateway.transaction_history_info\"\n                                  amount={o.amount}\n                                  assetName={assetName}\n                                  txid={o.txid}\n                              />\n                          </td>\n                          <td>{o.time}</td>\n                      </tr>\n                  );\n              })\n            : [\n                  <tr key=\"no_recent\">\n                      <td colSpan={compactView ? \"2\" : \"3\"}>\n                          <Translate content=\"operation.no_recent\" />\n                      </td>\n                  </tr>\n              ];\n        display_history.push(\n            <tr className=\"total-value\" key=\"total_value\">\n                <td className=\"column-hide-tiny\" />\n                <td />\n                <td style={{textAlign: \"center\"}}>\n                    &nbsp;{this.state.nextPageEnabled ? (\n                        <a onClick={this.getTransactionHistory.bind(this)}>\n                            <Icon\n                                name=\"chevron-down\"\n                                title=\"icons.chevron_down.transactions\"\n                                className=\"icon-14px\"\n                            />\n                        </a>\n                    ) : null}\n                </td>\n            </tr>\n        );\n\n        return (\n            <div className=\"recent-transactions no-overflow\" style={style}>\n                <div className=\"generic-bordered-box\">\n                    {this.props.dashboard ? null : (\n                        <div ref=\"header\">\n                            <div className=\"block-content-header\">\n                                <span>\n                                    {this.props.title ? (\n                                        this.props.title\n                                    ) : (\n                                        <Translate content=\"account.recent\" />\n                                    )}\n                                </span>\n                            </div>\n                        </div>\n                    )}\n\n                    <div\n                        className=\"box-content grid-block no-margin\"\n                        style={\n                            !this.props.fullHeight\n                                ? {\n                                      maxHeight: maxHeight - headerHeight\n                                  }\n                                : null\n                        }\n                        ref=\"transactions\"\n                    >\n                        <table\n                            className={\n                                \"table\" +\n                                (compactView ? \" compact\" : \"\") +\n                                (this.props.dashboard ? \" dashboard-table\" : \"\")\n                            }\n                        >\n                            <thead>\n                                <tr key=\"history_header\">\n                                    <th>\n                                        <Translate content=\"gateway.status\" />\n                                    </th>\n                                    <th>\n                                        <Translate content=\"gateway.info\" />\n                                    </th>\n                                    <th>\n                                        <Translate content=\"gateway.time\" />\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>{display_history}</tbody>\n                        </table>\n                        {/*<buton name=\"下一页\"  />*/}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GdexHistory;\n","import React from \"react\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"../../../stores/SettingsStore\";\nimport Ps from \"perfect-scrollbar\";\nimport PropTypes from \"prop-types\";\n\nclass GdexAgreementModal extends React.Component {\n    static propTypes = {\n        locale: PropTypes.string\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            locale: props.settings.get(\"locale\", \"en\")\n        };\n    }\n\n    componentDidMount() {\n        // console.log(this.refs);\n        if (this.refs.agreement) {\n            let item = this.refs.agreement;\n            // console.log(item);\n            Ps.initialize(item);\n        }\n    }\n\n    componentDidUpdate() {\n        // console.log(this.refs);\n        if (this.refs.agreement) {\n            let item = this.refs.agreement;\n            // console.log(item);\n            Ps.update(item);\n        }\n    }\n\n    _getAgreement(locale) {\n        switch (locale) {\n            case \"zh\":\n            case \"cn\":\n                return (\n                    <div\n                        className=\"container\"\n                        ref=\"agreement\"\n                        style={{\n                            height: \"500px\",\n                            overflow: \"auto\",\n                            position: \"relative\"\n                        }}\n                    >\n                        <h2 style={{textAlign: \"center\"}}>用户服务协议</h2>\n                        <p>\n                            OBSIDIAN TECHNOLOGY CO. PTE. LTD.\n                            是一家根据新加坡共和国法律成立的公司，GDEX是由该公司运营的比特股网关(以下称“GDEX”或“本网关”)，主访问入口为https://www.gdex.io，GDEX是一个在比特股平台为用户提供数字资产充提服务（以下称“该服务”或“服务”）的平台。为了本协议表述之方便，公司和该网关在本协议中合称使用“我们”或其他第一人称称呼。使用该服务的自然人或其他主体均为本网关的用户，本协议为表述之便利，以下使用“您”或其他第二人称。我们和您在本协议中合称为“双方”，我们或您单称为“一方”。\n                        </p>\n                        <p>重要提示：</p>\n                        <p>我们在此特别提醒您：</p>\n                        <p>\n                            {\" \"}\n                            1. 数字资产本身不由任何金融机构或公司或本网关发行；\n                        </p>\n                        <p>\n                            {\" \"}\n                            2.\n                            数字资产市场是全新的、未经确认的，而且可能不会增长；\n                        </p>\n                        <p>\n                            {\" \"}\n                            3.\n                            数字资产主要由投机者大量使用，零售和商业市场使用相对较少，数字资产交易存在极高风险，其全天不间断交易，没有涨跌限制，价格容易受庄家、全球政府政策的影响而大幅波动；\n                        </p>\n                        <p>\n                            {\" \"}\n                            4.\n                            因各国法律、法规和规范性文件的制定或者修改，数字资产交易随时可能被暂停或被禁止。\n                        </p>\n                        <p>\n                            数字资产交易有极高风险，并不适合绝大部分人士。您了解和理解此投资有可能导致部分损失或全部损失，所以您应该以能承受的损失程度来决定投资的金额。您了解和理解数字资产会产生衍生风险，所以如有任何疑问，建议先寻求理财顾问的协助。此外，除了上述提及过的风险以外，还会有未能预测的风险存在。您应慎重考虑并用清晰的判断能力去评估自己的财政状况及上述各项风险而作出任何买卖数字资产的决定，并承担由此产生的全部损失，我们对此不承担任何责任。\n                        </p>\n                        <p>敬告您：</p>\n                        <p>\n                            1.您了解比特股是基于区块链的去中心化交易平台，其基础账号服务和交易撮合服务都由比特股平台提供。亦有其它机构或个人在比特股平台上发行资产及／或提供服务。您了解本网关仅作为您向比特股平台充提数字资产的工具。本网关只对自身发行的交易代币资产（名称以GDEX.为前缀）负责，不对比特股上其它机构或个人发行的资产负责，本网关不参与您的任何交易，您应自行谨慎判断确定相关数字资产及/或信息的真实性、合法性和有效性，并自行承担因此产生的责任与损失。\n                        </p>\n                        <p>\n                            {\" \"}\n                            2.\n                            比特股去中心化交易系统存有风险，包括但不限于软件，硬件和互联网链结的失败，用户账户系统的安全风险等。由于我们不能控制互联网以及比特股平台的可靠性和可用性，我们不会对上述风险造成的用户损失承担任何责任。\n                        </p>\n                        <p>\n                            {\" \"}\n                            3.\n                            禁止使用本网关从事洗钱、走私、商业贿赂等一切非法交易活动，若发现此类事件，本网关将采取各种可使用之手段，包括但不限于中止提供服务，通知相关权力机关等，我们不承担由此产生的所有责任并保留向相关人士追究责任的权利。\n                        </p>\n                        <p>一、总则</p>\n                        <p>\n                            {\" \"}\n                            1.1\n                            您在使用本网关提供的服务之前，应仔细阅读本协议，如有不理解之处或其他必要，请咨询专业律师。如您不同意本协议及/或随时对其的修改，请您立即停止使用本网关提供的服务。使用本网关的任何服务即表示您已了解并完全同意本协议各项内容，包括本网关对本协议随时所做的任何修改。\n                        </p>\n                        <p>\n                            {\" \"}\n                            1.2\n                            使用本网关提供的服务和功能，您将被视为已阅读，理解并：\n                        </p>\n                        <p> 1.2.1 接受本协议所有条款及条件的约束。</p>\n                        <p>\n                            {\" \"}\n                            1.2.2\n                            您确认您已年满21周岁或根据不同的可适用的法律规定的具有可订立合同的法定年龄，并有充分的能力接受这些条款，并订立交易，使用本网关进行数字资产交易。\n                        </p>\n                        <p>\n                            {\" \"}\n                            1.2.3\n                            您保证交易中涉及到的属于您的数字资产均为合法取得并所有。\n                        </p>\n                        <p>\n                            {\" \"}\n                            1.2.4\n                            您同意您为您自身的交易或非交易行为承担全部责任和任何收益或亏损。\n                        </p>\n                        <p>\n                            {\" \"}\n                            1.2.5\n                            您同意遵守任何有关法律的规定，就税务目的而言，包括报告任何交易利润。\n                        </p>\n                        <p>\n                            {\" \"}\n                            1.2.6\n                            本协议只是就您与我们之间达成的权利义务关系进行约束，而并不涉及本网关用户之间或其他网关和您之间因数字资产交易而产生的法律关系及法律纠纷。\n                        </p>\n                        <p>二、协议修订</p>\n                        <p>\n                            我们保留不时修订本协议、并以公示的方式进行公告、不再单独通知您的权利，变更后的协议会在本协议首页标注变更时间，一经在公布，立即自动生效。您应不时浏览及关注本协议的更新变更时间及更新内容，如您不同意相关变更，应当立即停止使用本网关服务；您继续使用本网关服务，即表示您接受并同意经修订的协议的约束。\n                        </p>\n                        <p>三、服务</p>\n                        <p>\n                            本网关只为您提供向比特股平台冲入和提取数字资产的服务，本网关并不作为买家或卖家参与买卖数字资产行为本身；本网关不提供任何国家法定货币充入和提取的相关服务。\n                        </p>\n                        <p> 3.1 服务内容</p>\n                        <p>\n                            {\" \"}\n                            3.1.1\n                            您有权通过本网关向比特股平台冲入或提取数字资产。\n                        </p>\n                        <p> 3.1.2 本网关承诺为您提供的其他服务。</p>\n                        <p> 3.2.服务规则</p>\n                        <p> 您承诺遵守下列本网关服务规则：</p>\n                        <p>\n                            {\" \"}\n                            3.2.1\n                            您应当遵守法律法规、规章、及政策要求的规定，保证账户中所有数字资产来源的合法性，不得在本网关或利用本网关服务从事非法或其他损害本网关或第三方权益的活动，如发送或接收任何违法、违规、侵犯他人权益的信息，发送或接收传销材料或存在其他危害的信息或言论，未经本网关授权使用或伪造本网关电子邮件题头信息等。\n                        </p>\n                        <p>\n                            {\" \"}\n                            3.2.2\n                            您在使用本网关服务之前应充分了解比特股账号的使用常识，做好相应账号的备份及密码保存工作，对于比特股账户安全问题造成的损失，本网关不承担任何责任。\n                        </p>\n                        <p>\n                            {\" \"}\n                            3.2.3\n                            您在使用本网关提供的服务过程中，所产生的应纳税赋，以及一切硬件、软件、服务及其它方面的费用，均由您独自承担。\n                        </p>\n                        <p>\n                            {\" \"}\n                            3.2.4\n                            您应当遵守本网关不时发布和更新的本协议以及其他服务条款和操作规则，有权随时终止使用本网关提供的服务。\n                        </p>\n                        <p>四、本网关的权利和义务</p>\n                        <p>\n                            4.1\n                            本网关有权在发现本网关上显示的任何信息存在明显错误时，对信息予以更正。\n                        </p>\n                        <p>\n                            4.2\n                            本网关保留随时修改、中止或终止本网关服务的权利，本网关行使修改或中止服务的权利不需事先告知您；本网关终止本网关一项或多项服务的，终止自本网关在网关上发布终止公告之日生效。\n                        </p>\n                        <p>\n                            {\" \"}\n                            4.3\n                            本网关应当采取必要的技术手段和管理措施保障本网关的正常运行。\n                        </p>\n                        <p>五、赔偿</p>\n                        <p>\n                            {\" \"}\n                            5.1\n                            在任何情况下，我们对您的直接损害的赔偿责任均不会超过您从使用本网关服务产生的为期三（\n                            3）个月的总费用。\n                        </p>\n                        <p>六、寻求禁令救济的权利</p>\n                        <p>\n                            我们和您均承认普通法对违约或可能违约情况的救济措施是可能是不足以弥补我们遭受的全部损失的，故非违约方有权在违约或可能违约情况下寻求禁令救济以及普通法或衡平法允许的其他所有的补救措施。\n                        </p>\n                        <p>七、责任限制与免责</p>\n                        <p>\n                            {\" \"}\n                            7.1\n                            您了解并同意，在任何情况下，我们不就以下各事项承担责任：\n                        </p>\n                        <p> 7.1.1 收入的损失；</p>\n                        <p> 7.1.2 交易利润或合同损失；</p>\n                        <p> 7.1.3 业务中断</p>\n                        <p> 7.1.4 预期可节省的货币的损失；</p>\n                        <p> 7.1.5 信息的损失；</p>\n                        <p> 7.1.6 机会、商誉或声誉的损失；</p>\n                        <p> 7.1.7 数据的损坏或损失；</p>\n                        <p> 7.1.8 购买替代产品或服务的成本；</p>\n                        <p>\n                            {\" \"}\n                            7.1.9\n                            任何由于侵权（包括过失）、违约或其他任何原因产生的间接的、特殊的或附带性的损失或损害，不论这种损失或损害是否可以为我们合理预见；不论我们是否事先被告知存在此种损\n                            失或损害的可能性。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.2\n                            您了解并同意，我们不对因下述任一情况而导致您的任何损害赔偿承担责任：\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.2.1\n                            我们有合理的理由认为您的具体交易事项可能存在重大违法或违约情形。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.2.2\n                            我们有合理的理由认为您在本网关的行为涉嫌违法或不当。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.2.3\n                            通过本网关服务购买或获取任何数据、信息或进行交易等行为或替代行为产生的费用及损失。\n                        </p>\n                        <p> 7.2.4 您对本网关服务的误解。</p>\n                        <p>\n                            {\" \"}\n                            7.2.5\n                            任何非因我们的原因而引起的与本网关提供的服务有关的其它损失。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.3\n                            我们对由于信息网络设备维护、信息网络连接故障、电脑、通讯或其他系统的故障、电力故障、天气原因、意外事故、罢工、劳动争议、暴乱、起义、骚乱、生产力或生产资料不足、火灾、洪水、风暴、爆炸、战争、银行或其他合作方原因、数字资产市场崩溃、政府行为、\n                            司法或行政机关的命令、其他不在我们可控范围内或我们无能力控制的行为或第三方的原因而造成的不能服务或延迟服务，以及造成的您的损失，我们不承担任何责任。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.4\n                            我们不能保证本网关包含的全部信息、程序、文本等完全安全，不受任何病毒、木马等恶意程序的干扰和破坏，故您登陆、使用本网关任何服务或下载及使用该下载的任何程序、信息、数据等均是您个人的决定并自行承担风险及可能产生的损失。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.5\n                            我们对本网关中链接的任何第三方网关的任何信息、产品及业务及其他任何形式的不属于我们的主体的内容等不做任何保证和承诺，您如果使用第三方网关提供的任何服务、信息及产品等均为您个人决定且承担由此产生的一切责任。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.6\n                            我们对于您使用本网关服务不做任何明示或暗示的保证，包括但不限于本网关提供服务的适用性、没有错误或疏漏、持续性、准确性、可靠性、适用于某一特定用途。同时，我们也不对本网关提供的服务所涉及的技术及信息的有效性、准确性、正确性、可靠性、质量、稳定、完整和及时性作出任何承诺和保证。是否登陆或使用本网关提供的服务是您个人的决定且自行承担风险及可能产生的损失。我们对于数字资产的市场、价值及价格等不做任何明示或暗示的保证，您理解并了解数字资产市场是不稳定的，价格和价值随时会大幅波动或崩盘，交易数字资产是您个人的自由选择及决定且自行承担风险及可能产生的损失。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.7\n                            本协议中规定的我们的保证和承诺是由我们就本协议和本网关提供的服务的唯一保证和陈述，并取代任何其他途径和方式产生的保证和承诺，无论是书面的或口头的，明示的或暗示的。所有这些保证和陈述仅仅代表我们自身的承诺和保证，并不保证任何第三方遵守本协议中的保证和承诺。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.8\n                            我们并不放弃本协议中未提及的在法律适用的最大范围内我们享有的限制、免除或抵销我们损害赔偿责任的任何权利。\n                        </p>\n                        <p>\n                            {\" \"}\n                            7.9\n                            使用本网关服务即表示认可我们按照本协议中规定的规则进行的任何操作，产生的任何风险均由您承担。\n                        </p>\n                        <p>八、知识产权</p>\n                        <p>\n                            {\" \"}\n                            8.1\n                            本网关所包含的全部智力成果包括但不限于网关标志、数据库、网关设计、文字和图表、软件、照片、录像、音乐、声音及其前述组合，软件编译、相关源代码和软件\n                            (包括小应用程序和脚本)\n                            的知识产权权利均归本网关所有。您不得为商业目的复制、更改、拷贝、发送或使用前述任何材料或内容。\n                        </p>\n                        <p>\n                            {\" \"}\n                            8.2 本网关名称中包含的所有权利\n                            (包括但不限于商誉和商标、标志) 均归公司所有。\n                        </p>\n                        <p>\n                            {\" \"}\n                            8.3\n                            您接受本协议即视为您主动将其在本网关发表的任何形式的信息的著作权，\n                            包括但不限于：复制权、发行权、出租权、展览权、表演权、放映权、广播权、信息网络传播权、摄制权、改编权、翻译权、汇编权\n                            以及应当由著作权人享有的其他可转让权利无偿独家转让给本网关所有，本网关有权利就任何主体侵权单独提起诉讼并获得全部赔偿。\n                            本协议效力及于您在本网关发布的任何受著作权法保护的作品内容，\n                            无论该内容形成于本协议签订前还是本协议签订后。\n                        </p>\n                        <p>\n                            {\" \"}\n                            8.4\n                            您在使用本网关服务过程中不得非法使用或处分本网关或他人的知识产权权利。您不得将已发表于本网关的信息以任何形式发布或授权其它网关（及媒体）使用。\n                        </p>\n                        <p>\n                            {\" \"}\n                            8.5\n                            您使用本网关提供的任何服务均不视为我们向您转让任何知识产权。\n                        </p>\n                        <p>九、可分割性</p>\n                        <p>\n                            如本协议中的任何条款被任何有管辖权的法院认定为不可执行的，无效的或非法的，并不影响本协议的其余条款的效力。\n                        </p>\n                        <p>十、非代理关系</p>\n                        <p>\n                            本协议中的任何规定均不可被认为创造了、暗示了或以其他方式将我们视为您的代理人、受托人或其他代表人，本协议有其他规定的除外。\n                        </p>\n                        <p>十一、弃权</p>\n                        <p>\n                            我们或您任何一方对追究本协议约定的违约责任或其他责任的弃权并不能认定或解释为对其他违约责任的弃权；未行使任何权利或救济不得以任何方式被解释为对该等权利或救济的放弃。\n                        </p>\n                        <p>十二、标题</p>\n                        <p>\n                            所有标题仅供协议表述方便，并不用于扩大或限制该协议条款的内容或范围。\n                        </p>\n                        <p>十三、适用法律</p>\n                        <p>\n                            本协议全部内容均为根据新加坡共和国法律订立的合同，其成立、解释、内容及执行均适用新加坡共和国相关法律规定；任何因或与本协议约定的服务有关而产生的索赔或诉讼，都应依照新加坡共和国的法律进行管辖并加以解释和执行。为避免疑义，这一条款明确适用于任何针对我们的侵权索赔。任何针对我们或者是和我们有关的索赔或诉讼的管辖法院或诉讼地均在新加坡共和国。您无条件地获得在新加坡共和国法院进行诉讼和上诉的排他性的管辖权。您也无条件地同意与本协议款有关的争议或问题或产生的任何索赔请求和诉讼的发生地或法院均排他性得在新加坡共和国。不方便法院的原则不适用于根据本服务条款的选择的法院。\n                        </p>\n                        <p>十四、协议的生效和解释</p>\n                        <p>\n                            14.1\n                            本协议于您点击本网关注册页面的同意注册并完成注册程序、获得本网关账号和密码时生效，对本网关和您均具有约束力。\n                        </p>\n                        <p>14.2 本协议的最终解释权归本网关所有。</p>\n                    </div>\n                );\n                break;\n            default:\n                return (\n                    <div\n                        className=\"container\"\n                        ref=\"agreement\"\n                        style={{\n                            height: \"500px\",\n                            overflow: \"auto\",\n                            position: \"relative\"\n                        }}\n                    >\n                        <h2 style={{textAlign: \"center\"}}>Service Agreement</h2>\n                        <p>\n                            OBSIDIAN TECHNOLOGY CO. PTE. LTD. (hereinafter\n                            referred to as the 'Company') is a company\n                            incorporated under the laws in Singapore Republic,\n                            GDEX (hereinafter referred to as 'GDEX' or 'the\n                            Gateway') is a cryptocurrency gateway to Bitshares\n                            which is operated by the company. The main access\n                            point for GDEX is https://gdex.io, GDEX is a gateway\n                            that provide cryptocurrency deposit and withdraw\n                            service (hereinafter referred to as 'the Service')\n                            to/from Bitshares. For the convenience of wording in\n                            this Agreement, the Company and the Gateway are\n                            referred to as 'We' or other applicable forms of\n                            first person pronouns in this Agreement. All natural\n                            persons or other subjects who use the Service shall\n                            be users of the Gateway. For the convenience of\n                            wording in this Agreement, the users are referred to\n                            as 'You' or any other applicable forms of the\n                            second-person pronouns. For the convenience of\n                            wording in this Agreement, you and us are\n                            collectively referred to as 'both parties', and\n                            individually as 'one party'.\n                        </p>\n                        <p>Important reminder:</p>\n                        <p>We hereby remind you that:</p>\n                        <p>\n                            1. The digital assets themselves are not offered by\n                            any financial institution, corporation or the\n                            Gateway;\n                        </p>\n                        <p>\n                            2. The digital asset market is new and unconfirmed,\n                            and will not necessarily expand;\n                        </p>\n                        <p>\n                            3. Digital assets are primarily used by speculators,\n                            and are used relatively less on retail and\n                            commercial markets; digital asset transactions are\n                            highly risky, due to the fact that they are traded\n                            throughout 24-hour a day without limits on the rise\n                            or fall in price, and market makers and global\n                            government policies may cause major fluctuations in\n                            their prices;\n                        </p>\n                        <p>\n                            4. Digital asset transactions may be suspended or\n                            prohibited at any time due to the enactment or\n                            modification of national laws, regulations and\n                            regulatory documents. Digital assets trading is\n                            highly risky and therefore not suitable for the vast\n                            majority of people. You acknowledge and understand\n                            that investment in digital assets may result in\n                            partial or total loss of your investment and\n                            therefore you are advised to decide the amount of\n                            your investment on the basis of your loss-bearing\n                            capacity. You acknowledge and understand that\n                            digital assets may generate derivative risks.\n                            Therefore, if you have any doubt, you are advised to\n                            seek assistance from a financial adviser first.\n                            Furthermore, aside from the above-mentioned risks,\n                            there may also be unpredictable risks. Therefore,\n                            you are advised to carefully consider and use clear\n                            judgment to assess your financial position and the\n                            abovementioned risks before making any decisions on\n                            buying and selling digital assets; any and all\n                            losses arising therefrom will be borne by you and we\n                            shall not be held liable in any manner whatsoever.\n                        </p>\n                        <p>\n                            5. You understand that Bitshares is a decentralized\n                            exchange based on blockchain, the basic account\n                            service and the trade processing service are\n                            provided by Bitshares, there are also other\n                            institutions or single persons that issue assets\n                            and/or provide service on Bitshares. You understand\n                            that the Gateway is only used for you to\n                            deposit/withdraw cryptocurrency to/from Bitshares.\n                            The Gateway only undertake the due obligations for\n                            the availability of own issued assets (with 'GDEX.'\n                            as prefix of the name), do not undertake the due\n                            obligations for the account service and the trade\n                            processing service provided by Bitshares, do not\n                            undertake the due obligations for availability of\n                            the assets issued by other institutions or single\n                            persons.{\" \"}\n                        </p>\n                        <p>\n                            6. There are risk in both Internet and Bitshares,\n                            include but not limit to failure for software,\n                            hardware to connect to Internet, security risk for\n                            Bitshares accounting system. As the availability and\n                            reliability of Internet and Bitshares are not under\n                            our control, we do not undertake obligations for the\n                            loss caused by the risks mentioned above.\n                        </p>\n                        <p>\n                            7.it is prohibited to use the Gateway for money\n                            laundering, smuggling, bribery，if any user are\n                            found relevant to these actions, the Gateway will\n                            take various actions, include but not limited to\n                            terminating the Service to the user, informing\n                            relevant authority.\n                        </p>\n                    </div>\n                );\n        }\n    }\n    render() {\n        let {locale} = this.props;\n        let msg = this._getAgreement(locale);\n        return msg;\n    }\n}\n\nexport default connect(GdexAgreementModal, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            settings: SettingsStore.getState().settings\n        };\n    }\n});\n","/* (ignored) */","/* (ignored) */","import React from \"react\";\nimport {\n    fetchCoins,\n    fetchTradingPairs,\n    getActiveWallets\n} from \"common/gatewayMethods\";\nimport Translate from \"react-translate-component\";\nimport {connect} from \"alt-react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport WinexRecentTransactions from \"components/DepositWithdraw/winex/WinexRecentTransactions\";\n\nimport WinexGatewayRequest from \"components/DepositWithdraw/winex/WinexGatewayRequest\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport {widechainAPIs} from \"api/apiConfig\";\n\nclass WinexGateway extends React.Component {\n    constructor(props) {\n        super();\n\n        const action = props.viewSettings.get(\n            `${props.provider}Action`,\n            \"deposit\"\n        );\n        this.state = {\n            coins: [],\n            activeCoin: this._getActiveCoin(props, {action}),\n            action\n        };\n    }\n\n    _getActiveCoin(props, state) {\n        let cachedCoin = props.viewSettings.get(\n            `activeCoin_Winex_${state.action}`,\n            null\n        );\n        let firstTimeCoin = null;\n        if (state.action == \"deposit\") {\n            firstTimeCoin = \"HSR\";\n        }\n        if (state.action == \"withdraw\") {\n            firstTimeCoin = \"WIN.HSR\";\n        }\n        let activeCoin = cachedCoin ? cachedCoin : firstTimeCoin;\n        return activeCoin;\n    }\n\n    componentWillMount() {\n        this._getCoins();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.provider !== this.props.provider ||\n            nextProps.action !== this.props.action\n        ) {\n            this.setState({\n                activeCoin: this._getActiveCoin(nextProps, this.state.action)\n            });\n        }\n    }\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     if (nextState.action !== this.state.action) {\n    //         this.setState({\n    //             activeCoin: this._getActiveCoin(nextProps, nextState)\n    //         });\n    //     }\n\n    //     return true;\n    // }\n\n    onSelectCoin(e) {\n        this.setState({\n            activeCoin: e.target.value\n        });\n\n        let setting = {};\n        setting[`activeCoin_${this.props.provider}_${this.state.action}`] =\n            e.target.value;\n        SettingsActions.changeViewSetting(setting);\n    }\n\n    changeAction(type) {\n        let activeCoin = this._getActiveCoin(this.props, {action: type});\n\n        this.setState({\n            action: type,\n            activeCoin: activeCoin\n        });\n\n        SettingsActions.changeViewSetting({\n            [`${this.props.provider}Action`]: type\n        });\n    }\n\n    _getCoins() {\n        Promise.all([\n            fetchCoins(widechainAPIs.BASE + widechainAPIs.COINS_LIST),\n            fetchTradingPairs(widechainAPIs.BASE + widechainAPIs.TRADING_PAIRS),\n            getActiveWallets(widechainAPIs.BASE + widechainAPIs.ACTIVE_WALLETS)\n        ]).then(result => {\n            let [coins, tradingPairs, wallets] = result;\n            let backedCoins = this._getBackedCoins({\n                allCoins: coins,\n                tradingPairs: tradingPairs\n            }).filter(a => !!a.walletType);\n            backedCoins.forEach(a => {\n                a.isAvailable = wallets.indexOf(a.walletType) !== -1;\n            });\n            this.setState({coins: backedCoins});\n        });\n    }\n\n    _getBackedCoins({allCoins, tradingPairs}) {\n        let coins_by_type = {};\n        allCoins.forEach(\n            coin_type => (coins_by_type[coin_type.coinType] = coin_type)\n        );\n\n        let allowed_outputs_by_input = {};\n        tradingPairs.forEach(pair => {\n            if (!allowed_outputs_by_input[pair.inputCoinType])\n                allowed_outputs_by_input[pair.inputCoinType] = {};\n            allowed_outputs_by_input[pair.inputCoinType][\n                pair.outputCoinType\n            ] = true;\n        });\n        let blocktradesBackedCoins = [];\n        allCoins.forEach(coin_type => {\n            if (\n                coin_type.backingCoinType &&\n                coins_by_type[coin_type.backingCoinType]\n            ) {\n                let isDepositAllowed =\n                    allowed_outputs_by_input[coin_type.backingCoinType] &&\n                    allowed_outputs_by_input[coin_type.backingCoinType][\n                        coin_type.coinType\n                    ];\n                let isWithdrawalAllowed =\n                    allowed_outputs_by_input[coin_type.coinType] &&\n                    allowed_outputs_by_input[coin_type.coinType][\n                        coin_type.backingCoinType\n                    ];\n                blocktradesBackedCoins.push({\n                    name: coins_by_type[coin_type.backingCoinType].name,\n                    intermediateAccount:\n                        coins_by_type[coin_type.backingCoinType]\n                            .intermediateAccount,\n                    gateFee: coins_by_type[coin_type.backingCoinType].gateFee,\n                    walletType:\n                        coins_by_type[coin_type.backingCoinType].walletType,\n                    backingCoinType:\n                        coins_by_type[coin_type.backingCoinType].walletSymbol,\n                    symbol: coin_type.walletSymbol,\n                    supportsMemos:\n                        coins_by_type[coin_type.backingCoinType]\n                            .supportsOutputMemos,\n                    depositAllowed: isDepositAllowed,\n                    withdrawalAllowed: isWithdrawalAllowed,\n                    minWithdrawAmount:\n                        coins_by_type[coin_type.backingCoinType].minAmount,\n                    maxWithdrawAmount:\n                        coins_by_type[coin_type.backingCoinType].maxAmount,\n                    feeType:\n                        coins_by_type[coin_type.backingCoinType].gateFeeType\n                });\n            }\n        });\n        return blocktradesBackedCoins;\n    }\n\n    render() {\n        let {account, provider} = this.props;\n        let {activeCoin, action, coins} = this.state;\n        if (!coins.length) {\n            return <LoadingIndicator />;\n        }\n\n        let filteredCoins = coins.filter(a => {\n            if (!a || !a.symbol) {\n                return false;\n            } else {\n                return action === \"deposit\"\n                    ? a.depositAllowed\n                    : a.withdrawalAllowed;\n            }\n        });\n\n        let coinOptions = filteredCoins\n            .map(coin => {\n                let option =\n                    action === \"deposit\"\n                        ? coin.backingCoinType.toUpperCase()\n                        : coin.symbol;\n                return (\n                    <option value={option} key={coin.symbol}>\n                        {option}\n                    </option>\n                );\n            })\n            .filter(a => {\n                return a !== null;\n            });\n\n        let coin = filteredCoins.filter(coin => {\n            return action === \"deposit\"\n                ? coin.backingCoinType.toUpperCase() === activeCoin\n                : coin.symbol === activeCoin;\n        })[0];\n\n        if (!coin) coin = filteredCoins[0];\n        return (\n            <div style={this.props.style}>\n                <div className=\"grid-block no-margin vertical medium-horizontal no-padding\">\n                    <div className=\"medium-4\">\n                        <div>\n                            <label\n                                style={{minHeight: \"2rem\"}}\n                                className=\"left-label\"\n                            >\n                                <Translate\n                                    content={\"gateway.choose_\" + action}\n                                />:{\" \"}\n                            </label>\n                            <select\n                                className=\"external-coin-types bts-select\"\n                                onChange={this.onSelectCoin.bind(this)}\n                                value={activeCoin}\n                            >\n                                {coinOptions}\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"medium-6 medium-offset-1\">\n                        <label\n                            style={{minHeight: \"2rem\"}}\n                            className=\"left-label\"\n                        >\n                            <Translate content=\"gateway.gateway_text\" />:\n                        </label>\n                        <div style={{paddingBottom: 15}}>\n                            <ul className=\"button-group segmented no-margin\">\n                                <li\n                                    className={\n                                        this.state.action === \"deposit\"\n                                            ? \"is-active\"\n                                            : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"deposit\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.deposit\" />\n                                    </a>\n                                </li>\n                                <li\n                                    className={\n                                        this.state.action === \"withdraw\"\n                                            ? \"is-active\"\n                                            : \"\"\n                                    }\n                                >\n                                    <a\n                                        onClick={this.changeAction.bind(\n                                            this,\n                                            \"withdraw\"\n                                        )}\n                                    >\n                                        <Translate content=\"gateway.withdraw\" />\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                {!coin ? null : (\n                    <div>\n                        <div style={{marginBottom: 15}}>\n                            <WinexGatewayRequest\n                                key={`${provider}.${coin.symbol}`}\n                                gateway={provider}\n                                issuer_account={coin.intermediateAccount}\n                                account={account}\n                                deposit_asset={coin.backingCoinType.toUpperCase()}\n                                deposit_asset_name={coin.name}\n                                deposit_coin_type={coin.backingCoinType.toLowerCase()}\n                                deposit_account={coin.depositAccount}\n                                deposit_wallet_type={coin.walletType}\n                                gateFee={coin.gateFee}\n                                receive_asset={coin.symbol}\n                                receive_coin_type={coin.symbol.toLowerCase()}\n                                supports_output_memos={coin.supportsMemos}\n                                isAvailable={coin.isAvailable}\n                                min_withdraw_amount={coin.minWithdrawAmount}\n                                max_withdraw_amount={coin.maxWithdrawAmount}\n                                fee_type={coin.feeType}\n                                action={this.state.action}\n                            />\n                        </div>\n\n                        <WinexRecentTransactions\n                            account={account.get(\"name\")}\n                            action={this.state.action}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default connect(WinexGateway, {\n    listenTo() {\n        return [SettingsStore];\n    },\n    getProps() {\n        return {\n            viewSettings: SettingsStore.getState().viewSettings\n        };\n    }\n});\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport {widechainAPIs} from \"api/apiConfig\";\nimport PropTypes from \"prop-types\";\n\nclass WinexRecentTransactions extends React.Component {\n    static propTypes = {\n        account: PropTypes.string,\n        action: PropTypes.string\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            trans_history: []\n        };\n    }\n\n    _history(account, action) {\n        let url = \"\";\n        if (action === \"deposit\") {\n            url =\n                widechainAPIs.BASE +\n                widechainAPIs.DEPOSIT_HISTORY +\n                \"?account=\" +\n                account;\n        } else {\n            url =\n                widechainAPIs.BASE +\n                widechainAPIs.WITHDRAW_HISTORY +\n                \"?account=\" +\n                account;\n        }\n\n        var head = {\n            method: \"GET\",\n            headers: new Headers({Accept: \"application/json\"}),\n            mode: \"cors\",\n            cache: \"default\"\n        };\n\n        fetch(url, head)\n            .then(function(res) {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    {\n                        this.LogError(res);\n                    }\n                }\n            })\n            .then(function(json) {\n                return json;\n            })\n            .then(function(datas) {\n                return datas;\n            })\n            .then(e => {\n                this.setState({\n                    trans_history: e\n                });\n            });\n    }\n\n    componentWillMount() {\n        let {account, action} = this.props;\n        this._history(account, action);\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.action !== this.props.action) {\n            this._history(nextProps.account, nextProps.action);\n            return true;\n        }\n        return false;\n    }\n\n    LogError(res) {\n        console.error(\"服务器繁忙,请稍后重试; \\r\\nCode:\" + res.status);\n    }\n\n    render() {\n        let {trans_history} = this.state;\n\n        let account_record = [];\n        trans_history.forEach((record, i) => {\n            account_record.push(\n                <tr key={i}>\n                    <td>\n                        <div className=\"blocktrades-bridge\">\n                            <div className=\"inline-block\">\n                                <div>{record.status}</div>\n                            </div>\n                        </div>\n                    </td>\n                    <td>\n                        <div>{record.amount + record.inputCoinType}</div>\n                    </td>\n                    <td>\n                        <div>\n                            <a\n                                href={\n                                    \"https://www.cryptofresh.com/tx/\" +\n                                    record.txid\n                                }\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {record.txid}\n                            </a>\n                        </div>\n                    </td>\n                    <td>{record.createDate}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div>\n                <div className=\"block-content-header\">\n                    <span>\n                        {this.props.action ? (\n                            <Translate\n                                content={\"gateway.recent_\" + this.props.action}\n                            />\n                        ) : (\n                            <Translate content=\"account.recent\" />\n                        )}\n                    </span>\n                </div>\n\n                <table className=\"table\">\n                    <thead>\n                        {account_record.length <= 0 ? (\n                            <tr key=\"no_recent\">\n                                <td colSpan=\"2\">\n                                    <Translate content=\"operation.no_recent\" />\n                                </td>\n                            </tr>\n                        ) : null}\n                        <tr>\n                            {/*<th>Translate content=\"gateway.deposit\" /></th>*/}\n                            <th>状态</th>\n                            <th>\n                                {this.props.action === \"deposit\"\n                                    ? \"充值数量\"\n                                    : \"提现数量\"}\n                            </th>\n                            <th>流水号</th>\n                            <th>创建时间</th>\n                        </tr>\n                    </thead>\n                    <tbody>{account_record}</tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default BindToChainState(WinexRecentTransactions);\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport {ChainStore} from \"bitsharesjs\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport WinexWithdrawModal from \"components/DepositWithdraw/winex/WinexWithdrawModal\";\nimport BaseModal from \"../../Modal/BaseModal\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport AccountBalance from \"../../Account/AccountBalance\";\nimport BlockTradesDepositAddressCache from \"common/BlockTradesDepositAddressCache\";\nimport AssetName from \"components/Utility/AssetName\";\nimport LinkToAccountById from \"components/Utility/LinkToAccountById\";\nimport {requestDepositAddress} from \"common/gatewayMethods\";\nimport {widechainAPIs} from \"api/apiConfig\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport QRCode from \"qrcode.react\";\nimport PropTypes from \"prop-types\";\n\nclass WinexGatewayRequest extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n        gateway: PropTypes.string,\n        deposit_coin_type: PropTypes.string,\n        deposit_asset_name: PropTypes.string,\n        deposit_account: PropTypes.string,\n        receive_coin_type: PropTypes.string,\n        account: ChainTypes.ChainAccount,\n        issuer_account: ChainTypes.ChainAccount,\n        deposit_asset: PropTypes.string,\n        deposit_wallet_type: PropTypes.string,\n        receive_asset: ChainTypes.ChainAsset,\n        deprecated_in_favor_of: ChainTypes.ChainAsset,\n        deprecated_message: PropTypes.string,\n        action: PropTypes.string,\n        supports_output_memos: PropTypes.bool.isRequired,\n        min_withdraw_amount: PropTypes.any,\n        max_withdraw_amount: PropTypes.any,\n        fee_type: PropTypes.string\n    };\n\n    static defaultProps = {\n        autosubscribe: false\n    };\n\n    constructor(props) {\n        super(props);\n        this.deposit_address_cache = new BlockTradesDepositAddressCache();\n\n        let urls = {\n            Winex: widechainAPIs.BASE\n        };\n\n        this.state = {\n            receive_address: {},\n            url: props.url || urls[props.gateway]\n        };\n\n        this.addDepositAddress = this.addDepositAddress.bind(this);\n        this._copy = this._copy.bind(this);\n        document.addEventListener(\"copy\", this._copy);\n    }\n\n    _copy(e) {\n        try {\n            e.clipboardData.setData(\"text/plain\", this.state.clipboardText);\n            e.preventDefault();\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    _getDepositObject(props = this.props) {\n        return {\n            inputCoinType: props.deposit_coin_type,\n            outputCoinType: props.receive_coin_type,\n            outputAddress: props.account.get(\"name\"),\n            url: this.state.url,\n            stateCallback: this.addDepositAddress\n        };\n    }\n\n    componentWillMount() {\n        // let account_name = this.props.account.get(\"name\");\n        // let receive_address = this.deposit_address_cache.getCachedInputAddress(this.props.gateway, account_name, this.props.deposit_coin_type, this.props.receive_coin_type);\n        // if(!receive_address){\n        //     receive_address.address = \"unknown\";\n        // }\n        // let receive_address = {address:\"\",memo:\"\"}\n        // this.setState({receive_address});\n    }\n\n    componentWillReceiveProps(np) {\n        /* When switching accounts, reset the receive_address so a new one\n        gets fetched/generated for the new account */\n        if (np.account !== this.props.account) {\n            this.setState({receive_address: {}});\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"copy\", this._copy);\n    }\n\n    addDepositAddress(receive_address) {\n        let account_name = this.props.account.get(\"name\");\n        this.deposit_address_cache.cacheInputAddress(\n            this.props.gateway,\n            account_name,\n            this.props.deposit_coin_type,\n            this.props.receive_coin_type,\n            receive_address.address,\n            receive_address.memo\n        );\n        this.setState({receive_address});\n    }\n\n    getWithdrawModalId() {\n        // console.log( \"this.props.issuer: \", this.props.issuer_account.toJS() )\n        // console.log( \"this.receive_asset.issuer: \", this.props.receive_asset.toJS() )\n        return (\n            \"withdraw_asset_\" +\n            this.props.issuer_account.get(\"name\") +\n            \"_\" +\n            this.props.receive_asset.get(\"symbol\")\n        );\n    }\n\n    onWithdraw() {\n        ZfApi.publish(this.getWithdrawModalId(), \"open\");\n    }\n\n    toClipboard(clipboardText) {\n        try {\n            this.setState({clipboardText}, () => {\n                document.execCommand(\"copy\");\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    render() {\n        const isDeposit = this.props.action === \"deposit\";\n        let emptyRow = <div style={{display: \"none\", minHeight: 150}} />;\n        if (\n            !this.props.account ||\n            !this.props.issuer_account ||\n            !this.props.receive_asset\n        )\n            return emptyRow;\n\n        let account_balances_object = this.props.account.get(\"balances\");\n\n        const {gateFee} = this.props;\n\n        let balance = \"0 \" + this.props.receive_asset.get(\"symbol\");\n        if (this.props.deprecated_in_favor_of) {\n            let has_nonzero_balance = false;\n            let balance_object_id = account_balances_object.get(\n                this.props.receive_asset.get(\"id\")\n            );\n            if (balance_object_id) {\n                let balance_object = ChainStore.getObject(balance_object_id);\n                if (balance_object) {\n                    let balance = balance_object.get(\"balance\");\n                    if (balance != 0) has_nonzero_balance = true;\n                }\n            }\n            if (!has_nonzero_balance) return emptyRow;\n        }\n\n        // let account_balances = account_balances_object.toJS();\n        // let asset_types = Object.keys(account_balances);\n        // if (asset_types.length > 0) {\n        //     let current_asset_id = this.props.receive_asset.get(\"id\");\n        //     if( current_asset_id )\n        //     {\n        //         balance = (<span><Translate component=\"span\" content=\"transfer.available\"/>: <BalanceComponent balance={account_balances[current_asset_id]}/></span>);\n        //     }\n        // }\n\n        let receive_address = this.state.receive_address;\n        if (!Object.keys(receive_address).length) {\n            let account_name = this.props.account.get(\"name\");\n            receive_address = this.deposit_address_cache.getCachedInputAddress(\n                this.props.gateway,\n                account_name,\n                this.props.deposit_coin_type,\n                this.props.receive_coin_type\n            );\n        }\n\n        if (!receive_address) {\n            requestDepositAddress(this._getDepositObject());\n            return (\n                <div style={{margin: \"3rem\"}}>\n                    <LoadingIndicator type=\"three-bounce\" />\n                </div>\n            );\n        }\n\n        let withdraw_modal_id = this.getWithdrawModalId();\n        let deposit_address_fragment = null;\n        let deposit_memo = null;\n        // if (this.props.deprecated_in_favor_of)\n        // {\n        //     deposit_address_fragment = <span>please use {this.props.deprecated_in_favor_of.get(\"symbol\")} instead. <span data-tip={this.props.deprecated_message} data-place=\"right\" data-html={true}><Icon name=\"question-circle\" title=\"icons.question_circle\" /></span><ReactTooltip /></span>;\n        // }\n        // else\n        // {\n        let clipboardText = \"\";\n        let memoText;\n        if (this.props.deposit_account) {\n            deposit_address_fragment = (\n                <span>{this.props.deposit_account}</span>\n            );\n            clipboardText =\n                this.props.receive_coin_type +\n                \":\" +\n                this.props.account.get(\"name\");\n            deposit_memo = <span>{clipboardText}</span>;\n            var withdraw_memo_prefix = this.props.deposit_coin_type + \":\";\n        } else {\n            if (receive_address.memo) {\n                // This is a client that uses a deposit memo (like ethereum), we need to display both the address and the memo they need to send\n                memoText = receive_address.memo;\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n                deposit_memo = <span>{receive_address.memo}</span>;\n            } else {\n                // This is a client that uses unique deposit addresses to select the output\n                clipboardText = receive_address.address;\n                deposit_address_fragment = (\n                    <span>{receive_address.address}</span>\n                );\n            }\n            var withdraw_memo_prefix = \"\";\n        }\n\n        if (\n            !this.props.isAvailable ||\n            (isDeposit &&\n                !this.props.deposit_account &&\n                !this.state.receive_address)\n        ) {\n            return (\n                <div>\n                    <Translate\n                        className=\"txtlabel cancel\"\n                        content=\"gateway.unavailable\"\n                        component=\"h4\"\n                    />\n                </div>\n            );\n        }\n\n        let issuer = {\n            name: \"Winex\",\n            qq: \"623556771\",\n            support: \"support@winex.pro\"\n        };\n        let support_block = (\n            <div>\n                <label className=\"left-label\">Support</label>\n                <div>\n                    <Translate content=\"winex.gateway.support_block\" />\n                    <br />\n                    <br />\n                    <span>Mail：</span>\n                    <a\n                        href={\n                            (issuer.support.indexOf(\"@\") === -1\n                                ? \"\"\n                                : \"mailto:\") + issuer.support\n                        }\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        {issuer.support}\n                    </a>\n                    <br />\n                    <br />\n                    <span>QQ群：</span>\n                    <a\n                        target=\"_blank\"\n                        href=\"//shang.qq.com/wpa/qunwpa?idkey=5346c21c6da5f4990daf9b178e2c71a160e0d4cfd2bbb7bbae21eea80f44a11f\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        623556771\n                    </a>\n                </div>\n            </div>\n        );\n        if (isDeposit) {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_deposit\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.your_account\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                        {support_block}\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.deposit_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.deposit_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <label className=\"left-label\">\n                            <p style={{color: \"red\"}}>\n                                <Translate\n                                    content=\"winex.gateway.deposit_warning\"\n                                    asset={this.props.deposit_asset}\n                                />\n                            </p>\n                        </label>\n                        <div\n                            style={{\n                                padding: \"10px 0\",\n                                fontSize: \"1.1rem\",\n                                fontWeight: \"bold\"\n                            }}\n                        >\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <td>\n                                            {!receive_address.address ||\n                                            receive_address.address ===\n                                                \"unknown\" ? null : (\n                                                <QRCode\n                                                    size={120}\n                                                    value={\n                                                        receive_address.address\n                                                    }\n                                                />\n                                            )}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            {!receive_address.address ||\n                                            receive_address.address ===\n                                                \"unknown\" ? (\n                                                <Translate content=\"winex.gateway.click_getaddress\" />\n                                            ) : (\n                                                receive_address.address\n                                            )}\n                                        </td>\n                                    </tr>\n                                    {deposit_memo ? (\n                                        <tr>\n                                            <td>memo: {deposit_memo}</td>\n                                        </tr>\n                                    ) : null}\n                                </tbody>\n                            </table>\n                            <div\n                                className=\"button-group\"\n                                style={{paddingTop: 10}}\n                            >\n                                {deposit_address_fragment ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            clipboardText\n                                        )}\n                                    >\n                                        Copy address\n                                    </div>\n                                ) : null}\n                                {memoText ? (\n                                    <div\n                                        className=\"button\"\n                                        onClick={this.toClipboard.bind(\n                                            this,\n                                            memoText\n                                        )}\n                                    >\n                                        Copy memo\n                                    </div>\n                                ) : null}\n                                <button\n                                    className={\"button\"}\n                                    onClick={requestDepositAddress.bind(\n                                        null,\n                                        this._getDepositObject()\n                                    )}\n                                >\n                                    <Translate content=\"winex.gateway.get_deposit_address\" />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"Blocktrades__gateway grid-block no-padding no-margin\">\n                    <div className=\"small-12 medium-5\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_summary\"\n                        />\n                        <div className=\"small-12 medium-10\">\n                            <table className=\"table\">\n                                <tbody>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_withdraw\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AssetName\n                                                name={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.asset_to_receive\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            {this.props.deposit_asset}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <Translate\n                                            component=\"td\"\n                                            content=\"gateway.intermediate\"\n                                        />\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <LinkToAccountById\n                                                account={this.props.issuer_account.get(\n                                                    \"id\"\n                                                )}\n                                            />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>\n                                            <Translate content=\"gateway.balance\" />:\n                                        </td>\n                                        <td\n                                            style={{\n                                                fontWeight: \"bold\",\n                                                color: \"#049cce\",\n                                                textAlign: \"right\"\n                                            }}\n                                        >\n                                            <AccountBalance\n                                                account={this.props.account.get(\n                                                    \"name\"\n                                                )}\n                                                asset={this.props.receive_asset.get(\n                                                    \"symbol\"\n                                                )}\n                                                replace={false}\n                                            />\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n                        {/*<p>When you withdraw {this.props.receive_asset.get(\"symbol\")}, you will receive {this.props.deposit_asset} at a 1:1 ratio (minus fees).</p>*/}\n                    </div>\n                    <div className=\"small-12 medium-7\">\n                        <Translate\n                            component=\"h4\"\n                            content=\"gateway.withdraw_inst\"\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"gateway.withdraw_to\"\n                                asset={this.props.deposit_asset}\n                            />:\n                        </label>\n                        <div className=\"button-group\" style={{paddingTop: 20}}>\n                            <button\n                                className=\"button success\"\n                                style={{fontSize: \"1.3rem\"}}\n                                onClick={this.onWithdraw.bind(this)}\n                            >\n                                <Translate content=\"gateway.withdraw_now\" />{\" \"}\n                            </button>\n                        </div>\n                    </div>\n                    <BaseModal id={withdraw_modal_id} overlay={true}>\n                        <br />\n                        <div className=\"grid-block vertical\">\n                            <WinexWithdrawModal\n                                account={this.props.account.get(\"name\")}\n                                issuer={this.props.issuer_account.get(\"name\")}\n                                asset={this.props.receive_asset.get(\"symbol\")}\n                                url={this.state.url}\n                                output_coin_name={this.props.deposit_asset_name}\n                                gateFee={gateFee}\n                                output_coin_symbol={this.props.deposit_asset}\n                                output_coin_type={this.props.deposit_coin_type}\n                                output_wallet_type={\n                                    this.props.deposit_wallet_type\n                                }\n                                output_supports_memos={\n                                    this.props.supports_output_memos\n                                }\n                                min_withdraw_amount={\n                                    this.props.min_withdraw_amount\n                                }\n                                max_withdraw_amount={\n                                    this.props.max_withdraw_amount\n                                }\n                                fee_type={this.props.fee_type}\n                                memo_prefix={withdraw_memo_prefix}\n                                modal_id={withdraw_modal_id}\n                                balance={\n                                    this.props.account.get(\"balances\").toJS()[\n                                        this.props.receive_asset.get(\"id\")\n                                    ]\n                                }\n                            />\n                        </div>\n                    </BaseModal>\n                    {support_block}\n                </div>\n            );\n        }\n    }\n}\n\nexport default BindToChainState(WinexGatewayRequest);\n","import React from \"react\";\nimport Trigger from \"react-foundation-apps/src/trigger\";\nimport Translate from \"react-translate-component\";\nimport ChainTypes from \"components/Utility/ChainTypes\";\nimport BindToChainState from \"components/Utility/BindToChainState\";\nimport utils from \"common/utils\";\nimport BalanceComponent from \"components/Utility/BalanceComponent\";\nimport counterpart from \"counterpart\";\nimport AmountSelector from \"components/Utility/AmountSelector\";\nimport AccountActions from \"actions/AccountActions\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport {validateAddress, WithdrawAddresses} from \"common/gatewayMethods\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Modal from \"react-foundation-apps/src/modal\";\nimport {checkFeeStatusAsync, checkBalance} from \"common/trxHelper\";\nimport {Asset} from \"common/MarketClasses\";\nimport {debounce} from \"lodash-es\";\nimport PropTypes from \"prop-types\";\n\nclass WinexWithdrawModal extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired,\n        issuer: ChainTypes.ChainAccount.isRequired,\n        asset: ChainTypes.ChainAsset.isRequired,\n        output_coin_name: PropTypes.string.isRequired,\n        output_coin_symbol: PropTypes.string.isRequired,\n        output_coin_type: PropTypes.string.isRequired,\n        url: PropTypes.string,\n        output_wallet_type: PropTypes.string,\n        output_supports_memos: PropTypes.bool.isRequired,\n        amount_to_withdraw: PropTypes.string,\n        min_withdraw_amount: PropTypes.string,\n        max_withdraw_amount: PropTypes.any,\n        fee_type: PropTypes.string,\n        balance: ChainTypes.ChainObject\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            withdraw_amount: this.props.amount_to_withdraw,\n            withdraw_address: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            withdraw_address_check_in_progress: true,\n            withdraw_address_is_valid: null,\n            options_is_valid: false,\n            confirmation_is_valid: false,\n            withdraw_address_selected: WithdrawAddresses.getLast(\n                props.output_wallet_type\n            ),\n            memo: \"\",\n            withdraw_address_first: true,\n            empty_withdraw_value: false,\n            from_account: props.account,\n            fee_asset_id: \"1.3.0\",\n            feeStatus: {}\n        };\n\n        this._validateAddress(this.state.withdraw_address, props);\n\n        this._checkBalance = this._checkBalance.bind(this);\n        this._updateFee = debounce(this._updateFee.bind(this), 250);\n    }\n\n    componentWillMount() {\n        this._updateFee();\n        this._checkFeeStatus();\n    }\n\n    componentWillUnmount() {\n        this.unMounted = true;\n    }\n\n    componentWillReceiveProps(np) {\n        if (\n            np.account !== this.state.from_account &&\n            np.account !== this.props.account\n        ) {\n            this.setState(\n                {\n                    from_account: np.account,\n                    feeStatus: {},\n                    fee_asset_id: \"1.3.0\",\n                    feeAmount: new Asset({amount: 0})\n                },\n                () => {\n                    this._updateFee();\n                    this._checkFeeStatus();\n                }\n            );\n        }\n    }\n\n    _updateFee(state = this.state) {\n        let {fee_asset_id, from_account} = state;\n        const {fee_asset_types} = this._getAvailableAssets(state);\n        if (\n            fee_asset_types.length === 1 &&\n            fee_asset_types[0] !== fee_asset_id\n        ) {\n            fee_asset_id = fee_asset_types[0];\n        }\n\n        if (!from_account) return null;\n        checkFeeStatusAsync({\n            accountID: from_account.get(\"id\"),\n            feeID: fee_asset_id,\n            options: [\"price_per_kbyte\"],\n            data: {\n                type: \"memo\",\n                content:\n                    this.props.output_coin_type +\n                    \":\" +\n                    state.withdraw_address +\n                    (state.memo ? \":\" + state.memo : \"\")\n            }\n        }).then(({fee, hasBalance, hasPoolBalance}) => {\n            if (this.unMounted) return;\n\n            this.setState(\n                {\n                    feeAmount: fee,\n                    hasBalance,\n                    hasPoolBalance,\n                    error: !hasBalance || !hasPoolBalance\n                },\n                this._checkBalance\n            );\n        });\n    }\n\n    _checkFeeStatus(state = this.state) {\n        let account = state.from_account;\n        if (!account) return;\n\n        const {fee_asset_types: assets} = this._getAvailableAssets(state);\n        // const assets = [\"1.3.0\", this.props.asset.get(\"id\")];\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a,\n                    options: [\"price_per_kbyte\"],\n                    data: {\n                        type: \"memo\",\n                        content:\n                            this.props.output_coin_type +\n                            \":\" +\n                            state.withdraw_address +\n                            (state.memo ? \":\" + state.memo : \"\")\n                    }\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a] = status[idx];\n                });\n                if (!utils.are_equal_shallow(state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n                this._checkBalance();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    }\n\n    onMemoChanged(e) {\n        this.setState({memo: e.target.value}, this._updateFee);\n    }\n\n    onWithdrawAmountChange({amount}) {\n        this.setState(\n            {\n                withdraw_amount: amount,\n                empty_withdraw_value:\n                    amount !== undefined && !parseFloat(amount)\n            },\n            this._checkWithdrawAmount(amount),\n            this._validMinAmount(amount),\n            this._calFinalNumber(amount)\n        );\n    }\n\n    onSelectChanged(index) {\n        let new_withdraw_address = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        )[index];\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: new_withdraw_address\n        });\n\n        this.setState(\n            {\n                withdraw_address_selected: new_withdraw_address,\n                options_is_valid: false,\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    onWithdrawAddressChanged(e) {\n        let new_withdraw_address = e.target.value.trim();\n\n        this.setState(\n            {\n                withdraw_address: new_withdraw_address,\n                withdraw_address_check_in_progress: true,\n                withdraw_address_selected: new_withdraw_address,\n                withdraw_address_is_valid: null\n            },\n            this._updateFee\n        );\n        this._validateAddress(new_withdraw_address);\n    }\n\n    _validateAddress(new_withdraw_address, props = this.props) {\n        validateAddress({\n            url: props.url,\n            walletType: props.output_wallet_type,\n            newAddress: new_withdraw_address\n        }).then(isValid => {\n            if (this.state.withdraw_address === new_withdraw_address) {\n                this.setState({\n                    withdraw_address_check_in_progress: false,\n                    withdraw_address_is_valid: isValid\n                });\n            }\n        });\n    }\n\n    _checkBalance() {\n        const {feeAmount, withdraw_amount} = this.state;\n        const {asset, balance} = this.props;\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            withdraw_amount,\n            asset,\n            feeAmount,\n            balance\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n        return hasBalance;\n    }\n\n    _checkWithdrawAmount(withdraw_amount) {\n        const {feeAmount} = this.state;\n        const {asset, balance} = this.props;\n        if (!balance || !feeAmount) return;\n        const hasBalance = checkBalance(\n            withdraw_amount,\n            asset,\n            feeAmount,\n            balance\n        );\n        if (hasBalance === null) return;\n        this.setState({balanceError: !hasBalance});\n        return hasBalance;\n    }\n\n    _validMinAmount(withdraw_amount) {\n        const {min_withdraw_amount} = this.props;\n        var flag = false;\n        if (parseFloat(withdraw_amount) < min_withdraw_amount) {\n            flag = true;\n        }\n        this.setState({minWithdrawError: flag});\n        return flag;\n    }\n\n    _calFinalNumber(withdraw_amount) {\n        if (!withdraw_amount) {\n            withdraw_amount = \"0\";\n        }\n        let {fee_type, gateFee} = this.props;\n\n        let amount = parseFloat(withdraw_amount);\n        let drawGatefee = parseFloat(gateFee);\n        if (fee_type === \"1\") {\n            this.setState({\n                finalNumber: (amount - amount * drawGatefee).toFixed(8)\n            });\n        } else {\n            this.setState({finalNumber: (amount - drawGatefee).toFixed(8)});\n        }\n    }\n\n    onSubmit() {\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address &&\n                this.state.withdraw_address.length) &&\n            this.state.withdraw_amount !== null\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                ZfApi.publish(this.getWithdrawModalId(), \"open\");\n            } else if (parseFloat(this.state.withdraw_amount) > 0) {\n                if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n                    let withdrawals = [];\n                    withdrawals.push(this.state.withdraw_address);\n                    WithdrawAddresses.set({\n                        wallet: this.props.output_wallet_type,\n                        addresses: withdrawals\n                    });\n                } else {\n                    let withdrawals = WithdrawAddresses.get(\n                        this.props.output_wallet_type\n                    );\n                    if (\n                        withdrawals.indexOf(this.state.withdraw_address) == -1\n                    ) {\n                        withdrawals.push(this.state.withdraw_address);\n                        WithdrawAddresses.set({\n                            wallet: this.props.output_wallet_type,\n                            addresses: withdrawals\n                        });\n                    }\n                }\n                WithdrawAddresses.setLast({\n                    wallet: this.props.output_wallet_type,\n                    address: this.state.withdraw_address\n                });\n                let asset = this.props.asset;\n\n                const {feeAmount} = this.state;\n\n                let amount = parseFloat(\n                    String.prototype.replace.call(\n                        this.state.withdraw_amount,\n                        /,/g,\n                        \"\"\n                    )\n                );\n                let sendAmount = new Asset({\n                    asset_id: asset.get(\"id\"),\n                    precision: asset.get(\"precision\"),\n                    real: amount\n                });\n\n                AccountActions.transfer(\n                    this.props.account.get(\"id\"),\n                    this.props.issuer.get(\"id\"),\n                    sendAmount.getAmount(),\n                    asset.get(\"id\"),\n                    this.props.output_coin_type +\n                        \":\" +\n                        this.state.withdraw_address +\n                        (this.state.memo\n                            ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                            : \"\"),\n                    null,\n                    feeAmount ? feeAmount.asset_id : \"1.3.0\"\n                );\n\n                this.setState({\n                    empty_withdraw_value: false\n                });\n            } else {\n                this.setState({\n                    empty_withdraw_value: true\n                });\n            }\n        }\n    }\n\n    onSubmitConfirmation() {\n        ZfApi.publish(this.getWithdrawModalId(), \"close\");\n\n        if (!WithdrawAddresses.has(this.props.output_wallet_type)) {\n            let withdrawals = [];\n            withdrawals.push(this.state.withdraw_address);\n            WithdrawAddresses.set({\n                wallet: this.props.output_wallet_type,\n                addresses: withdrawals\n            });\n        } else {\n            let withdrawals = WithdrawAddresses.get(\n                this.props.output_wallet_type\n            );\n            if (withdrawals.indexOf(this.state.withdraw_address) == -1) {\n                withdrawals.push(this.state.withdraw_address);\n                WithdrawAddresses.set({\n                    wallet: this.props.output_wallet_type,\n                    addresses: withdrawals\n                });\n            }\n        }\n        WithdrawAddresses.setLast({\n            wallet: this.props.output_wallet_type,\n            address: this.state.withdraw_address\n        });\n        let asset = this.props.asset;\n        let precision = utils.get_asset_precision(asset.get(\"precision\"));\n        let amount = String.prototype.replace.call(\n            this.state.withdraw_amount,\n            /,/g,\n            \"\"\n        );\n\n        const {feeAmount} = this.state;\n\n        AccountActions.transfer(\n            this.props.account.get(\"id\"),\n            this.props.issuer.get(\"id\"),\n            parseInt(amount * precision, 10),\n            asset.get(\"id\"),\n            this.props.output_coin_type +\n                \":\" +\n                this.state.withdraw_address +\n                (this.state.memo\n                    ? \":\" + new Buffer(this.state.memo, \"utf-8\")\n                    : \"\"),\n            null,\n            feeAmount ? feeAmount.asset_id : \"1.3.0\"\n        );\n    }\n\n    onDropDownList() {\n        if (WithdrawAddresses.has(this.props.output_wallet_type)) {\n            if (this.state.options_is_valid === false) {\n                this.setState({options_is_valid: true});\n                this.setState({withdraw_address_first: false});\n            }\n\n            if (this.state.options_is_valid === true) {\n                this.setState({options_is_valid: false});\n            }\n        }\n    }\n\n    getWithdrawModalId() {\n        return \"confirmation\";\n    }\n\n    onAccountBalance() {\n        const {feeAmount} = this.state;\n        if (\n            Object.keys(this.props.account.get(\"balances\").toJS()).includes(\n                this.props.asset.get(\"id\")\n            )\n        ) {\n            let total = new Asset({\n                amount: this.props.balance.get(\"balance\"),\n                asset_id: this.props.asset.get(\"id\"),\n                precision: this.props.asset.get(\"precision\")\n            });\n\n            // Subtract the fee if it is using the same asset\n            if (total.asset_id === feeAmount.asset_id) {\n                total.minus(feeAmount);\n            }\n\n            this.setState(\n                {\n                    withdraw_amount: total.getAmount({real: true}),\n                    empty_withdraw_value: false\n                },\n                this._checkBalance\n            );\n        }\n    }\n\n    setNestedRef(ref) {\n        this.nestedRef = ref;\n    }\n\n    onFeeChanged({asset}) {\n        this.setState(\n            {\n                fee_asset_id: asset.get(\"id\")\n            },\n            this._updateFee\n        );\n    }\n\n    _getAvailableAssets(state = this.state) {\n        const {from_account, feeStatus} = state;\n        function hasFeePoolBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            if (feeStatus[id] === undefined) return true;\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        let fee_asset_types = [];\n        if (!(from_account && from_account.get(\"balances\"))) {\n            return {fee_asset_types};\n        }\n        let account_balances = state.from_account.get(\"balances\").toJS();\n        fee_asset_types = Object.keys(account_balances).sort(utils.sortID);\n        for (let key in account_balances) {\n            let asset = ChainStore.getObject(key);\n            let balanceObject = ChainStore.getObject(account_balances[key]);\n            if (balanceObject && balanceObject.get(\"balance\") === 0) {\n                if (fee_asset_types.indexOf(key) !== -1) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n\n            if (asset) {\n                let priceIsValid = false,\n                    p;\n                try {\n                    p = new Price({\n                        base: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"base\"\n                                ])\n                                .toJS()\n                        ),\n                        quote: new Asset(\n                            asset\n                                .getIn([\n                                    \"options\",\n                                    \"core_exchange_rate\",\n                                    \"quote\"\n                                ])\n                                .toJS()\n                        )\n                    });\n                    priceIsValid = p.isValid();\n                } catch (err) {\n                    priceIsValid = false;\n                }\n\n                if (asset.get(\"id\") !== \"1.3.0\" && !priceIsValid) {\n                    fee_asset_types.splice(fee_asset_types.indexOf(key), 1);\n                }\n            }\n        }\n\n        fee_asset_types = fee_asset_types.filter(a => {\n            return hasFeePoolBalance(a) && hasBalance(a);\n        });\n\n        return {fee_asset_types};\n    }\n\n    render() {\n        let {withdraw_address_selected, memo} = this.state;\n        let storedAddress = WithdrawAddresses.get(\n            this.props.output_wallet_type\n        );\n        let balance = null;\n\n        let account_balances = this.props.account.get(\"balances\").toJS();\n        let asset_types = Object.keys(account_balances);\n\n        let withdrawModalId = this.getWithdrawModalId();\n        let invalid_address_message = null;\n        let options = null;\n        let confirmation = null;\n\n        if (this.state.options_is_valid) {\n            options = (\n                <div\n                    className={\n                        !storedAddress.length\n                            ? \"blocktrades-disabled-options\"\n                            : \"blocktrades-options\"\n                    }\n                >\n                    {storedAddress.map(function(name, index) {\n                        return (\n                            <a\n                                key={index}\n                                onClick={this.onSelectChanged.bind(this, index)}\n                            >\n                                {name}\n                            </a>\n                        );\n                    }, this)}\n                </div>\n            );\n        }\n\n        if (\n            !this.state.withdraw_address_check_in_progress &&\n            (this.state.withdraw_address && this.state.withdraw_address.length)\n        ) {\n            if (!this.state.withdraw_address_is_valid) {\n                invalid_address_message = (\n                    <div className=\"has-error\" style={{paddingTop: 10}}>\n                        <Translate\n                            content=\"gateway.valid_address\"\n                            coin_type={this.props.output_coin_type}\n                        />\n                    </div>\n                );\n                confirmation = (\n                    <Modal id={withdrawModalId} overlay={true}>\n                        <Trigger close={withdrawModalId}>\n                            <a href=\"#\" className=\"close-button\">\n                                &times;\n                            </a>\n                        </Trigger>\n                        <br />\n                        <label>\n                            <Translate content=\"modal.confirmation.title\" />\n                        </label>\n                        <br />\n                        <div className=\"content-block\">\n                            <input\n                                type=\"submit\"\n                                className=\"button\"\n                                onClick={this.onSubmitConfirmation.bind(this)}\n                                value={counterpart.translate(\n                                    \"modal.confirmation.accept\"\n                                )}\n                            />\n                            <Trigger close={withdrawModalId}>\n                                <a className=\"secondary button\">\n                                    <Translate content=\"modal.confirmation.cancel\" />\n                                </a>\n                            </Trigger>\n                        </div>\n                    </Modal>\n                );\n            }\n            // if (this.state.withdraw_address_is_valid)\n            //   invalid_address_message = <Icon name=\"checkmark-circle\" title=\"icons.checkmark_circle.operation_succeed\" className=\"success\" />;\n            // else\n            //   invalid_address_message = <Icon name=\"cross-circle\" title=\"icons.cross_circle.operation_failed\" className=\"alert\" />;\n        }\n\n        let tabIndex = 1;\n        let withdraw_memo = null;\n\n        if (this.props.output_supports_memos) {\n            withdraw_memo = (\n                <div className=\"content-block\">\n                    <label>\n                        <Translate component=\"span\" content=\"transfer.memo\" />\n                    </label>\n                    <textarea\n                        rows=\"3\"\n                        value={memo}\n                        tabIndex={tabIndex++}\n                        onChange={this.onMemoChanged.bind(this)}\n                    />\n                </div>\n            );\n        }\n\n        // Estimate fee VARIABLES\n        let {fee_asset_types} = this._getAvailableAssets();\n\n        if (asset_types.length > 0) {\n            let current_asset_id = this.props.asset.get(\"id\");\n            if (current_asset_id) {\n                let current = account_balances[current_asset_id];\n                balance = (\n                    <span\n                        style={{\n                            borderBottom: \"#A09F9F 1px dotted\",\n                            cursor: \"pointer\"\n                        }}\n                    >\n                        <Translate\n                            component=\"span\"\n                            content=\"transfer.available\"\n                        />&nbsp;:&nbsp;\n                        <span\n                            className=\"set-cursor\"\n                            onClick={this.onAccountBalance.bind(this)}\n                        >\n                            {current ? (\n                                <BalanceComponent\n                                    balance={account_balances[current_asset_id]}\n                                />\n                            ) : (\n                                0\n                            )}\n                        </span>\n                    </span>\n                );\n            } else balance = \"No funds\";\n        } else {\n            balance = \"No funds\";\n        }\n\n        return (\n            <form className=\"grid-block vertical full-width-content\">\n                <div className=\"grid-container\">\n                    <div className=\"content-block\">\n                        <h3>\n                            <Translate\n                                content=\"gateway.withdraw_coin\"\n                                coin={this.props.output_coin_name}\n                                symbol={this.props.output_coin_symbol}\n                            />\n                        </h3>\n                    </div>\n\n                    {/* Withdraw amount */}\n                    <div className=\"content-block\">\n                        <AmountSelector\n                            label=\"modal.withdraw.amount\"\n                            amount={this.state.withdraw_amount}\n                            asset={this.props.asset.get(\"id\")}\n                            assets={[this.props.asset.get(\"id\")]}\n                            placeholder=\"0.0\"\n                            onChange={this.onWithdrawAmountChange.bind(this)}\n                            display_balance={balance}\n                        />\n                        <label className=\"left-label\">\n                            <Translate\n                                content=\"winex.withdraw.winAmount\"\n                                min_amount={this.props.min_withdraw_amount}\n                                asset={this.props.asset.get(\"symbol\")}\n                            />\n                        </label>\n\n                        {this.state.empty_withdraw_value ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.valid\" />\n                            </p>\n                        ) : null}\n                        {this.state.balanceError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate content=\"transfer.errors.insufficient\" />\n                            </p>\n                        ) : null}\n                        {this.state.minWithdrawError ? (\n                            <p\n                                className=\"has-error no-margin\"\n                                style={{paddingTop: 10}}\n                            >\n                                <Translate\n                                    content=\"winex.transfer.errors.minWithdraw\"\n                                    min_amount={\n                                        this.props.min_withdraw_amount +\n                                        this.props.asset.get(\"symbol\")\n                                    }\n                                />\n                            </p>\n                        ) : null}\n                    </div>\n\n                    {/* Fee selection */}\n                    {this.state.feeAmount ? (\n                        <div className=\"content-block gate_fee\">\n                            <AmountSelector\n                                refCallback={this.setNestedRef.bind(this)}\n                                label=\"transfer.fee\"\n                                disabled={true}\n                                amount={this.state.feeAmount.getAmount({\n                                    real: true\n                                })}\n                                onChange={this.onFeeChanged.bind(this)}\n                                asset={this.state.feeAmount.asset_id}\n                                assets={fee_asset_types}\n                                tabIndex={tabIndex++}\n                            />\n                            {!this.state.hasBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noFeeBalance\" />\n                                </p>\n                            ) : null}\n                            {!this.state.hasPoolBalance ? (\n                                <p\n                                    className=\"has-error no-margin\"\n                                    style={{paddingTop: 10}}\n                                >\n                                    <Translate content=\"transfer.errors.noPoolBalance\" />\n                                </p>\n                            ) : null}\n                        </div>\n                    ) : null}\n\n                    {/* Gate fee */}\n                    {this.props.gateFee ? (\n                        <div\n                            className=\"amount-selector right-selector\"\n                            style={{paddingBottom: 20}}\n                        >\n                            <label className=\"left-label\">\n                                <Translate content=\"gateway.fee\" />\n                            </label>\n                            <div className=\"inline-label input-wrapper\">\n                                <input\n                                    type=\"text\"\n                                    disabled\n                                    value={this.props.gateFee * 100}\n                                />\n\n                                <div className=\"form-label select floating-dropdown\">\n                                    <div className=\"dropdown-wrapper inactive\">\n                                        <div>\n                                            {this.props.fee_type === \"1\"\n                                                ? \"%\"\n                                                : this.props.output_coin_symbol}\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <label className=\"left-label\">\n                                <Translate\n                                    content=\"winex.withdraw.finalNumber\"\n                                    final_number={this.state.finalNumber}\n                                />\n                            </label>\n                        </div>\n                    ) : null}\n                    <div className=\"content-block\">\n                        <label className=\"left-label\">\n                            <Translate\n                                component=\"span\"\n                                content=\"modal.withdraw.address\"\n                            />\n                        </label>\n                        <div className=\"blocktrades-select-dropdown\">\n                            <div className=\"inline-label\">\n                                <input\n                                    type=\"text\"\n                                    value={withdraw_address_selected}\n                                    tabIndex=\"4\"\n                                    onChange={this.onWithdrawAddressChanged.bind(\n                                        this\n                                    )}\n                                    autoComplete=\"off\"\n                                />\n                                <span onClick={this.onDropDownList.bind(this)}>\n                                    &#9660;\n                                </span>\n                            </div>\n                        </div>\n                        <div className=\"blocktrades-position-options\">\n                            {options}\n                        </div>\n                        {invalid_address_message}\n                    </div>\n\n                    {/* Memo input */}\n                    {/*{withdraw_memo}*/}\n\n                    {/* Withdraw/Cancel buttons */}\n                    <div className=\"button-group\">\n                        <div\n                            onClick={this.onSubmit.bind(this)}\n                            className={\n                                \"button\" +\n                                (this.state.error ||\n                                this.state.balanceError ||\n                                this.state.minWithdrawError\n                                    ? \" disabled\"\n                                    : \"\")\n                            }\n                        >\n                            <Translate content=\"modal.withdraw.submit\" />\n                        </div>\n\n                        <Trigger close={this.props.modal_id}>\n                            <div className=\"button\">\n                                <Translate content=\"account.perm.cancel\" />\n                            </div>\n                        </Trigger>\n                    </div>\n                    {confirmation}\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default BindToChainState(WinexWithdrawModal);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AAKA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;AAhEA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAFA;AACA;AACA;AA2DA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAUA;AACA;;;AACA;AACA;AAkBA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AALA;AAWA;AAAA;AAAA;AACA;AADA;AAXA;AAeA;AAAA;AAAA;AACA;AAIA;AALA;AASA;AACA;AACA;AAFA;AATA;AAhBA;AAJA;AAqCA;AAEA;AACA;AAFA;AAMA;AACA;AAAA;AACA;AADA;AA9CA;AAHA;AACA;AAwDA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AALA;AASA;AAAA;AAAA;AACA;AADA;AATA;AAaA;AAAA;AAAA;AACA;AAIA;AALA;AASA;AACA;AACA;AAFA;AATA;AAdA;AAJA;AAmCA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAVA;AAkBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AALA;AAQA;AATA;AAUA;AACA;AAXA;AADA;AAgBA;AACA;AAEA;AACA;AACA;AAHA;AArCA;AA8CA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAdA;AAxFA;AAHA;AACA;AAkHA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AALA;AAWA;AAAA;AAAA;AACA;AADA;AAXA;AADA;AAJA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AA1BA;AAyCA;AA1CA;AAHA;AACA;AAiDA;AACA;AACA;AAEA;AACA;AAFA;AAHA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AADA;AAHA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AADA;AAHA;AACA;AAQA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAPA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAOA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAdA;AAwBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AANA;AATA;AAzBA;AADA;AAuDA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AA3EA;AALA;AA6FA;;;;AA9fA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AADA;AACA;AAyfA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAPA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAIA;AAIA;AAnBA;AAqBA;AA1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAIA;AACA;AACA;AAFA;AAPA;AAWA;AACA;;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAGA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AANA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAJA;AAMA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AATA;AADA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAcA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAfA;AADA;AAPA;AArBA;AA+DA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AANA;AAQA;AARA;AAJA;AAnBA;AAoCA;AACA;AAAA;AACA;AACA;AAKA;AAPA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AADA;AAOA;AACA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAhBA;AA8BA;AA7CA;AAtCA;AAjEA;AA2JA;;;;AApSA;AACA;AAsSA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAuBA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AAjBA;AAkBA;AACA;;;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAXA;AACA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AACA;AAyCA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AA1EA;AADA;AADA;AALA;AA2GA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AAUA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AAGA;AATA;AA1BA;AAsCA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAxDA;AAdA;AA5GA;AA6LA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AAvDA;AADA;AADA;AALA;AA0FA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AALA;AADA;AAXA;AAqBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAjBA;AADA;AAFA;AAhHA;AA8IA;AACA;;;;AAvkBA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AADA;AAoBA;AADA;AACA;AACA;AAqjBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3lBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AA1BA;AA2BA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAOA;;;AAEA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA3BA;AACA;AACA;AA4BA;AAOA;AACA;AAUA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AACA;AACA;AAkCA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AASA;AAVA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAhBA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AAXA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AA3GA;AAAA;AACA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AALA;AAVA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAnBA;AA6BA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAtBA;AAiCA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAPA;AAPA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAVA;AADA;AAgBA;AAAA;AAAA;AACA;AADA;AAGA;AA1BA;AA8BA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAVA;AAgBA;AArJA;AADA;AA0JA;;;;AAh0BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AACA;AAg0BA;;;;;;;;;;;;;;;;;;;;;;;;ACt1BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;;;;AA9BA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AADA;AACA;AACA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgBA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AAGA;;;AAEA;AACA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AACA;AACA;AADA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAVA;AADA;AAPA;AARA;AAgCA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAMA;AARA;AASA;AATA;AACA;AAYA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAVA;AADA;AAPA;AARA;AAgCA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAMA;AARA;AASA;AATA;AACA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AATA;AAYA;;;;AAnMA;AACA;AACA;AAFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAoMA;AACA;AAGA;;;AAOA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AAAA;AACA;AACA;AAEA;AAEA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAxCA;AAyCA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA;;;;AA/FA;AACA;AACA;AAFA;AAEA;AACA;AACA;AAHA;AAgGA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AARA;AACA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AAAA;AACA;AACA;AAEA;AASA;AADA;AAIA;AAEA;AACA;AADA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAPA;AADA;AAmBA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAMA;AARA;AAAA;AADA;AAaA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAjBA;AADA;AACA;AA6BA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAHA;AASA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAVA;AADA;AA2BA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAJA;AATA;AAhBA;AADA;AAyCA;AACA;;;;AA7NA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AACA;AA6NA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AARA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AAAA;AACA;AACA;AAEA;AAeA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAIA;AACA;AACA;AADA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AAhBA;AADA;AAmCA;;;;AAjIA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AALA;AACA;AACA;AAiIA;;;;;;;;;;;;;;;;;;;;;;;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AANA;AAQA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAOA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AALA;AAFA;AAWA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAXA;AAcA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAdA;AAFA;AAoBA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AAdA;AAiBA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AATA;AAcA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AALA;AAOA;AAPA;AASA;AAVA;AAcA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AANA;AAQA;AACA;AAfA;AAkBA;AACA;AACA;AACA;;;;AAnNA;AACA;AADA;AAEA;AACA;AAFA;AAqNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AAbA;AAcA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAYA;AAGA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AALA;AAOA;AACA;AAAA;AACA;AADA;AATA;AAeA;;;;AAvPA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAuPA;AACA;AACA;;;;;;;;;;;AAUA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAhBA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AArCA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAqCA;AACA;AACA;;;;;;;;;;;AAMA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAKA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAfA;AADA;AAFA;AAVA;AAsCA;;;;AA5EA;AACA;AADA;AAEA;AACA;AAFA;AACA;AACA;AA4EA;AACA;AACA;;;;;;;;;;;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAhCA;AACA;AADA;AAEA;AACA;AACA;AACA;AAJA;AACA;AACA;AAgCA;AACA;AACA;;;AAiBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3DA;AAjBA;AA8EA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAQA;AAIA;AAMA;AAGA;AAIA;AAMA;AAGA;AAIA;AAMA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AAWA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAUA;AAIA;AAWA;AACA;AACA;AACA;AAIA;AAKA;AACA;AAMA;AAMA;AACA;AAKA;AAMA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AA1BA;AA6BA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAKA;AAEA;AACA;AAEA;AACA;AAiBA;AAKA;AAEA;AACA;AAEA;AACA;AAiBA;AAKA;AAEA;AACA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;AAEA;AACA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AAQA;;;AAEA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AASA;AAEA;AAIA;AAIA;AAKA;AAMA;AAGA;AAOA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AAGA;AAOA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AAEA;AAGA;AAKA;AACA;AACA;AAFA;AADA;AAMA;AAEA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AAGA;;;AAGA;AAGA;AACA;AAAA;AAIA;AACA;AACA;AAGA;AACA;AAGA;AAMA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AAEA;AACA;AAKA;AAKA;AACA;AACA;AAFA;AAIA;AAKA;AAGA;AAYA;AAEA;AAGA;AAEA;AACA;;;AAGA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAAA;AACA;AAAA;AAMA;AAQA;AAoBA;AACA;AACA;AAGA;AACA;;;AAGA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAmBA;AACA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AASA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAQA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAQA;AACA;AAKA;AACA;AAKA;AAGA;AAQA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAFA;AAMA;AACA;AAEA;AACA;AACA;AAYA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AAKA;AAGA;AAQA;AACA;AACA;AAQA;AACA;AACA;AAUA;;;AAEA;AAAA;AACA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAYA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AANA;AADA;AADA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAPA;AADA;AACA;AAiBA;AACA;AAGA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAlBA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAjCA;AADA;AA0CA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAYA;AAEA;AACA;AACA;AACA;AAKA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AA+BA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AANA;AADA;AADA;AAoBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAPA;AADA;AACA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAlBA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAUA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAjCA;AADA;AA0CA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AALA;AAWA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AASA;AATA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AACA;AAYA;AAEA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAfA;AACA;AAkBA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AANA;AADA;AADA;AAoBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAPA;AADA;AACA;AAYA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAlBA;AADA;AAsBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAlCA;AADA;AA2CA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAJA;AAMA;AANA;AASA;AA5BA;AA+BA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AARA;AAkBA;AACA;;;;AAliEA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAoiEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACr9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAHA;AAQA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;;;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AAFA;AAPA;AADA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAYA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AADA;AAjCA;AAsCA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AAXA;AAqBA;AAtBA;AADA;AA6BA;;;;AAzKA;AACA;AADA;AAEA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAJA;AACA;AACA;AAkKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAFA;AAJA;AAQA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAHA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAJA;AAMA;AANA;AAQA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAPA;AATA;AADA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAcA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAfA;AADA;AAPA;AAzBA;AAmEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAJA;AArBA;AAmCA;AACA;AAAA;AACA;AACA;AAKA;AAPA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AADA;AAOA;AACA;AAKA;AACA;AACA;AACA;AAHA;AANA;AAhBA;AA8BA;AA7CA;AArCA;AArEA;AA8JA;;;;AApTA;AACA;AAsTA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAsBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAXA;AAYA;AACA;;;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AA1EA;AADA;AADA;AALA;AA2GA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAJA;AADA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAIA;AALA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAPA;AADA;AAbA;AADA;AA4BA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AAUA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AAhBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AA/DA;AApBA;AA5GA;AA0MA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AAvDA;AADA;AADA;AALA;AA0FA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AALA;AADA;AAXA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AAlBA;AADA;AAPA;AAhHA;AAoJA;AACA;;;;AA/iBA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AACA;AA+iBA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAiBA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AACA;AA3BA;AA4BA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAMA;AACA;AACA;AAEA;;;AAEA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA3BA;AACA;AACA;AA4BA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAcA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AACA;AACA;AAkCA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AASA;AAVA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAhBA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AAXA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AA3GA;AAAA;AACA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AALA;AAVA;AAwBA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAlCA;AA8CA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAtBA;AAiCA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAFA;AAPA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAVA;AADA;AAgBA;AAAA;AAAA;AAAA;AAAA;AACA;AAxBA;AA4BA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAWA;AAXA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAfA;AAqBA;AApKA;AADA;AAyKA;;;;AA70BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AA60BA;;;;;;;;;ACn2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;AC9GA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAIA;AACA;;;AAGA;AAOA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAFA;AAIA;AACA;;;;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;;;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAPA;AAUA;;;;AArCA;AACA;AACA;AAFA;AAEA;AADA;AAsCA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAOA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AArBA;AAsBA;AACA;;;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAFA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAFA;AAUA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAFA;AA3BA;AAuCA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAXA;AAmBA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AALA;AADA;AAYA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AADA;AAFA;AAQA;AAjDA;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAJA;AAMA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AATA;AADA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAcA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AALA;AAfA;AADA;AAPA;AArBA;AA8DA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAVA;AAbA;AAiCA;AAnGA;AAsGA;;;;AApjBA;AACA;AAsjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AATA;;;;;;;;ACjlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAPA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AATA;AAUA;AACA;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AACA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAKA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AAFA;AAPA;AALA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AACA;AALA;AAPA;AAJA;AAxEA;AADA;AADA;AALA;AAuGA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AADA;AAjBA;AA6BA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAQA;AARA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AADA;AAjBA;AA/BA;AADA;AAgEA;AAAA;AAAA;AAEA;AAFA;AAjEA;AAzBA;AAxGA;AA0MA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AAFA;AAPA;AALA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AACA;AALA;AAPA;AAJA;AArDA;AADA;AADA;AALA;AAoFA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AALA;AADA;AAXA;AAqBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AADA;AAFA;AA1GA;AAiIA;AACA;;;;AA9gBA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AADA;AACA;AAqgBA;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAJA;AAOA;;;;AAfA;AACA;AAiBA;;;;;;;;;;;;;;ACnjBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAMA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAUA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AAsBA;AACA;AACA;AACA;AA5BA;AA6BA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAJA;AAQA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAOA;;;AAEA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA3BA;AACA;AACA;AA4BA;AACA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AASA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AACA;AACA;AAkCA;AASA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AASA;AAVA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAhBA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AAXA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAnBA;AA4BA;AACA;AACA;AACA;AAjIA;AAAA;AACA;AAkIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AALA;AAVA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAWA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAJA;AAvCA;AAoDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAtBA;AAiCA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAPA;AAPA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAVA;AADA;AAgBA;AAAA;AAAA;AACA;AADA;AAGA;AA1BA;AA8BA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAcA;AAdA;AAiBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAlBA;AAwBA;AApLA;AADA;AAyLA;;;;AAh6BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AAg6BA;;;;;;;;;;;;;;;;;;;;;;;;;;ACt7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;;;AAkBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAVA;AAFA;AAeA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AAOA;AAQA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAMA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAXA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAcA;AAAA;AAAA;AAAA;AAAA;AArBA;AAwBA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAFA;AAHA;AACA;AAgBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAaA;AAAA;AAAA;AACA;AACA;AAGA;AADA;AAKA;AATA;AAWA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAPA;AADA;AAaA;AAAA;AAAA;AAAA;AAAA;AApBA;AAXA;AAfA;AADA;AAsDA;;;;AA1RA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAaA;AACA;AACA;AAHA;AACA;AACA;AA+QA;;;;;;;;;;;;;;;;;;;;;;;;;;ACrTA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAKA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAOA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AASA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAlSA;AAqSA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAgBA;AAhBA;AAkBA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAzGA;AA5SA;AAgaA;;;AACA;AAAA;AACA;AACA;AACA;AACA;;;;AApcA;AACA;AADA;AAEA;AADA;AACA;AACA;AAocA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;AC7cA;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAHA;AAPA;AAYA;AACA;;;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AAGA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAIA;AAKA;AAKA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AApBA;AAuBA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAJA;AAMA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AATA;AADA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AAPA;AAgBA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AAPA;AAjBA;AADA;AAPA;AArBA;AAmEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AADA;AAuBA;AACA;AACA;AAFA;AAxBA;AArEA;AAqGA;;;;AA1SA;AACA;AA4SA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;AC7TA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAQA;AARA;AADA;AADA;AAcA;AAAA;AAAA;AAAA;AAAA;AAzBA;AA4BA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AADA;AAFA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AATA;AARA;AAoBA;AAAA;AAAA;AAAA;AAAA;AArBA;AAbA;AAsCA;;;;AAvJA;AACA;AADA;AAEA;AACA;AAFA;AACA;AACA;AAuJA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA0BA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAfA;AAgBA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAQA;AACA;;;AAEA;AACA;AACA;AACA;AAMA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAXA;AACA;AACA;AAYA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AASA;AATA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAnBA;AAFA;AA+BA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AA1EA;AADA;AADA;AAqGA;AA1GA;AA4GA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AAFA;AAJA;AADA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AA3BA;AADA;AAkCA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAOA;AAPA;AA1BA;AAzCA;AAnBA;AA7GA;AAiNA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAJA;AAPA;AALA;AAoBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AADA;AAPA;AALA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AAGA;AAGA;AAPA;AAPA;AAJA;AAvDA;AADA;AADA;AALA;AA0FA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AALA;AADA;AAXA;AAqBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AAxBA;AADA;AAFA;AAmCA;AAnJA;AAsJA;AACA;;;;AAjoBA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AADA;AAuBA;AADA;AACA;AACA;AA4mBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAkBA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AACA;AA1BA;AA2BA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAYA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AACA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAcA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AASA;;;AAEA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAQA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA3BA;AACA;AACA;AA4BA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAcA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AA7BA;AACA;AACA;AAkCA;AAcA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAMA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AADA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AASA;AAVA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAOA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAhBA;AAmBA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AATA;AAXA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAYA;AACA;AACA;AACA;AA3GA;AAAA;AACA;AA4GA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAUA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AALA;AAVA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAJA;AAnCA;AAmDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAVA;AAYA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAtBA;AAiCA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AADA;AAPA;AAiBA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAxBA;AAgCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAPA;AASA;AAAA;AAAA;AAAA;AAAA;AAVA;AADA;AAgBA;AAAA;AAAA;AACA;AADA;AAGA;AA1BA;AAiCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAWA;AAXA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAfA;AAqBA;AAxLA;AADA;AA6LA;;;;AAx2BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AACA;AAw2BA;;;;;A","sourceRoot":""}