{"version":3,"file":"exchange.5ee5d739cd1a4b1b4e8a.js","sources":["webpack:///app/components/Exchange/ExchangeContainer.jsx","webpack:///app/components/Exchange/Exchange.jsx","webpack:///app/components/Exchange/OrderBook.jsx","webpack:///app/components/Exchange/MarketHistory.jsx","webpack:///app/components/Utility/BlockDate.jsx","webpack:///app/components/Exchange/BuySell.jsx","webpack:///app/components/Exchange/MarketPicker.jsx","webpack:///app/components/Exchange/TradingViewPriceChart.jsx","webpack:///./charting_library/charting_library.min.js","webpack:///app/assets/colors.js","webpack:///app/components/Exchange/tradingViewClasses.js","webpack:///app/components/Exchange/DepthHighChart.jsx","webpack:///app/components/Notifier/NotifierContainer.jsx","webpack:///app/components/Notifier/Notifier.jsx","webpack:///app/components/Exchange/ConfirmOrderModal.jsx","webpack:///app/components/Exchange/ExchangeHeader.jsx","webpack:///app/components/Exchange/PriceStatWithLabel.jsx","webpack:///app/components/Exchange/ExchangeHeaderCollateral.jsx","webpack:///app/components/Chat/ChatBro.js"],"sourcesContent":["import React from \"react\";\nimport MarketsStore from \"stores/MarketsStore\";\nimport AccountStore from \"stores/AccountStore\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport GatewayStore from \"stores/GatewayStore\";\nimport IntlStore from \"stores/IntlStore\";\nimport WalletUnlockStore from \"stores/WalletUnlockStore\";\nimport AltContainer from \"alt-container\";\nimport Exchange from \"./Exchange\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport {EmitterInstance} from \"bitsharesjs\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport {DataFeed} from \"components/Exchange/tradingViewClasses\";\nimport Page404 from \"../Page404/Page404\";\n\nclass ExchangeContainer extends React.Component {\n    render() {\n        let symbols = this.props.match.params.marketID.toUpperCase().split(\"_\");\n        if (symbols[0] === symbols[1]) {\n            return <Page404 subtitle=\"market_not_found_subtitle\" />;\n        }\n        return (\n            <AltContainer\n                stores={[\n                    MarketsStore,\n                    AccountStore,\n                    SettingsStore,\n                    WalletUnlockStore,\n                    IntlStore\n                ]}\n                inject={{\n                    locale: () => IntlStore.getState().currentLocale,\n                    lockedWalletState: () => {\n                        return WalletUnlockStore.getState().locked;\n                    },\n                    marketLimitOrders: () => {\n                        return MarketsStore.getState().marketLimitOrders;\n                    },\n                    marketCallOrders: () => {\n                        return MarketsStore.getState().marketCallOrders;\n                    },\n                    invertedCalls: () => {\n                        return MarketsStore.getState().invertedCalls;\n                    },\n                    marketSettleOrders: () => {\n                        return MarketsStore.getState().marketSettleOrders;\n                    },\n                    marketData: () => {\n                        return MarketsStore.getState().marketData;\n                    },\n                    totals: () => {\n                        return MarketsStore.getState().totals;\n                    },\n                    activeMarketHistory: () => {\n                        return MarketsStore.getState().activeMarketHistory;\n                    },\n                    bucketSize: () => {\n                        return MarketsStore.getState().bucketSize;\n                    },\n                    buckets: () => {\n                        return MarketsStore.getState().buckets;\n                    },\n                    lowestCallPrice: () => {\n                        return MarketsStore.getState().lowestCallPrice;\n                    },\n                    feedPrice: () => {\n                        return MarketsStore.getState().feedPrice;\n                    },\n                    currentAccount: () => {\n                        return AccountStore.getState().currentAccount;\n                    },\n                    myActiveAccounts: () => {\n                        return AccountStore.getState().myActiveAccounts;\n                    },\n                    viewSettings: () => {\n                        return SettingsStore.getState().viewSettings;\n                    },\n                    settings: () => {\n                        return SettingsStore.getState().settings;\n                    },\n                    exchange: () => {\n                        return SettingsStore.getState().exchange;\n                    },\n                    starredMarkets: () => {\n                        return SettingsStore.getState().starredMarkets;\n                    },\n                    marketDirections: () => {\n                        return SettingsStore.getState().marketDirections;\n                    },\n                    marketStats: () => {\n                        return MarketsStore.getState().marketStats;\n                    },\n                    marketReady: () => {\n                        return MarketsStore.getState().marketReady;\n                    },\n                    backedCoins: () => {\n                        return GatewayStore.getState().backedCoins.get(\n                            \"OPEN\",\n                            []\n                        );\n                    },\n                    bridgeCoins: () => {\n                        return GatewayStore.getState().bridgeCoins;\n                    },\n                    miniDepthChart: () => {\n                        return SettingsStore.getState().viewSettings.get(\n                            \"miniDepthChart\",\n                            true\n                        );\n                    },\n                    viewChat: () => {\n                        return SettingsStore.getState().viewSettings.get(\n                            \"viewChat\",\n                            true\n                        );\n                    },\n\n                    dataFeed: () => new DataFeed(),\n\n                    trackedGroupsConfig: () => {\n                        return MarketsStore.getState().trackedGroupsConfig;\n                    },\n                    currentGroupOrderLimit: () => {\n                        return MarketsStore.getState().currentGroupLimit;\n                    }\n                }}\n            >\n                <ExchangeSubscriber\n                    history={this.props.history}\n                    location={this.props.location}\n                    quoteAsset={symbols[0]}\n                    baseAsset={symbols[1]}\n                />\n            </AltContainer>\n        );\n    }\n}\n\nlet emitter = EmitterInstance();\nlet callListener,\n    limitListener,\n    newCallListener,\n    feedUpdateListener,\n    settleOrderListener;\n\nclass ExchangeSubscriber extends React.Component {\n    static propTypes = {\n        currentAccount: ChainTypes.ChainAccount.isRequired,\n        quoteAsset: ChainTypes.ChainAsset.isRequired,\n        baseAsset: ChainTypes.ChainAsset.isRequired,\n        coreAsset: ChainTypes.ChainAsset.isRequired\n    };\n\n    static defaultProps = {\n        currentAccount: \"1.2.3\",\n        coreAsset: \"1.3.0\"\n    };\n\n    constructor(props) {\n        super();\n        this.state = {sub: null};\n\n        this._subToMarket = this._subToMarket.bind(this);\n    }\n\n    componentWillMount() {\n        if (this.props.quoteAsset === null || this.props.baseAsset === null) {\n            return;\n        }\n        if (this.props.quoteAsset.toJS && this.props.baseAsset.toJS) {\n            this._subToMarket(this.props);\n            // this._addMarket(this.props.quoteAsset.get(\"symbol\"), this.props.baseAsset.get(\"symbol\"));\n        }\n\n        emitter.on(\n            \"cancel-order\",\n            (limitListener = MarketsActions.cancelLimitOrderSuccess)\n        );\n        emitter.on(\n            \"close-call\",\n            (callListener = MarketsActions.closeCallOrderSuccess)\n        );\n\n        emitter.on(\n            \"call-order-update\",\n            (newCallListener = call_order => {\n                let {asset_id: coBase} = call_order.call_price.base;\n                let {asset_id: coQuote} = call_order.call_price.quote;\n                let baseId = this.props.baseAsset.get(\"id\"),\n                    quoteId = this.props.quoteAsset.get(\"id\");\n                if (\n                    (coBase === baseId || coBase === quoteId) &&\n                    (coQuote === baseId || coQuote === quoteId)\n                ) {\n                    MarketsActions.callOrderUpdate(call_order);\n                }\n            })\n        );\n        emitter.on(\n            \"bitasset-update\",\n            (feedUpdateListener = MarketsActions.feedUpdate)\n        );\n        emitter.on(\n            \"settle-order-update\",\n            (settleOrderListener = object => {\n                let {isMarketAsset, marketAsset} = market_utils.isMarketAsset(\n                    this.props.quoteAsset,\n                    this.props.baseAsset\n                );\n\n                if (\n                    isMarketAsset &&\n                    marketAsset.id === object.balance.asset_id\n                ) {\n                    MarketsActions.settleOrderUpdate(marketAsset.id);\n                }\n            })\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.quoteAsset === null || nextProps.baseAsset === null) {\n            return;\n        }\n        /* Prediction markets should only be shown in one direction, if the link goes to the wrong one we flip it */\n        if (\n            nextProps.baseAsset &&\n            nextProps.baseAsset.getIn([\"bitasset\", \"is_prediction_market\"])\n        ) {\n            this.props.history.push(\n                `/market/${nextProps.baseAsset.get(\n                    \"symbol\"\n                )}_${nextProps.quoteAsset.get(\"symbol\")}`\n            );\n        }\n\n        if (nextProps.quoteAsset && nextProps.baseAsset) {\n            if (!this.state.sub) {\n                return this._subToMarket(nextProps);\n            }\n        }\n\n        if (\n            nextProps.quoteAsset.get(\"symbol\") !==\n                this.props.quoteAsset.get(\"symbol\") ||\n            nextProps.baseAsset.get(\"symbol\") !==\n                this.props.baseAsset.get(\"symbol\")\n        ) {\n            let currentSub = this.state.sub.split(\"_\");\n            MarketsActions.unSubscribeMarket(currentSub[0], currentSub[1]).then(\n                () => {\n                    this._subToMarket(nextProps);\n                }\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        let {quoteAsset, baseAsset} = this.props;\n        if (quoteAsset === null || baseAsset === null) {\n            return;\n        }\n\n        MarketsActions.unSubscribeMarket(\n            quoteAsset.get(\"id\"),\n            baseAsset.get(\"id\")\n        );\n        if (emitter) {\n            emitter.off(\"cancel-order\", limitListener);\n            emitter.off(\"close-call\", callListener);\n            emitter.off(\"call-order-update\", newCallListener);\n            emitter.off(\"bitasset-update\", feedUpdateListener);\n            emitter.off(\"settle-order-update\", settleOrderListener);\n        }\n    }\n\n    _subToMarket(props, newBucketSize, newGroupLimit) {\n        let {quoteAsset, baseAsset, bucketSize, currentGroupOrderLimit} = props;\n        if (newBucketSize) {\n            bucketSize = newBucketSize;\n        }\n        if (newGroupLimit) {\n            currentGroupOrderLimit = newGroupLimit;\n        }\n        if (quoteAsset.get(\"id\") && baseAsset.get(\"id\")) {\n            MarketsActions.subscribeMarket.defer(\n                baseAsset,\n                quoteAsset,\n                bucketSize,\n                currentGroupOrderLimit\n            );\n            this.setState({\n                sub: `${quoteAsset.get(\"id\")}_${baseAsset.get(\"id\")}`\n            });\n        }\n    }\n\n    render() {\n        if (this.props.quoteAsset === null || this.props.baseAsset === null)\n            return <Page404 subtitle=\"market_not_found_subtitle\" />;\n\n        return (\n            <Exchange\n                {...this.props}\n                sub={this.state.sub}\n                subToMarket={this._subToMarket}\n            />\n        );\n    }\n}\n\nExchangeSubscriber = BindToChainState(ExchangeSubscriber, {\n    show_loader: true\n});\n\nexport default ExchangeContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport {MyOpenOrders} from \"./MyOpenOrders\";\nimport OrderBook from \"./OrderBook\";\nimport MarketHistory from \"./MarketHistory\";\nimport MyMarkets from \"./MyMarkets\";\nimport BuySell from \"./BuySell\";\nimport MarketPicker from \"./MarketPicker\";\nimport utils from \"common/utils\";\n// import PriceChartD3 from \"./PriceChartD3\";\nimport TradingViewPriceChart from \"./TradingViewPriceChart\";\nimport assetUtils from \"common/asset_utils\";\nimport DepthHighChart from \"./DepthHighChart\";\nimport {debounce} from \"lodash-es\";\nimport BorrowModal from \"../Modal/BorrowModal\";\nimport notify from \"actions/NotificationActions\";\nimport AccountNotifications from \"../Notifier/NotifierContainer\";\nimport Ps from \"perfect-scrollbar\";\nimport {ChainStore, FetchChain} from \"bitsharesjs\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport cnames from \"classnames\";\nimport market_utils from \"common/market_utils\";\nimport {Asset, Price, LimitOrderCreate} from \"common/MarketClasses\";\nimport ConfirmOrderModal from \"./ConfirmOrderModal\";\nimport ExchangeHeader from \"./ExchangeHeader\";\nimport Translate from \"react-translate-component\";\nimport {Apis} from \"bitsharesjs-ws\";\nimport {checkFeeStatusAsync} from \"common/trxHelper\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport moment from \"moment\";\nimport ChatBro from \"../Chat/ChatBro\";\n\n// Highcharts.setOptions({\n//     global: {\n//         useUTC: false\n//     }\n// });\nimport guide from \"intro.js\";\nimport translator from \"counterpart\";\n\nclass Exchange extends React.Component {\n    static propTypes = {\n        marketCallOrders: PropTypes.object.isRequired,\n        activeMarketHistory: PropTypes.object.isRequired,\n        viewSettings: PropTypes.object.isRequired\n    };\n\n    static defaultProps = {\n        marketCallOrders: [],\n        activeMarketHistory: {},\n        viewSettings: {}\n    };\n\n    constructor(props) {\n        super();\n        this.state = {\n            ...this._initialState(props),\n            expirationType: {\n                bid: props.exchange.getIn([\"lastExpiration\", \"bid\"]) || \"YEAR\",\n                ask: props.exchange.getIn([\"lastExpiration\", \"ask\"]) || \"YEAR\"\n            },\n            expirationCustomTime: {\n                bid: moment().add(1, \"day\"),\n                ask: moment().add(1, \"day\")\n            },\n            feeStatus: {}\n        };\n\n        this._getWindowSize = debounce(this._getWindowSize.bind(this), 150);\n        this._checkFeeStatus = this._checkFeeStatus.bind(this);\n\n        this._handleExpirationChange = this._handleExpirationChange.bind(this);\n        this._handleCustomExpirationChange = this._handleCustomExpirationChange.bind(\n            this\n        );\n\n        this.psInit = true;\n    }\n\n    _handleExpirationChange(type, e) {\n        let expirationType = {\n            ...this.state.expirationType,\n            [type]: e.target.value\n        };\n\n        if (e.target.value !== \"SPECIFIC\") {\n            SettingsActions.setExchangeLastExpiration({\n                ...((this.props.exchange.has(\"lastExpiration\") &&\n                    this.props.exchange.get(\"lastExpiration\").toJS()) ||\n                    {}),\n                [type]: e.target.value\n            });\n        }\n\n        this.setState({\n            expirationType: expirationType\n        });\n    }\n\n    _handleCustomExpirationChange(type, time) {\n        let expirationCustomTime = {\n            ...this.state.expirationCustomTime,\n            [type]: time\n        };\n\n        this.setState({\n            expirationCustomTime: expirationCustomTime\n        });\n    }\n\n    EXPIRATIONS = {\n        HOUR: {\n            title: \"1 hour\",\n            get: () =>\n                moment()\n                    .add(1, \"hour\")\n                    .valueOf()\n        },\n        \"12HOURS\": {\n            title: \"12 hours\",\n            get: () =>\n                moment()\n                    .add(12, \"hour\")\n                    .valueOf()\n        },\n        \"24HOURS\": {\n            title: \"24 hours\",\n            get: () =>\n                moment()\n                    .add(1, \"day\")\n                    .valueOf()\n        },\n        \"7DAYS\": {\n            title: \"7 days\",\n            get: () =>\n                moment()\n                    .add(7, \"day\")\n                    .valueOf()\n        },\n        MONTH: {\n            title: \"30 days\",\n            get: () =>\n                moment()\n                    .add(30, \"day\")\n                    .valueOf()\n        },\n        YEAR: {\n            title: \"1 year\",\n            get: () =>\n                moment()\n                    .add(1, \"year\")\n                    .valueOf()\n        },\n        SPECIFIC: {\n            title: \"Specific\",\n            get: type => {\n                return this.state.expirationCustomTime[type].valueOf();\n            }\n        }\n    };\n\n    _initialState(props) {\n        let ws = props.viewSettings;\n        let bid = {\n            forSaleText: \"\",\n            toReceiveText: \"\",\n            priceText: \"\",\n            for_sale: new Asset({\n                asset_id: props.baseAsset.get(\"id\"),\n                precision: props.baseAsset.get(\"precision\")\n            }),\n            to_receive: new Asset({\n                asset_id: props.quoteAsset.get(\"id\"),\n                precision: props.quoteAsset.get(\"precision\")\n            })\n        };\n        bid.price = new Price({base: bid.for_sale, quote: bid.to_receive});\n        let ask = {\n            forSaleText: \"\",\n            toReceiveText: \"\",\n            priceText: \"\",\n            for_sale: new Asset({\n                asset_id: props.quoteAsset.get(\"id\"),\n                precision: props.quoteAsset.get(\"precision\")\n            }),\n            to_receive: new Asset({\n                asset_id: props.baseAsset.get(\"id\"),\n                precision: props.baseAsset.get(\"precision\")\n            })\n        };\n        ask.price = new Price({base: ask.for_sale, quote: ask.to_receive});\n\n        return {\n            history: [],\n            buySellOpen: ws.get(\"buySellOpen\", true),\n            bid,\n            ask,\n            flipBuySell: ws.get(\"flipBuySell\", false),\n            favorite: false,\n            showDepthChart: ws.get(\"showDepthChart\", false),\n            leftOrderBook: ws.get(\"leftOrderBook\", true),\n            buyDiff: false,\n            sellDiff: false,\n            buySellTop: ws.get(\"buySellTop\", true),\n            buyFeeAssetIdx: ws.get(\"buyFeeAssetIdx\", 0),\n            sellFeeAssetIdx: ws.get(\"sellFeeAssetIdx\", 0),\n            height: window.innerHeight,\n            width: window.innerWidth,\n            chartHeight: ws.get(\"chartHeight\", 600),\n            currentPeriod: ws.get(\"currentPeriod\", 3600 * 24 * 30 * 3) // 3 months\n        };\n    }\n\n    _getLastMarketKey() {\n        const chainID = Apis.instance().chain_id;\n        return `lastMarket${chainID ? \"_\" + chainID.substr(0, 8) : \"\"}`;\n    }\n\n    componentWillMount() {\n        this._checkFeeStatus();\n    }\n\n    componentDidMount() {\n        MarketsActions.getTrackedGroupsConfig();\n\n        SettingsActions.changeViewSetting.defer({\n            [this._getLastMarketKey()]:\n                this.props.quoteAsset.get(\"symbol\") +\n                \"_\" +\n                this.props.baseAsset.get(\"symbol\")\n        });\n\n        window.addEventListener(\"resize\", this._getWindowSize, {\n            capture: false,\n            passive: true\n        });\n    }\n\n    shouldComponentUpdate(np, ns) {\n        if (!np.marketReady && !this.props.marketReady) {\n            return false;\n        }\n        let propsChanged = false;\n        for (let key in np) {\n            if (np.hasOwnProperty(key)) {\n                propsChanged =\n                    propsChanged ||\n                    !utils.are_equal_shallow(np[key], this.props[key]);\n                if (propsChanged) break;\n            }\n        }\n        return propsChanged || !utils.are_equal_shallow(ns, this.state);\n    }\n\n    _checkFeeStatus(\n        assets = [\n            this.props.coreAsset,\n            this.props.baseAsset,\n            this.props.quoteAsset\n        ],\n        account = this.props.currentAccount\n    ) {\n        let feeStatus = {};\n        let p = [];\n        assets.forEach(a => {\n            p.push(\n                checkFeeStatusAsync({\n                    accountID: account.get(\"id\"),\n                    feeID: a.get(\"id\"),\n                    type: \"limit_order_create\"\n                })\n            );\n        });\n        Promise.all(p)\n            .then(status => {\n                assets.forEach((a, idx) => {\n                    feeStatus[a.get(\"id\")] = status[idx];\n                });\n                if (!utils.are_equal_shallow(this.state.feeStatus, feeStatus)) {\n                    this.setState({\n                        feeStatus\n                    });\n                }\n            })\n            .catch(err => {\n                console.log(\"checkFeeStatusAsync error\", err);\n                this.setState({feeStatus: {}});\n            });\n    }\n\n    _getWindowSize() {\n        let {innerHeight, innerWidth} = window;\n        if (\n            innerHeight !== this.state.height ||\n            innerWidth !== this.state.width\n        ) {\n            this.setState({\n                height: innerHeight,\n                width: innerWidth\n            });\n            let centerContainer = this.refs.center;\n            if (centerContainer) {\n                Ps.update(centerContainer);\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        this._initPsContainer();\n        if (\n            !this.props.exchange.get(\"tutorialShown\") &&\n            prevProps.coreAsset &&\n            prevState.feeStatus\n        ) {\n            if (!this.tutorialShown) {\n                this.tutorialShown = true;\n                const theme = this.props.settings.get(\"themes\");\n\n                guide\n                    .introJs()\n                    .setOptions({\n                        tooltipClass: theme,\n                        highlightClass: theme,\n                        showBullets: false,\n                        hideNext: true,\n                        hidePrev: true,\n                        nextLabel: translator.translate(\n                            \"walkthrough.next_label\"\n                        ),\n                        prevLabel: translator.translate(\n                            \"walkthrough.prev_label\"\n                        ),\n                        skipLabel: translator.translate(\n                            \"walkthrough.skip_label\"\n                        ),\n                        doneLabel: translator.translate(\n                            \"walkthrough.done_label\"\n                        )\n                    })\n                    .start();\n\n                SettingsActions.setExchangeTutorialShown.defer(true);\n            }\n        }\n    }\n\n    _initPsContainer() {\n        if (this.refs.center && this.psInit) {\n            let centerContainer = this.refs.center;\n            if (centerContainer) {\n                Ps.initialize(centerContainer);\n                this.psInit = false;\n            }\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this._initPsContainer();\n        if (\n            nextProps.quoteAsset !== this.props.quoteAsset ||\n            nextProps.baseAsset !== this.props.baseAsset ||\n            nextProps.currentAccount !== this.props.currentAccount\n        ) {\n            this._checkFeeStatus(\n                [\n                    nextProps.coreAsset,\n                    nextProps.baseAsset,\n                    nextProps.quoteAsset\n                ],\n                nextProps.currentAccount\n            );\n        }\n        if (\n            nextProps.quoteAsset.get(\"symbol\") !==\n                this.props.quoteAsset.get(\"symbol\") ||\n            nextProps.baseAsset.get(\"symbol\") !==\n                this.props.baseAsset.get(\"symbol\")\n        ) {\n            this.setState(this._initialState(nextProps));\n\n            return SettingsActions.changeViewSetting({\n                [this._getLastMarketKey()]:\n                    nextProps.quoteAsset.get(\"symbol\") +\n                    \"_\" +\n                    nextProps.baseAsset.get(\"symbol\")\n            });\n        }\n\n        // if (this.props.sub && nextProps.bucketSize !== this.props.bucketSize) {\n        //     return this._changeBucketSize(nextProps.bucketSize);\n        // }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this._getWindowSize);\n    }\n\n    _getFeeAssets(quote, base, coreAsset) {\n        let {currentAccount} = this.props;\n        const {feeStatus} = this.state;\n\n        function addMissingAsset(target, asset) {\n            if (target.indexOf(asset) === -1) {\n                target.push(asset);\n            }\n        }\n\n        function hasFeePoolBalance(id) {\n            return feeStatus[id] && feeStatus[id].hasPoolBalance;\n        }\n\n        function hasBalance(id) {\n            return feeStatus[id] && feeStatus[id].hasBalance;\n        }\n\n        let sellAssets = [coreAsset, quote === coreAsset ? base : quote];\n        addMissingAsset(sellAssets, quote);\n        addMissingAsset(sellAssets, base);\n        // let sellFeeAsset;\n\n        let buyAssets = [coreAsset, base === coreAsset ? quote : base];\n        addMissingAsset(buyAssets, quote);\n        addMissingAsset(buyAssets, base);\n        // let buyFeeAsset;\n\n        let balances = {};\n\n        currentAccount\n            .get(\"balances\", [])\n            .filter((balance, id) => {\n                return (\n                    [\"1.3.0\", quote.get(\"id\"), base.get(\"id\")].indexOf(id) >= 0\n                );\n            })\n            .forEach((balance, id) => {\n                let balanceObject = ChainStore.getObject(balance);\n                balances[id] = {\n                    balance: balanceObject\n                        ? parseInt(balanceObject.get(\"balance\"), 10)\n                        : 0,\n                    fee: this._getFee(ChainStore.getAsset(id))\n                };\n            });\n\n        function filterAndDefault(assets, balances, idx) {\n            let asset;\n            /* Only keep assets for which the user has a balance larger than the fee, and for which the fee pool is valid */\n            assets = assets.filter(a => {\n                if (!balances[a.get(\"id\")]) {\n                    return false;\n                }\n                return (\n                    hasFeePoolBalance(a.get(\"id\")) && hasBalance(a.get(\"id\"))\n                );\n            });\n\n            /* If the user has no valid balances, default to core fee */\n            if (!assets.length) {\n                asset = coreAsset;\n                assets.push(coreAsset);\n                /* If the user has balances, use the stored idx value unless that asset is no longer available*/\n            } else {\n                asset = assets[Math.min(assets.length - 1, idx)];\n            }\n\n            return {assets, asset};\n        }\n\n        let {assets: sellFeeAssets, asset: sellFeeAsset} = filterAndDefault(\n            sellAssets,\n            balances,\n            this.state.sellFeeAssetIdx\n        );\n        let {assets: buyFeeAssets, asset: buyFeeAsset} = filterAndDefault(\n            buyAssets,\n            balances,\n            this.state.buyFeeAssetIdx\n        );\n\n        let sellFee = this._getFee(sellFeeAsset);\n        let buyFee = this._getFee(buyFeeAsset);\n\n        return {\n            sellFeeAsset,\n            sellFeeAssets,\n            sellFee,\n            buyFeeAsset,\n            buyFeeAssets,\n            buyFee\n        };\n    }\n\n    _getFee(asset = this.props.coreAsset) {\n        return (\n            this.state.feeStatus[asset.get(\"id\")] &&\n            this.state.feeStatus[asset.get(\"id\")].fee\n        );\n    }\n\n    _verifyFee(fee, sell, sellBalance, coreBalance) {\n        let coreFee = this._getFee();\n\n        if (fee.asset_id === \"1.3.0\") {\n            if (coreFee.getAmount() <= coreBalance) {\n                return \"1.3.0\";\n            } else {\n                return null;\n            }\n        } else {\n            let sellSum =\n                sell.asset_id === fee.asset_id\n                    ? fee.getAmount() + sell.getAmount()\n                    : sell.getAmount();\n            if (sellSum <= sellBalance) {\n                // Sufficient balance in asset to pay fee\n                return fee.asset_id;\n            } else if (\n                coreFee.getAmount() <= coreBalance &&\n                fee.asset_id !== \"1.3.0\"\n            ) {\n                // Sufficient balance in core asset to pay fee\n                return \"1.3.0\";\n            } else {\n                return null; // Unable to pay fee\n            }\n        }\n    }\n\n    _createLimitOrderConfirm(\n        buyAsset,\n        sellAsset,\n        sellBalance,\n        coreBalance,\n        feeAsset,\n        type,\n        short = true,\n        e\n    ) {\n        e.preventDefault();\n        let {highestBid, lowestAsk} = this.props.marketData;\n        let current = this.state[type === \"sell\" ? \"ask\" : \"bid\"];\n\n        sellBalance = current.for_sale.clone(\n            sellBalance\n                ? parseInt(ChainStore.getObject(sellBalance).toJS().balance, 10)\n                : 0\n        );\n        coreBalance = new Asset({\n            amount: coreBalance\n                ? parseInt(ChainStore.getObject(coreBalance).toJS().balance, 10)\n                : 0\n        });\n\n        let fee = this._getFee(feeAsset);\n        let feeID = this._verifyFee(\n            fee,\n            current.for_sale,\n            sellBalance.getAmount(),\n            coreBalance.getAmount()\n        );\n        if (!feeID) {\n            return notify.addNotification({\n                message: \"Insufficient funds to pay fees\",\n                level: \"error\"\n            });\n        }\n\n        if (type === \"buy\" && lowestAsk) {\n            let diff = this.state.bid.price.toReal() / lowestAsk.getPrice();\n            if (diff > 1.2) {\n                this.refs.buy.show();\n                return this.setState({\n                    buyDiff: diff\n                });\n            }\n        } else if (type === \"sell\" && highestBid) {\n            let diff =\n                1 / (this.state.ask.price.toReal() / highestBid.getPrice());\n            if (diff > 1.2) {\n                this.refs.sell.show();\n                return this.setState({\n                    sellDiff: diff\n                });\n            }\n        }\n\n        let isPredictionMarket = sellAsset.getIn([\n            \"bitasset\",\n            \"is_prediction_market\"\n        ]);\n\n        if (current.for_sale.gt(sellBalance) && !isPredictionMarket) {\n            return notify.addNotification({\n                message:\n                    \"Insufficient funds to place order, you need at least \" +\n                    current.for_sale.getAmount({real: true}) +\n                    \" \" +\n                    sellAsset.get(\"symbol\"),\n                level: \"error\"\n            });\n        }\n        //\n        if (\n            !(\n                current.for_sale.getAmount() > 0 &&\n                current.to_receive.getAmount() > 0\n            )\n        ) {\n            return notify.addNotification({\n                message: \"Please enter a valid amount and price\",\n                level: \"error\"\n            });\n        }\n        //\n        if (type === \"sell\" && isPredictionMarket && short) {\n            return this._createPredictionShort(feeID);\n        }\n\n        this._createLimitOrder(type, feeID);\n    }\n\n    _createLimitOrder(type, feeID) {\n        let actionType = type === \"sell\" ? \"ask\" : \"bid\";\n\n        let current = this.state[actionType];\n\n        let expirationTime = null;\n        if (this.state.expirationType[actionType] === \"SPECIFIC\") {\n            expirationTime = this.EXPIRATIONS[\n                this.state.expirationType[actionType]\n            ].get(actionType);\n        } else {\n            expirationTime = this.EXPIRATIONS[\n                this.state.expirationType[actionType]\n            ].get();\n        }\n\n        const order = new LimitOrderCreate({\n            for_sale: current.for_sale,\n            expiration: new Date(expirationTime || false),\n            to_receive: current.to_receive,\n            seller: this.props.currentAccount.get(\"id\"),\n            fee: {\n                asset_id: feeID,\n                amount: 0\n            }\n        });\n        const {marketName, first} = market_utils.getMarketName(\n            this.props.baseAsset,\n            this.props.quoteAsset\n        );\n        const inverted = this.props.marketDirections.get(marketName);\n        const shouldFlip =\n            (inverted && first.get(\"id\") !== this.props.baseAsset.get(\"id\")) ||\n            (!inverted && first.get(\"id\") !== this.props.baseAsset.get(\"id\"));\n        if (shouldFlip) {\n            let setting = {};\n            setting[marketName] = !inverted;\n            SettingsActions.changeMarketDirection(setting);\n        }\n        console.log(\"order:\", JSON.stringify(order.toObject()));\n        return MarketsActions.createLimitOrder2(order)\n            .then(result => {\n                if (result.error) {\n                    if (result.error.message !== \"wallet locked\")\n                        notify.addNotification({\n                            message:\n                                \"Unknown error. Failed to place order for \" +\n                                current.to_receive.getAmount({real: true}) +\n                                \" \" +\n                                current.to_receive.asset_id,\n                            level: \"error\"\n                        });\n                }\n                // console.log(\"order success\");\n            })\n            .catch(e => {\n                console.log(\"order failed:\", e);\n            });\n    }\n\n    _createPredictionShort(feeID) {\n        let current = this.state.ask;\n        const order = new LimitOrderCreate({\n            for_sale: current.for_sale,\n            to_receive: current.to_receive,\n            seller: this.props.currentAccount.get(\"id\"),\n            fee: {\n                asset_id: feeID,\n                amount: 0\n            }\n        });\n\n        Promise.all([\n            FetchChain(\n                \"getAsset\",\n                this.props.quoteAsset.getIn([\n                    \"bitasset\",\n                    \"options\",\n                    \"short_backing_asset\"\n                ])\n            )\n        ]).then(assets => {\n            let [backingAsset] = assets;\n            let collateral = new Asset({\n                amount: order.amount_for_sale.getAmount(),\n                asset_id: backingAsset.get(\"id\"),\n                precision: backingAsset.get(\"precision\")\n            });\n\n            MarketsActions.createPredictionShort(order, collateral).then(\n                result => {\n                    if (result.error) {\n                        if (result.error.message !== \"wallet locked\")\n                            notify.addNotification({\n                                message:\n                                    \"Unknown error. Failed to place order for \" +\n                                    buyAssetAmount +\n                                    \" \" +\n                                    buyAsset.symbol,\n                                level: \"error\"\n                            });\n                    }\n                }\n            );\n        });\n    }\n\n    _forceBuy(type, feeAsset, sellBalance, coreBalance) {\n        let current = this.state[type === \"sell\" ? \"ask\" : \"bid\"];\n        // Convert fee to relevant asset fee and check if user has sufficient balance\n        sellBalance = current.for_sale.clone(\n            sellBalance\n                ? parseInt(ChainStore.getObject(sellBalance).get(\"balance\"), 10)\n                : 0\n        );\n        coreBalance = new Asset({\n            amount: coreBalance\n                ? parseInt(ChainStore.getObject(coreBalance).toJS().balance, 10)\n                : 0\n        });\n        let fee = this._getFee(feeAsset);\n        let feeID = this._verifyFee(\n            fee,\n            current.for_sale,\n            sellBalance.getAmount(),\n            coreBalance.getAmount()\n        );\n\n        if (feeID) {\n            this._createLimitOrder(type, feeID);\n        } else {\n            console.error(\"Unable to pay fees, aborting limit order creation\");\n        }\n    }\n\n    _forceSell(type, feeAsset, sellBalance, coreBalance) {\n        let current = this.state[type === \"sell\" ? \"ask\" : \"bid\"];\n        // Convert fee to relevant asset fee and check if user has sufficient balance\n        sellBalance = current.for_sale.clone(\n            sellBalance\n                ? parseInt(ChainStore.getObject(sellBalance).get(\"balance\"), 10)\n                : 0\n        );\n        coreBalance = new Asset({\n            amount: coreBalance\n                ? parseInt(ChainStore.getObject(coreBalance).toJS().balance, 10)\n                : 0\n        });\n        let fee = this._getFee(feeAsset);\n        let feeID = this._verifyFee(\n            fee,\n            current.for_sale,\n            sellBalance.getAmount(),\n            coreBalance.getAmount()\n        );\n\n        if (feeID) {\n            this._createLimitOrder(type, feeID);\n        } else {\n            console.error(\"Unable to pay fees, aborting limit order creation\");\n        }\n    }\n\n    _cancelLimitOrder(orderID, e) {\n        e.preventDefault();\n        let {currentAccount} = this.props;\n        MarketsActions.cancelLimitOrder(\n            currentAccount.get(\"id\"),\n            orderID // order id to cancel\n        );\n    }\n\n    // _changeBucketSize(size, e) {\n    //     if (e) e.preventDefault();\n    //     if (size !== this.props.bucketSize) {\n    //         MarketsActions.changeBucketSize.defer(size);\n    //         let currentSub = this.props.sub.split(\"_\");\n    //         MarketsActions.unSubscribeMarket(currentSub[0], currentSub[1]).then(\n    //             () => {\n    //                 this.props.subToMarket(this.props, size);\n    //             }\n    //         );\n    //     }\n    // }\n\n    _changeZoomPeriod(size, e) {\n        e.preventDefault();\n        if (size !== this.state.currentPeriod) {\n            this.setState({\n                currentPeriod: size\n            });\n            SettingsActions.changeViewSetting({\n                currentPeriod: size\n            });\n        }\n    }\n\n    _depthChartClick(base, quote, e) {\n        e.preventDefault();\n        let {bid, ask} = this.state;\n\n        bid.price = new Price({\n            base: this.state.bid.for_sale,\n            quote: this.state.bid.to_receive,\n            real: e.xAxis[0].value\n        });\n        bid.priceText = bid.price.toReal();\n\n        ask.price = new Price({\n            base: this.state.ask.to_receive,\n            quote: this.state.ask.for_sale,\n            real: e.xAxis[0].value\n        });\n        ask.priceText = ask.price.toReal();\n        let newState = {\n            bid,\n            ask,\n            depthLine: bid.price.toReal()\n        };\n\n        this._setForSale(bid, true) || this._setReceive(bid, true);\n        this._setReceive(ask) || this._setForSale(ask);\n\n        this._setPriceText(bid, true);\n        this._setPriceText(ask, false);\n        // if (bid.for_sale.)\n        this.setState(newState);\n    }\n\n    _flipBuySell() {\n        this.setState({\n            flipBuySell: !this.state.flipBuySell\n        });\n\n        SettingsActions.changeViewSetting({\n            flipBuySell: !this.state.flipBuySell\n        });\n    }\n\n    _toggleOpenBuySell() {\n        SettingsActions.changeViewSetting({\n            buySellOpen: !this.state.buySellOpen\n        });\n\n        this.setState({buySellOpen: !this.state.buySellOpen});\n    }\n\n    _toggleCharts() {\n        SettingsActions.changeViewSetting({\n            showDepthChart: !this.state.showDepthChart\n        });\n\n        this.setState({showDepthChart: !this.state.showDepthChart});\n    }\n\n    _toggleMarketPicker(asset) {\n        let showMarketPicker = !!asset ? true : false;\n        this.setState({\n            showMarketPicker,\n            marketPickerAsset: asset\n        });\n    }\n\n    _moveOrderBook() {\n        SettingsActions.changeViewSetting({\n            leftOrderBook: !this.state.leftOrderBook\n        });\n\n        this.setState({leftOrderBook: !this.state.leftOrderBook});\n    }\n\n    _currentPriceClick(type, price) {\n        const isBid = type === \"bid\";\n        let current = this.state[type];\n        current.price = price[isBid ? \"invert\" : \"clone\"]();\n        current.priceText = current.price.toReal();\n        if (isBid) {\n            this._setForSale(current, isBid) ||\n                this._setReceive(current, isBid);\n        } else {\n            this._setReceive(current, isBid) ||\n                this._setForSale(current, isBid);\n        }\n        this.forceUpdate();\n    }\n\n    _orderbookClick(order) {\n        const isBid = order.isBid();\n        /*\n        * Because we are using a bid order to construct an ask and vice versa,\n        * totalToReceive becomes forSale, and totalForSale becomes toReceive\n        */\n        let forSale = order.totalToReceive({noCache: true});\n        // let toReceive = order.totalForSale({noCache: true});\n        let toReceive = forSale.times(order.sellPrice());\n\n        let newPrice = new Price({\n            base: isBid ? toReceive : forSale,\n            quote: isBid ? forSale : toReceive\n        });\n\n        let current = this.state[isBid ? \"bid\" : \"ask\"];\n        current.price = newPrice;\n        current.priceText = newPrice.toReal();\n\n        let newState = {\n            // If isBid is true, newState defines a new ask order and vice versa\n            [isBid ? \"ask\" : \"bid\"]: {\n                for_sale: forSale,\n                forSaleText: forSale.getAmount({real: true}),\n                to_receive: toReceive,\n                toReceiveText: toReceive.getAmount({real: true}),\n                price: newPrice,\n                priceText: newPrice.toReal()\n            }\n        };\n\n        if (isBid) {\n            this._setForSale(current, isBid) ||\n                this._setReceive(current, isBid);\n        } else {\n            this._setReceive(current, isBid) ||\n                this._setForSale(current, isBid);\n        }\n        this.setState(newState);\n    }\n\n    _borrowQuote() {\n        this.refs.borrowQuote.show();\n    }\n\n    _borrowBase() {\n        this.refs.borrowBase.show();\n    }\n\n    _getSettlementInfo() {\n        let {lowestCallPrice, feedPrice, quoteAsset} = this.props;\n\n        let showCallLimit = false;\n        if (feedPrice) {\n            if (feedPrice.inverted) {\n                showCallLimit = lowestCallPrice <= feedPrice.toReal();\n            } else {\n                showCallLimit = lowestCallPrice >= feedPrice.toReal();\n            }\n        }\n        return !!(\n            showCallLimit &&\n            lowestCallPrice &&\n            !quoteAsset.getIn([\"bitasset\", \"is_prediction_market\"])\n        );\n    }\n\n    onChangeFeeAsset(type, e) {\n        e.preventDefault();\n        if (type === \"buy\") {\n            this.setState({\n                buyFeeAssetIdx: e.target.value\n            });\n\n            SettingsActions.changeViewSetting({\n                buyFeeAssetIdx: e.target.value\n            });\n        } else {\n            this.setState({\n                sellFeeAssetIdx: e.target.value\n            });\n\n            SettingsActions.changeViewSetting({\n                sellFeeAssetIdx: e.target.value\n            });\n        }\n    }\n\n    onChangeChartHeight({value, increase}) {\n        const newHeight = value\n            ? value\n            : this.state.chartHeight + (increase ? 20 : -20);\n        this.setState({\n            chartHeight: newHeight\n        });\n\n        SettingsActions.changeViewSetting({\n            chartHeight: newHeight\n        });\n    }\n\n    _toggleBuySellPosition() {\n        this.setState({\n            buySellTop: !this.state.buySellTop\n        });\n\n        SettingsActions.changeViewSetting({\n            buySellTop: !this.state.buySellTop\n        });\n    }\n\n    _setReceive(state, isBid) {\n        if (state.price.isValid() && state.for_sale.hasAmount()) {\n            state.to_receive = state.for_sale.times(state.price);\n            state.toReceiveText = state.to_receive\n                .getAmount({real: true})\n                .toString();\n            return true;\n        }\n        return false;\n    }\n\n    _setForSale(state, isBid) {\n        if (state.price.isValid() && state.to_receive.hasAmount()) {\n            state.for_sale = state.to_receive.times(state.price, true);\n            state.forSaleText = state.for_sale\n                .getAmount({real: true})\n                .toString();\n            return true;\n        }\n        return false;\n    }\n\n    _setPrice(state) {\n        if (state.for_sale.hasAmount() && state.to_receive.hasAmount()) {\n            state.price = new Price({\n                base: state.for_sale,\n                quote: state.to_receive\n            });\n            state.priceText = state.price.toReal().toString();\n            return true;\n        }\n        return false;\n    }\n\n    _setPriceText(state, isBid) {\n        const currentBase = state[isBid ? \"for_sale\" : \"to_receive\"];\n        const currentQuote = state[isBid ? \"to_receive\" : \"for_sale\"];\n        if (currentBase.hasAmount() && currentQuote.hasAmount()) {\n            state.priceText = new Price({\n                base: currentBase,\n                quote: currentQuote\n            })\n                .toReal()\n                .toString();\n        }\n    }\n\n    _onInputPrice(type, e) {\n        let current = this.state[type];\n        const isBid = type === \"bid\";\n        current.price = new Price({\n            base: current[isBid ? \"for_sale\" : \"to_receive\"],\n            quote: current[isBid ? \"to_receive\" : \"for_sale\"],\n            real: parseFloat(e.target.value) || 0\n        });\n\n        if (isBid) {\n            this._setForSale(current, isBid) ||\n                this._setReceive(current, isBid);\n        } else {\n            this._setReceive(current, isBid) ||\n                this._setForSale(current, isBid);\n        }\n\n        current.priceText = e.target.value;\n        this.forceUpdate();\n    }\n\n    _onInputSell(type, isBid, e) {\n        let current = this.state[type];\n        // const isBid = type === \"bid\";\n        current.for_sale.setAmount({real: parseFloat(e.target.value) || 0});\n        if (current.price.isValid()) {\n            this._setReceive(current, isBid);\n        } else {\n            this._setPrice(current);\n        }\n\n        current.forSaleText = e.target.value;\n        this._setPriceText(current, type === \"bid\");\n\n        this.forceUpdate();\n    }\n\n    _onInputReceive(type, isBid, e) {\n        let current = this.state[type];\n        // const isBid = type === \"bid\";\n        current.to_receive.setAmount({real: parseFloat(e.target.value) || 0});\n\n        if (current.price.isValid()) {\n            this._setForSale(current, isBid);\n        } else {\n            this._setPrice(current);\n        }\n\n        current.toReceiveText = e.target.value;\n        this._setPriceText(current, type === \"bid\");\n        this.forceUpdate();\n    }\n\n    isMarketFrozen() {\n        let {baseAsset, quoteAsset} = this.props;\n\n        let baseWhiteList = baseAsset\n            .getIn([\"options\", \"whitelist_markets\"])\n            .toJS();\n        let quoteWhiteList = quoteAsset\n            .getIn([\"options\", \"whitelist_markets\"])\n            .toJS();\n        let baseBlackList = baseAsset\n            .getIn([\"options\", \"blacklist_markets\"])\n            .toJS();\n        let quoteBlackList = quoteAsset\n            .getIn([\"options\", \"blacklist_markets\"])\n            .toJS();\n\n        if (\n            quoteWhiteList.length &&\n            quoteWhiteList.indexOf(baseAsset.get(\"id\")) === -1\n        ) {\n            return {isFrozen: true, frozenAsset: quoteAsset.get(\"symbol\")};\n        }\n        if (\n            baseWhiteList.length &&\n            baseWhiteList.indexOf(quoteAsset.get(\"id\")) === -1\n        ) {\n            return {isFrozen: true, frozenAsset: baseAsset.get(\"symbol\")};\n        }\n\n        if (\n            quoteBlackList.length &&\n            quoteBlackList.indexOf(baseAsset.get(\"id\")) !== -1\n        ) {\n            return {isFrozen: true, frozenAsset: quoteAsset.get(\"symbol\")};\n        }\n        if (\n            baseBlackList.length &&\n            baseBlackList.indexOf(quoteAsset.get(\"id\")) !== -1\n        ) {\n            return {isFrozen: true, frozenAsset: baseAsset.get(\"symbol\")};\n        }\n\n        return {isFrozen: false};\n    }\n\n    _toggleChat() {\n        SettingsActions.changeViewSetting({\n            viewChat: !this.props.viewChat\n        });\n    }\n\n    _toggleMiniChart() {\n        SettingsActions.changeViewSetting({\n            miniDepthChart: !this.props.miniDepthChart\n        });\n    }\n\n    _onGroupOrderLimitChange(e) {\n        if (e) e.preventDefault();\n        let groupLimit = parseInt(e.target.value);\n        MarketsActions.changeCurrentGroupLimit(groupLimit);\n        if (groupLimit !== this.props.currentGroupOrderLimit) {\n            MarketsActions.changeCurrentGroupLimit(groupLimit);\n            let currentSub = this.props.sub.split(\"_\");\n            MarketsActions.unSubscribeMarket(currentSub[0], currentSub[1]).then(\n                () => {\n                    this.props.subToMarket(\n                        this.props,\n                        this.props.bucketSize,\n                        groupLimit\n                    );\n                }\n            );\n        }\n    }\n\n    render() {\n        let {\n            currentAccount,\n            marketLimitOrders,\n            marketCallOrders,\n            marketData,\n            activeMarketHistory,\n            invertedCalls,\n            starredMarkets,\n            quoteAsset,\n            baseAsset,\n            lowestCallPrice,\n            marketStats,\n            marketReady,\n            marketSettleOrders,\n            bucketSize,\n            totals,\n            feedPrice,\n            buckets,\n            coreAsset,\n            trackedGroupsConfig,\n            currentGroupOrderLimit\n        } = this.props;\n\n        const {\n            combinedBids,\n            combinedAsks,\n            lowestAsk,\n            highestBid,\n            flatBids,\n            flatAsks,\n            flatCalls,\n            flatSettles,\n            groupedBids,\n            groupedAsks\n        } = marketData;\n\n        let {\n            bid,\n            ask,\n            leftOrderBook,\n            showDepthChart,\n            chartHeight,\n            buyDiff,\n            sellDiff,\n            width,\n            buySellTop\n        } = this.state;\n        const {isFrozen, frozenAsset} = this.isMarketFrozen();\n\n        let base = null,\n            quote = null,\n            accountBalance = null,\n            quoteBalance = null,\n            baseBalance = null,\n            coreBalance = null,\n            quoteSymbol,\n            baseSymbol,\n            showCallLimit = false,\n            latest,\n            changeClass;\n\n        const showVolumeChart = this.props.viewSettings.get(\n            \"showVolumeChart\",\n            true\n        );\n\n        if (quoteAsset.size && baseAsset.size && currentAccount.size) {\n            base = baseAsset;\n            quote = quoteAsset;\n            baseSymbol = base.get(\"symbol\");\n            quoteSymbol = quote.get(\"symbol\");\n\n            accountBalance = currentAccount.get(\"balances\").toJS();\n\n            if (accountBalance) {\n                for (let id in accountBalance) {\n                    if (id === quote.get(\"id\")) {\n                        quoteBalance = accountBalance[id];\n                    }\n                    if (id === base.get(\"id\")) {\n                        baseBalance = accountBalance[id];\n                    }\n                    if (id === \"1.3.0\") {\n                        coreBalance = accountBalance[id];\n                    }\n                }\n            }\n\n            showCallLimit = this._getSettlementInfo();\n        }\n\n        let quoteIsBitAsset = quoteAsset.get(\"bitasset_data_id\") ? true : false;\n        let baseIsBitAsset = baseAsset.get(\"bitasset_data_id\") ? true : false;\n\n        let spread =\n            lowestAsk && highestBid\n                ? lowestAsk.getPrice() - highestBid.getPrice()\n                : 0;\n\n        // Latest price\n        if (activeMarketHistory.size) {\n            let latest_two = activeMarketHistory.take(2);\n            latest = latest_two.first();\n            let second_latest = latest_two.last();\n\n            changeClass =\n                latest.getPrice() === second_latest.getPrice()\n                    ? \"\"\n                    : latest.getPrice() - second_latest.getPrice() > 0\n                        ? \"change-up\"\n                        : \"change-down\";\n        }\n\n        // Fees\n        if (!coreAsset || !Object.keys(this.state.feeStatus).length) {\n            return null;\n        }\n\n        let {\n            sellFeeAsset,\n            sellFeeAssets,\n            sellFee,\n            buyFeeAsset,\n            buyFeeAssets,\n            buyFee\n        } = this._getFeeAssets(quote, base, coreAsset);\n\n        // Decimals\n        let hasPrediction =\n            base.getIn([\"bitasset\", \"is_prediction_market\"]) ||\n            quote.getIn([\"bitasset\", \"is_prediction_market\"]);\n\n        let description = null;\n\n        if (hasPrediction) {\n            description = quoteAsset.getIn([\"options\", \"description\"]);\n            description = assetUtils.parseDescription(description).main;\n        }\n\n        let smallScreen = false;\n        if (width < 1000) {\n            smallScreen = true;\n            leftOrderBook = false;\n        }\n\n        let orderMultiplier = leftOrderBook ? 2 : 1;\n        const minChartHeight = 300;\n        const height = Math.max(\n            this.state.height > 1100 ? chartHeight : chartHeight - 125,\n            minChartHeight\n        );\n\n        let expirationType = this.state.expirationType;\n        let expirationCustomTime = this.state.expirationCustomTime;\n\n        let buyForm = isFrozen ? null : (\n            <BuySell\n                onBorrow={baseIsBitAsset ? this._borrowBase.bind(this) : null}\n                currentAccount={currentAccount}\n                backedCoin={this.props.backedCoins.find(\n                    a => a.symbol === base.get(\"symbol\")\n                )}\n                currentBridges={\n                    this.props.bridgeCoins.get(base.get(\"symbol\")) || null\n                }\n                smallScreen={smallScreen}\n                isOpen={this.state.buySellOpen}\n                onToggleOpen={this._toggleOpenBuySell.bind(this)}\n                className={cnames(\n                    \"small-12 no-padding middle-content\",\n                    leftOrderBook || smallScreen\n                        ? \"medium-6\"\n                        : \"medium-6 xlarge-4\",\n                    this.state.flipBuySell\n                        ? `order-${\n                              buySellTop ? 2 : 5 * orderMultiplier\n                          } sell-form`\n                        : `order-${\n                              buySellTop ? 1 : 4 * orderMultiplier\n                          } buy-form`\n                )}\n                type=\"bid\"\n                expirationType={expirationType[\"bid\"]}\n                expirations={this.EXPIRATIONS}\n                expirationCustomTime={expirationCustomTime[\"bid\"]}\n                onExpirationTypeChange={this._handleExpirationChange.bind(\n                    this,\n                    \"bid\"\n                )}\n                onExpirationCustomChange={this._handleCustomExpirationChange.bind(\n                    this,\n                    \"bid\"\n                )}\n                amount={bid.toReceiveText}\n                price={bid.priceText}\n                total={bid.forSaleText}\n                quote={quote}\n                base={base}\n                amountChange={this._onInputReceive.bind(this, \"bid\", true)}\n                priceChange={this._onInputPrice.bind(this, \"bid\")}\n                setPrice={this._currentPriceClick.bind(this)}\n                totalChange={this._onInputSell.bind(this, \"bid\", false)}\n                balance={baseBalance}\n                balanceId={base.get(\"id\")}\n                onSubmit={this._createLimitOrderConfirm.bind(\n                    this,\n                    quote,\n                    base,\n                    baseBalance,\n                    coreBalance,\n                    buyFeeAsset,\n                    \"buy\"\n                )}\n                balancePrecision={base.get(\"precision\")}\n                quotePrecision={quote.get(\"precision\")}\n                totalPrecision={base.get(\"precision\")}\n                currentPrice={lowestAsk.getPrice()}\n                currentPriceObject={lowestAsk}\n                account={currentAccount.get(\"name\")}\n                fee={buyFee}\n                hasFeeBalance={this.state.feeStatus[buyFee.asset_id].hasBalance}\n                feeAssets={buyFeeAssets}\n                feeAsset={buyFeeAsset}\n                onChangeFeeAsset={this.onChangeFeeAsset.bind(this, \"buy\")}\n                isPredictionMarket={base.getIn([\n                    \"bitasset\",\n                    \"is_prediction_market\"\n                ])}\n                onFlip={\n                    this.state._flipBuySell\n                        ? null\n                        : this._flipBuySell.bind(this)\n                }\n                onTogglePosition={\n                    !this.state._toggleBuySellPosition\n                        ? this._toggleBuySellPosition.bind(this)\n                        : null\n                }\n            />\n        );\n\n        let sellForm = isFrozen ? null : (\n            <BuySell\n                onBorrow={quoteIsBitAsset ? this._borrowQuote.bind(this) : null}\n                currentAccount={currentAccount}\n                backedCoin={this.props.backedCoins.find(\n                    a => a.symbol === quote.get(\"symbol\")\n                )}\n                currentBridges={\n                    this.props.bridgeCoins.get(quote.get(\"symbol\")) || null\n                }\n                smallScreen={smallScreen}\n                isOpen={this.state.buySellOpen}\n                onToggleOpen={this._toggleOpenBuySell.bind(this)}\n                className={cnames(\n                    \"small-12 no-padding middle-content\",\n                    leftOrderBook || smallScreen\n                        ? \"medium-6\"\n                        : \"medium-6 xlarge-4\",\n                    this.state.flipBuySell\n                        ? `order-${\n                              buySellTop ? 1 : 4 * orderMultiplier\n                          } buy-form`\n                        : `order-${\n                              buySellTop ? 2 : 5 * orderMultiplier\n                          } sell-form`\n                )}\n                type=\"ask\"\n                amount={ask.forSaleText}\n                price={ask.priceText}\n                total={ask.toReceiveText}\n                quote={quote}\n                base={base}\n                expirationType={expirationType[\"ask\"]}\n                expirations={this.EXPIRATIONS}\n                expirationCustomTime={expirationCustomTime[\"ask\"]}\n                onExpirationTypeChange={this._handleExpirationChange.bind(\n                    this,\n                    \"ask\"\n                )}\n                onExpirationCustomChange={this._handleCustomExpirationChange.bind(\n                    this,\n                    \"ask\"\n                )}\n                amountChange={this._onInputSell.bind(this, \"ask\", false)}\n                priceChange={this._onInputPrice.bind(this, \"ask\")}\n                setPrice={this._currentPriceClick.bind(this)}\n                totalChange={this._onInputReceive.bind(this, \"ask\", true)}\n                balance={quoteBalance}\n                balanceId={quote.get(\"id\")}\n                onSubmit={this._createLimitOrderConfirm.bind(\n                    this,\n                    base,\n                    quote,\n                    quoteBalance,\n                    coreBalance,\n                    sellFeeAsset,\n                    \"sell\"\n                )}\n                balancePrecision={quote.get(\"precision\")}\n                quotePrecision={quote.get(\"precision\")}\n                totalPrecision={base.get(\"precision\")}\n                currentPrice={highestBid.getPrice()}\n                currentPriceObject={highestBid}\n                account={currentAccount.get(\"name\")}\n                fee={sellFee}\n                hasFeeBalance={\n                    this.state.feeStatus[sellFee.asset_id].hasBalance\n                }\n                feeAssets={sellFeeAssets}\n                feeAsset={sellFeeAsset}\n                onChangeFeeAsset={this.onChangeFeeAsset.bind(this, \"sell\")}\n                isPredictionMarket={quote.getIn([\n                    \"bitasset\",\n                    \"is_prediction_market\"\n                ])}\n                onFlip={\n                    !this.state._flipBuySell\n                        ? this._flipBuySell.bind(this)\n                        : null\n                }\n                onTogglePosition={\n                    !this.state._toggleBuySellPosition\n                        ? this._toggleBuySellPosition.bind(this)\n                        : null\n                }\n            />\n        );\n\n        let orderBook = (\n            <OrderBook\n                latest={latest && latest.getPrice()}\n                changeClass={changeClass}\n                orders={marketLimitOrders}\n                calls={marketCallOrders}\n                invertedCalls={invertedCalls}\n                combinedBids={combinedBids}\n                combinedAsks={combinedAsks}\n                highestBid={highestBid}\n                lowestAsk={lowestAsk}\n                totalBids={totals.bid}\n                totalAsks={totals.ask}\n                base={base}\n                quote={quote}\n                baseSymbol={baseSymbol}\n                quoteSymbol={quoteSymbol}\n                onClick={this._orderbookClick.bind(this)}\n                horizontal={!leftOrderBook}\n                moveOrderBook={this._moveOrderBook.bind(this)}\n                flipOrderBook={this.props.viewSettings.get(\"flipOrderBook\")}\n                marketReady={marketReady}\n                wrapperClass={`order-${buySellTop ? 3 : 1} xlarge-order-${\n                    buySellTop ? 4 : 1\n                }`}\n                currentAccount={this.props.currentAccount.get(\"id\")}\n                handleGroupOrderLimitChange={this._onGroupOrderLimitChange.bind(\n                    this\n                )}\n                trackedGroupsConfig={trackedGroupsConfig}\n                currentGroupOrderLimit={currentGroupOrderLimit}\n                groupedBids={groupedBids}\n                groupedAsks={groupedAsks}\n            />\n        );\n\n        return (\n            <div className=\"grid-block vertical\">\n                {!this.props.marketReady ? <LoadingIndicator /> : null}\n                <ExchangeHeader\n                    account={this.props.currentAccount}\n                    quoteAsset={quoteAsset}\n                    baseAsset={baseAsset}\n                    hasPrediction={hasPrediction}\n                    starredMarkets={starredMarkets}\n                    lowestAsk={lowestAsk}\n                    highestBid={highestBid}\n                    lowestCallPrice={lowestCallPrice}\n                    showCallLimit={showCallLimit}\n                    feedPrice={feedPrice}\n                    marketReady={marketReady}\n                    latestPrice={latest && latest.getPrice()}\n                    showDepthChart={showDepthChart}\n                    marketStats={marketStats}\n                    onToggleCharts={this._toggleCharts.bind(this)}\n                    onToggleMarketPicker={this._toggleMarketPicker.bind(this)}\n                    showVolumeChart={showVolumeChart}\n                    chartHeight={chartHeight}\n                    onChangeChartHeight={this.onChangeChartHeight.bind(this)}\n                />\n\n                <div className=\"grid-block page-layout market-layout\">\n                    {!!this.state.showMarketPicker ? (\n                        <MarketPicker\n                            marketPickerAsset={this.state.marketPickerAsset}\n                            onToggleMarketPicker={this._toggleMarketPicker.bind(\n                                this\n                            )}\n                            {...this.props}\n                        />\n                    ) : null}\n                    <AccountNotifications />\n                    {/* Main vertical block with content */}\n\n                    {/* Left Column - Open Orders */}\n                    {leftOrderBook ? (\n                        <div className=\"grid-block left-column shrink no-overflow\">\n                            {orderBook}\n                        </div>\n                    ) : null}\n\n                    {/* Center Column */}\n                    <div\n                        style={{paddingTop: 0}}\n                        className={cnames(\n                            \"grid-block main-content vertical no-overflow\"\n                        )}\n                    >\n                        <div\n                            className=\"grid-block vertical no-padding ps-container\"\n                            id=\"CenterContent\"\n                            ref=\"center\"\n                        >\n                            {!showDepthChart ? (\n                                <div\n                                    className=\"grid-block shrink no-overflow\"\n                                    id=\"market-charts\"\n                                >\n                                    {/* Price history chart */}\n                                    <TradingViewPriceChart\n                                        locale={this.props.locale}\n                                        dataFeed={this.props.dataFeed}\n                                        baseSymbol={baseSymbol}\n                                        quoteSymbol={quoteSymbol}\n                                        leftOrderBook={leftOrderBook}\n                                        marketReady={marketReady}\n                                        theme={this.props.settings.get(\n                                            \"themes\"\n                                        )}\n                                        buckets={buckets}\n                                        bucketSize={bucketSize}\n                                        currentPeriod={this.state.currentPeriod}\n                                        chartHeight={\n                                            this.state.height > 1100\n                                                ? chartHeight\n                                                : chartHeight - 150\n                                        }\n                                        mobile={width < 800}\n                                    />\n                                </div>\n                            ) : (\n                                <div className=\"grid-block vertical no-padding shrink\">\n                                    <DepthHighChart\n                                        marketReady={marketReady}\n                                        orders={marketLimitOrders}\n                                        showCallLimit={showCallLimit}\n                                        call_orders={marketCallOrders}\n                                        flat_asks={flatAsks}\n                                        flat_bids={flatBids}\n                                        flat_calls={\n                                            showCallLimit ? flatCalls : []\n                                        }\n                                        flat_settles={\n                                            this.props.settings.get(\n                                                \"showSettles\"\n                                            ) && flatSettles\n                                        }\n                                        settles={marketSettleOrders}\n                                        invertedCalls={invertedCalls}\n                                        totalBids={totals.bid}\n                                        totalAsks={totals.ask}\n                                        base={base}\n                                        quote={quote}\n                                        height={\n                                            this.state.height > 1100\n                                                ? chartHeight\n                                                : chartHeight - 150\n                                        }\n                                        onClick={this._depthChartClick.bind(\n                                            this,\n                                            base,\n                                            quote\n                                        )}\n                                        feedPrice={\n                                            !hasPrediction &&\n                                            feedPrice &&\n                                            feedPrice.toReal()\n                                        }\n                                        spread={spread}\n                                        LCP={\n                                            showCallLimit\n                                                ? lowestCallPrice\n                                                : null\n                                        }\n                                        leftOrderBook={leftOrderBook}\n                                        hasPrediction={hasPrediction}\n                                        noFrame={false}\n                                        verticalOrderbook={leftOrderBook}\n                                        theme={this.props.settings.get(\n                                            \"themes\"\n                                        )}\n                                        centerRef={this.refs.center}\n                                    />\n                                </div>\n                            )}\n\n                            <div className=\"grid-block no-overflow wrap shrink\">\n                                {hasPrediction ? (\n                                    <div\n                                        className=\"small-12 no-overflow\"\n                                        style={{\n                                            margin: \"0 10px\",\n                                            lineHeight: \"1.2rem\"\n                                        }}\n                                    >\n                                        <p>{description}</p>\n                                    </div>\n                                ) : null}\n\n                                {isFrozen ? (\n                                    <div\n                                        className=\"error small-12 no-overflow\"\n                                        style={{\n                                            margin: \"0 10px\",\n                                            lineHeight: \"1.2rem\"\n                                        }}\n                                    >\n                                        <Translate\n                                            content=\"exchange.market_frozen\"\n                                            asset={frozenAsset}\n                                            component=\"p\"\n                                        />\n                                    </div>\n                                ) : null}\n                                {buyForm}\n                                {sellForm}\n\n                                <MarketHistory\n                                    className={cnames(\n                                        !smallScreen && !leftOrderBook\n                                            ? \"medium-6 xlarge-4\"\n                                            : \"\",\n                                        \"no-padding no-overflow middle-content small-12 medium-6 order-5 xlarge-order-3\"\n                                    )}\n                                    headerStyle={{paddingTop: 0}}\n                                    history={activeMarketHistory}\n                                    currentAccount={currentAccount}\n                                    myHistory={currentAccount.get(\"history\")}\n                                    base={base}\n                                    quote={quote}\n                                    baseSymbol={baseSymbol}\n                                    quoteSymbol={quoteSymbol}\n                                    marketReady={marketReady}\n                                />\n\n                                {!leftOrderBook ? orderBook : null}\n\n                                <ConfirmOrderModal\n                                    type=\"buy\"\n                                    ref=\"buy\"\n                                    onForce={this._forceBuy.bind(\n                                        this,\n                                        \"buy\",\n                                        buyFeeAsset,\n                                        baseBalance,\n                                        coreBalance\n                                    )}\n                                    diff={buyDiff}\n                                    hasOrders={combinedAsks.length > 0}\n                                />\n\n                                <ConfirmOrderModal\n                                    type=\"sell\"\n                                    ref=\"sell\"\n                                    onForce={this._forceSell.bind(\n                                        this,\n                                        \"sell\",\n                                        sellFeeAsset,\n                                        quoteBalance,\n                                        coreBalance\n                                    )}\n                                    diff={sellDiff}\n                                    hasOrders={combinedBids.length > 0}\n                                />\n\n                                {marketLimitOrders.size > 0 && base && quote ? (\n                                    <MyOpenOrders\n                                        smallScreen={this.props.smallScreen}\n                                        className={cnames(\n                                            !smallScreen && !leftOrderBook\n                                                ? \"medium-6 xlarge-4\"\n                                                : \"\",\n                                            `small-12 medium-6 no-padding align-spaced ps-container middle-content order-${\n                                                buySellTop ? 6 : 6\n                                            }`\n                                        )}\n                                        key=\"open_orders\"\n                                        orders={marketLimitOrders}\n                                        settleOrders={marketSettleOrders}\n                                        currentAccount={currentAccount}\n                                        base={base}\n                                        quote={quote}\n                                        baseSymbol={baseSymbol}\n                                        quoteSymbol={quoteSymbol}\n                                        activeTab={this.props.viewSettings.get(\n                                            \"ordersTab\"\n                                        )}\n                                        onCancel={this._cancelLimitOrder.bind(\n                                            this\n                                        )}\n                                        flipMyOrders={this.props.viewSettings.get(\n                                            \"flipMyOrders\"\n                                        )}\n                                        feedPrice={this.props.feedPrice}\n                                    />\n                                ) : null}\n                            </div>\n                        </div>\n                        {/* end CenterContent */}\n                    </div>\n                    {/* End of Main Content Column */}\n\n                    {/* Right Column - Market History */}\n                    <div\n                        className=\"grid-block shrink right-column no-overflow vertical show-for-medium\"\n                        style={{paddingTop: 0, minWidth: 358, maxWidth: 400}}\n                    >\n                        {/* Market History */}\n                        <div className=\"grid-block no-padding no-margin vertical\">\n                            <MyMarkets\n                                className=\"left-order-book no-padding no-overflow\"\n                                headerStyle={{paddingTop: 0}}\n                                columns={[\n                                    {name: \"star\", index: 1},\n                                    {name: \"market\", index: 2},\n                                    {name: \"vol\", index: 3},\n                                    {name: \"price\", index: 4},\n                                    {name: \"change\", index: 5}\n                                ]}\n                                findColumns={[\n                                    {name: \"market\", index: 1},\n                                    {name: \"issuer\", index: 2},\n                                    {name: \"vol\", index: 3},\n                                    {name: \"add\", index: 4}\n                                ]}\n                                current={`${quoteSymbol}_${baseSymbol}`}\n                                location={this.props.location}\n                                history={this.props.history}\n                            />\n                        </div>\n\n                        <div\n                            style={{\n                                padding: !this.props.viewChat ? 0 : \"0 0 0 0\"\n                            }}\n                            className=\"grid-block no-margin vertical shrink\"\n                        >\n                            <div\n                                onClick={this._toggleChat.bind(this)}\n                                className=\"exchange-content-header clickable\"\n                                style={{textAlign: \"left\", paddingRight: 10}}\n                            >\n                                {this.props.viewChat ? (\n                                    <span>&#9660;</span>\n                                ) : (\n                                    <span>&#9650;</span>\n                                )}\n                                <Translate content=\"exchange.trollbox\" />\n                            </div>\n\n                            {this.props.viewChat ? (\n                                <ChatBro height={\"300px\"} />\n                            ) : null}\n                        </div>\n\n                        <div\n                            style={{\n                                padding: !this.props.miniDepthChart\n                                    ? 0\n                                    : \"0 0 40px 0\"\n                            }}\n                            className=\"grid-block no-margin vertical shrink\"\n                        >\n                            <div\n                                onClick={this._toggleMiniChart.bind(this)}\n                                className=\"exchange-content-header clickable\"\n                                style={{textAlign: \"left\", paddingRight: 10}}\n                            >\n                                {this.props.miniDepthChart ? (\n                                    <span>&#9660;</span>\n                                ) : (\n                                    <span>&#9650;</span>\n                                )}\n                            </div>\n                            {this.props.miniDepthChart ? (\n                                <DepthHighChart\n                                    marketReady={marketReady}\n                                    orders={marketLimitOrders}\n                                    showCallLimit={showCallLimit}\n                                    call_orders={marketCallOrders}\n                                    flat_asks={flatAsks}\n                                    flat_bids={flatBids}\n                                    flat_calls={showCallLimit ? flatCalls : []}\n                                    flat_settles={\n                                        this.props.settings.get(\n                                            \"showSettles\"\n                                        ) && flatSettles\n                                    }\n                                    settles={marketSettleOrders}\n                                    invertedCalls={invertedCalls}\n                                    totalBids={totals.bid}\n                                    totalAsks={totals.ask}\n                                    base={base}\n                                    quote={quote}\n                                    height={200}\n                                    onClick={this._depthChartClick.bind(\n                                        this,\n                                        base,\n                                        quote\n                                    )}\n                                    settlementPrice={\n                                        !hasPrediction &&\n                                        feedPrice &&\n                                        feedPrice.toReal()\n                                    }\n                                    spread={spread}\n                                    LCP={showCallLimit ? lowestCallPrice : null}\n                                    leftOrderBook={leftOrderBook}\n                                    hasPrediction={hasPrediction}\n                                    noText={true}\n                                    theme={this.props.settings.get(\"themes\")}\n                                />\n                            ) : null}\n                        </div>\n                    </div>\n\n                    {quoteIsBitAsset ? (\n                        <BorrowModal\n                            ref=\"borrowQuote\"\n                            modalId={\n                                \"borrow_modal_quote_\" + quoteAsset.get(\"id\")\n                            }\n                            quote_asset={quoteAsset.get(\"id\")}\n                            backing_asset={quoteAsset.getIn([\n                                \"bitasset\",\n                                \"options\",\n                                \"short_backing_asset\"\n                            ])}\n                            account={currentAccount}\n                        />\n                    ) : null}\n                    {baseIsBitAsset ? (\n                        <BorrowModal\n                            ref=\"borrowBase\"\n                            modalId={\"borrow_modal_base_\" + baseAsset.get(\"id\")}\n                            quote_asset={baseAsset.get(\"id\")}\n                            backing_asset={baseAsset.getIn([\n                                \"bitasset\",\n                                \"options\",\n                                \"short_backing_asset\"\n                            ])}\n                            account={currentAccount}\n                        />\n                    ) : null}\n                    {/* End of Second Vertical Block */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Exchange;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Ps from \"perfect-scrollbar\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport classnames from \"classnames\";\nimport PriceText from \"../Utility/PriceText\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\nimport AssetName from \"../Utility/AssetName\";\nimport {StickyTable} from \"react-sticky-table\";\nimport Icon from \"../Icon/Icon\";\nconst counterpart = require(\"counterpart\");\n\nclass OrderBookRowVertical extends React.Component {\n    shouldComponentUpdate(np) {\n        if (np.order.market_base !== this.props.order.market_base) return false;\n        return (\n            np.order.ne(this.props.order) ||\n            np.index !== this.props.index ||\n            np.currentAccount !== this.props.currentAccount\n        );\n    }\n\n    render() {\n        let {order, quote, base, final} = this.props;\n        const isBid = order.isBid();\n        const isCall = order.isCall();\n        let integerClass = isCall\n            ? \"orderHistoryCall\"\n            : isBid\n                ? \"orderHistoryBid\"\n                : \"orderHistoryAsk\";\n\n        let price = (\n            <PriceText price={order.getPrice()} quote={quote} base={base} />\n        );\n        return (\n            <div\n                onClick={this.props.onClick}\n                className={classnames(\n                    \"sticky-table-row order-row\",\n                    {\"final-row\": final},\n                    {\"my-order\": order.isMine(this.props.currentAccount)}\n                )}\n            >\n                <div className=\"cell left\">\n                    {utils.format_number(\n                        order[\n                            isBid ? \"amountForSale\" : \"amountToReceive\"\n                        ]().getAmount({real: true}),\n                        base.get(\"precision\")\n                    )}\n                </div>\n                <div className=\"cell\">\n                    {utils.format_number(\n                        order[\n                            isBid ? \"amountToReceive\" : \"amountForSale\"\n                        ]().getAmount({real: true}),\n                        quote.get(\"precision\")\n                    )}\n                </div>\n                <div className={`cell ${integerClass} right`}>{price}</div>\n            </div>\n        );\n    }\n}\n\nconst elemHeight = elem => elem.getBoundingClientRect().height;\n\nclass OrderBookRowHorizontal extends React.Component {\n    shouldComponentUpdate(np) {\n        return (\n            np.order.ne(this.props.order) ||\n            np.position !== this.props.position ||\n            np.index !== this.props.index ||\n            np.currentAccount !== this.props.currentAccount\n        );\n    }\n\n    render() {\n        let {order, quote, base, position} = this.props;\n        const isBid = order.isBid();\n        const isCall = order.isCall();\n\n        let integerClass = isCall\n            ? \"orderHistoryCall\"\n            : isBid\n                ? \"orderHistoryBid\"\n                : \"orderHistoryAsk\";\n\n        let price = (\n            <PriceText price={order.getPrice()} quote={quote} base={base} />\n        );\n        let amount = isBid\n            ? utils.format_number(\n                  order.amountToReceive().getAmount({real: true}),\n                  quote.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.amountForSale().getAmount({real: true}),\n                  quote.get(\"precision\")\n              );\n        let value = isBid\n            ? utils.format_number(\n                  order.amountForSale().getAmount({real: true}),\n                  base.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.amountToReceive().getAmount({real: true}),\n                  base.get(\"precision\")\n              );\n        let total = isBid\n            ? utils.format_number(\n                  order.totalForSale().getAmount({real: true}),\n                  base.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.totalToReceive().getAmount({real: true}),\n                  base.get(\"precision\")\n              );\n\n        return (\n            <tr\n                onClick={this.props.onClick}\n                className={\n                    order.isMine(this.props.currentAccount) ? \"my-order\" : \"\"\n                }\n            >\n                {position === \"left\" ? (\n                    <td>{total}</td>\n                ) : (\n                    <td style={{width: \"25%\"}} className={integerClass}>\n                        {price}\n                    </td>\n                )}\n                <td>{position === \"left\" ? value : amount}</td>\n                <td>{position === \"left\" ? amount : value}</td>\n                {position === \"right\" ? (\n                    <td>{total}</td>\n                ) : (\n                    <td style={{width: \"25%\"}} className={integerClass}>\n                        {price}\n                    </td>\n                )}\n            </tr>\n        );\n    }\n}\n\nclass GroupedOrderBookRowVertical extends React.Component {\n    shouldComponentUpdate(np) {\n        if (np.order.market_base !== this.props.order.market_base) return false;\n        return (\n            np.order.ne(this.props.order) ||\n            np.index !== this.props.index ||\n            np.currentAccount !== this.props.currentAccount\n        );\n    }\n\n    render() {\n        let {order, quote, base, final} = this.props;\n        const isBid = order.isBid();\n        let integerClass = isBid ? \"orderHistoryBid\" : \"orderHistoryAsk\";\n\n        let price = (\n            <PriceText price={order.getPrice()} quote={quote} base={base} />\n        );\n        return (\n            <div\n                onClick={this.props.onClick}\n                className={classnames(\"sticky-table-row order-row\", {\n                    \"final-row\": final\n                })}\n            >\n                <div className=\"cell left\">\n                    {utils.format_number(\n                        order[\n                            isBid ? \"amountForSale\" : \"amountToReceive\"\n                        ]().getAmount({real: true}),\n                        base.get(\"precision\")\n                    )}\n                </div>\n                <div className=\"cell\">\n                    {utils.format_number(\n                        order[\n                            isBid ? \"amountToReceive\" : \"amountForSale\"\n                        ]().getAmount({real: true}),\n                        quote.get(\"precision\")\n                    )}\n                </div>\n                <div className={`cell ${integerClass} right`}>{price}</div>\n            </div>\n        );\n    }\n}\n\nclass GroupedOrderBookRowHorizontal extends React.Component {\n    shouldComponentUpdate(np) {\n        return (\n            np.order.ne(this.props.order) ||\n            np.position !== this.props.position ||\n            np.index !== this.props.index ||\n            np.currentAccount !== this.props.currentAccount\n        );\n    }\n\n    render() {\n        let {order, quote, base, position} = this.props;\n        const isBid = order.isBid();\n\n        let integerClass = isBid ? \"orderHistoryBid\" : \"orderHistoryAsk\";\n\n        let price = (\n            <PriceText price={order.getPrice()} quote={quote} base={base} />\n        );\n        let amount = isBid\n            ? utils.format_number(\n                  order.amountToReceive().getAmount({real: true}),\n                  quote.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.amountForSale().getAmount({real: true}),\n                  quote.get(\"precision\")\n              );\n        let value = isBid\n            ? utils.format_number(\n                  order.amountForSale().getAmount({real: true}),\n                  base.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.amountToReceive().getAmount({real: true}),\n                  base.get(\"precision\")\n              );\n        let total = isBid\n            ? utils.format_number(\n                  order.totalForSale().getAmount({real: true}),\n                  base.get(\"precision\")\n              )\n            : utils.format_number(\n                  order.totalToReceive().getAmount({real: true}),\n                  base.get(\"precision\")\n              );\n\n        return (\n            <tr onClick={this.props.onClick}>\n                {position === \"left\" ? (\n                    <td>{total}</td>\n                ) : (\n                    <td style={{width: \"25%\"}} className={integerClass}>\n                        {price}\n                    </td>\n                )}\n                <td>{position === \"left\" ? value : amount}</td>\n                <td>{position === \"left\" ? amount : value}</td>\n                {position === \"right\" ? (\n                    <td>{total}</td>\n                ) : (\n                    <td style={{width: \"25%\"}} className={integerClass}>\n                        {price}\n                    </td>\n                )}\n            </tr>\n        );\n    }\n}\n\nclass GroupOrderLimitSelector extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            groupLimit: \"\"\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({groupLimit: this.props.currentGroupOrderLimit});\n    }\n\n    render() {\n        const noGroupsAvailable = this.props.trackedGroupsConfig.length === 0;\n        const trackedGroupsOptionsList = this.props.trackedGroupsConfig.map(\n            key => (\n                <option value={key} key={key}>\n                    {`${key / 100}%`}\n                </option>\n            )\n        );\n\n        return (\n            <select\n                dir=\"rtl\"\n                value={this.state.groupLimit}\n                onChange={this.props.handleGroupOrderLimitChange}\n                data-tip={\n                    noGroupsAvailable\n                        ? counterpart.translate(\"tooltip.no_groups_available\")\n                        : null\n                }\n                style={noGroupsAvailable ? {cursor: \"not-allowed\"} : null}\n            >\n                <Translate\n                    content=\"exchange.group_order_limit\"\n                    component=\"option\"\n                    value=\"0\"\n                />\n                {trackedGroupsOptionsList}\n            </select>\n        );\n    }\n}\n\nclass OrderBook extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            flip: props.flipOrderBook,\n            showAllBids: false,\n            showAllAsks: false,\n            rowCount: 20,\n            autoScroll: true\n        };\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.marketReady) return false;\n        return true;\n    }\n    //     console.log(\"calls changed:\", !Immutable.is(nextProps.calls, this.props.calls), nextProps.calls && nextProps.calls.toJS(), this.props.calls && this.props.calls.toJS());\n    //     const callsChanged = didOrdersChange(nextProps.calls, this.props.calls);\n    //     const limitsChanged = didOrdersChange(nextProps.orders, this.props.orders);\n    //     console.log(\"callsChanged:\", callsChanged, \"limitsChanged\", limitsChanged);\n    //     return (\n    //         !Immutable.is(nextProps.orders, this.props.orders) ||\n    //         !Immutable.is(nextProps.calls, this.props.calls) ||\n    //         nextProps.horizontal !== this.props.horizontal ||\n    //         !utils.are_equal_shallow(nextProps.latest, this.props.latest) ||\n    //         nextProps.smallScreen !== this.props.smallScreen ||\n    //         nextProps.wrapperClass !== this.props.wrapperClass ||\n    //         !utils.are_equal_shallow(nextState, this.state)\n    //     );\n    // }\n\n    componentWillReceiveProps(nextProps) {\n        // Change of market or direction\n        if (\n            nextProps.base.get(\"id\") !== this.props.base.get(\"id\") ||\n            nextProps.quote.get(\"id\") !== this.props.quote.get(\"id\")\n        ) {\n            if (this.refs.askTransition) {\n                this.refs.askTransition.resetAnimation();\n                if (this.refs.hor_asks) this.refs.hor_asks.scrollTop = 0;\n                if (this.refs.hor_bids) this.refs.hor_bids.scrollTop = 0;\n            }\n\n            if (this.refs.bidTransition) {\n                this.refs.bidTransition.resetAnimation();\n            }\n\n            if (this.refs.vert_bids) this.refs.vert_bids.scrollTop = 0;\n\n            if (!this.props.horizontal) {\n                this.setState({autoScroll: true});\n            }\n        }\n\n        if (\n            !utils.are_equal_shallow(\n                nextProps.combinedAsks,\n                this.props.combinedAsks\n            ) ||\n            !utils.are_equal_shallow(\n                nextProps.combinedBids,\n                this.props.combinedBids\n            )\n        ) {\n            this.setState({}, () => {\n                this.psUpdate();\n            });\n        }\n    }\n\n    queryStickyTable = query =>\n        this.refs.vertical_sticky_table.table.querySelector(query);\n\n    verticalScrollBar = () => this.queryStickyTable(\"#y-scrollbar\");\n\n    componentDidMount() {\n        if (!this.props.horizontal) {\n            Ps.initialize(this.verticalScrollBar());\n            this.centerVerticalScrollBar();\n        } else {\n            let bidsContainer = this.refs.hor_bids;\n            Ps.initialize(bidsContainer);\n            let asksContainer = this.refs.hor_asks;\n            Ps.initialize(asksContainer);\n        }\n    }\n\n    componentWillUpdate() {\n        if (!this.props.horizontal) {\n            const scrollableContainer = this.queryStickyTable(\n                \"#sticky-table-y-wrapper\"\n            );\n\n            const centerTextContainer = this.refs.center_text;\n            const centeringOffset = 21;\n            const scrollTo =\n                centerTextContainer.offsetTop -\n                elemHeight(scrollableContainer) / 2 +\n                centeringOffset;\n\n            this.offset = scrollableContainer.scrollTop - scrollTo;\n        }\n    }\n\n    centerVerticalScrollBar() {\n        if (!this.props.horizontal) {\n            const scrollableContainer = this.queryStickyTable(\n                \"#sticky-table-y-wrapper\"\n            );\n            const centerTextContainer = this.refs.center_text;\n            const centeringOffset = 21;\n            const offset =\n                !this.state.autoScroll && this.offset ? this.offset : 0;\n            const scrollTo =\n                centerTextContainer.offsetTop -\n                elemHeight(scrollableContainer) / 2 +\n                centeringOffset +\n                offset;\n\n            this.setState(\n                {ownScroll: true},\n                () => (scrollableContainer.scrollTop = scrollTo)\n            );\n        }\n    }\n\n    psUpdate() {\n        if (!this.props.horizontal) {\n            Ps.update(this.verticalScrollBar());\n            this.centerVerticalScrollBar();\n        } else {\n            let bidsContainer = this.refs.hor_bids;\n            Ps.update(bidsContainer);\n            let asksContainer = this.refs.hor_asks;\n            Ps.update(asksContainer);\n        }\n    }\n\n    _flipBuySell() {\n        SettingsActions.changeViewSetting({\n            flipOrderBook: !this.state.flip\n        });\n\n        this.setState({flip: !this.state.flip});\n    }\n\n    _onToggleShowAll(type) {\n        if (type === \"asks\") {\n            this.setState({\n                showAllAsks: !this.state.showAllAsks\n            });\n\n            if (this.state.showAllAsks) {\n                this.refs.hor_asks.scrollTop = 0;\n            }\n        } else {\n            this.setState({\n                showAllBids: !this.state.showAllBids\n            });\n\n            if (this.state.showAllBids) {\n                this.refs.hor_bids.scrollTop = 0;\n            }\n        }\n    }\n\n    toggleSpreadValue = () => {\n        this.setState({\n            displaySpreadAsPercentage: !this.state.displaySpreadAsPercentage\n        });\n    };\n\n    toggleAutoScroll = () => {\n        const newState = {autoScroll: !this.state.autoScroll};\n        if (newState.autoScroll)\n            this.setState(newState, this.centerVerticalScrollBar);\n        else this.setState(newState);\n    };\n\n    render() {\n        let {\n            combinedBids,\n            combinedAsks,\n            highestBid,\n            lowestAsk,\n            quote,\n            base,\n            totalAsks,\n            totalBids,\n            quoteSymbol,\n            baseSymbol,\n            horizontal,\n            trackedGroupsConfig,\n            currentGroupOrderLimit,\n            handleGroupOrderLimitChange,\n            groupedBids,\n            groupedAsks\n        } = this.props;\n        let {\n            showAllAsks,\n            showAllBids,\n            rowCount,\n            displaySpreadAsPercentage\n        } = this.state;\n        const noOrders = !lowestAsk.sell_price && !highestBid.sell_price;\n        const hasAskAndBids = !!(lowestAsk.sell_price && highestBid.sell_price);\n        const spread =\n            hasAskAndBids &&\n            (displaySpreadAsPercentage ? (\n                `${(\n                    100 *\n                    (lowestAsk._real_price / highestBid._real_price - 1)\n                ).toFixed(2)}%`\n            ) : (\n                <PriceText\n                    price={lowestAsk._real_price - highestBid._real_price}\n                    base={base}\n                    quote={quote}\n                />\n            ));\n        let bidRows = null,\n            askRows = null;\n        if (base && quote) {\n            // limit orders or grouped orders\n            if (this.props.currentGroupOrderLimit !== 0) {\n                bidRows = groupedBids.map((order, index) => {\n                    return horizontal ? (\n                        <GroupedOrderBookRowHorizontal\n                            index={index}\n                            key={\n                                order.getPrice() + (order.isBid() ? \"_bid\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            position={!this.state.flip ? \"left\" : \"right\"}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    ) : (\n                        <GroupedOrderBookRowVertical\n                            index={index}\n                            key={\n                                order.getPrice() + (order.isBid() ? \"_bid\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            final={index === 0}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    );\n                });\n\n                let tempAsks = groupedAsks;\n                if (!horizontal) {\n                    tempAsks.sort((a, b) => {\n                        return b.getPrice() - a.getPrice();\n                    });\n                }\n                askRows = tempAsks.map((order, index) => {\n                    return horizontal ? (\n                        <GroupedOrderBookRowHorizontal\n                            index={index}\n                            key={\n                                order.getPrice() + (order.isBid() ? \"_bid\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            type={order.type}\n                            position={!this.state.flip ? \"right\" : \"left\"}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    ) : (\n                        <GroupedOrderBookRowVertical\n                            index={index}\n                            key={\n                                order.getPrice() + (order.isBid() ? \"_bid\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            type={order.type}\n                            final={0 === index}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    );\n                });\n            } else {\n                bidRows = combinedBids.map((order, index) => {\n                    return horizontal ? (\n                        <OrderBookRowHorizontal\n                            index={index}\n                            key={\n                                order.getPrice() +\n                                (order.isCall() ? \"_call\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            position={!this.state.flip ? \"left\" : \"right\"}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    ) : (\n                        <OrderBookRowVertical\n                            index={index}\n                            key={\n                                order.getPrice() +\n                                (order.isCall() ? \"_call\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            final={index === 0}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    );\n                });\n\n                let tempAsks = combinedAsks;\n                tempAsks.sort((a, b) => {\n                    if (horizontal) {\n                        return a.getPrice() - b.getPrice();\n                    } else {\n                        return b.getPrice() - a.getPrice();\n                    }\n                });\n                askRows = tempAsks.map((order, index) => {\n                    return horizontal ? (\n                        <OrderBookRowHorizontal\n                            index={index}\n                            key={\n                                order.getPrice() +\n                                (order.isCall() ? \"_call\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            type={order.type}\n                            position={!this.state.flip ? \"right\" : \"left\"}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    ) : (\n                        <OrderBookRowVertical\n                            index={index}\n                            key={\n                                order.getPrice() +\n                                (order.isCall() ? \"_call\" : \"\")\n                            }\n                            order={order}\n                            onClick={this.props.onClick.bind(this, order)}\n                            base={base}\n                            quote={quote}\n                            type={order.type}\n                            final={0 === index}\n                            currentAccount={this.props.currentAccount}\n                        />\n                    );\n                });\n            }\n        }\n\n        if (this.props.horizontal) {\n            let totalBidsLength = bidRows.length;\n            let totalAsksLength = askRows.length;\n\n            if (!showAllBids) {\n                bidRows.splice(rowCount, bidRows.length);\n            }\n\n            if (!showAllAsks) {\n                askRows.splice(rowCount, askRows.length);\n            }\n\n            let leftHeader = (\n                <thead>\n                    <tr key=\"top-header\" className=\"top-header\">\n                        <th>\n                            <Translate\n                                className=\"header-sub-title\"\n                                content=\"exchange.total\"\n                            />\n                            <span className=\"header-sub-title\">\n                                {\" \"}\n                                (<AssetName\n                                    dataPlace=\"top\"\n                                    name={baseSymbol}\n                                />)\n                            </span>\n                        </th>\n                        <th>\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={baseSymbol} />\n                            </span>\n                        </th>\n                        <th>\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={quoteSymbol} />\n                            </span>\n                        </th>\n                        <th>\n                            <Translate\n                                className={\n                                    (this.state.flip\n                                        ? \"ask-total\"\n                                        : \"bid-total\") + \" header-sub-title\"\n                                }\n                                content=\"exchange.price\"\n                            />\n                        </th>\n                    </tr>\n                </thead>\n            );\n\n            let rightHeader = (\n                <thead>\n                    <tr key=\"top-header\" className=\"top-header\">\n                        <th>\n                            <Translate\n                                className={\n                                    (!this.state.flip\n                                        ? \"ask-total\"\n                                        : \"bid-total\") + \" header-sub-title\"\n                                }\n                                content=\"exchange.price\"\n                            />\n                        </th>\n                        <th>\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={quoteSymbol} />\n                            </span>\n                        </th>\n                        <th>\n                            <span className=\"header-sub-title\">\n                                <AssetName dataPlace=\"top\" name={baseSymbol} />\n                            </span>\n                        </th>\n                        <th>\n                            <Translate\n                                className=\"header-sub-title\"\n                                content=\"exchange.total\"\n                            />\n                            <span className=\"header-sub-title\">\n                                {\" \"}\n                                (<AssetName\n                                    dataPlace=\"top\"\n                                    name={baseSymbol}\n                                />)\n                            </span>\n                        </th>\n                    </tr>\n                </thead>\n            );\n\n            return (\n                <div\n                    className={classnames(\n                        this.props.wrapperClass,\n                        \"grid-block orderbook no-padding small-vertical medium-horizontal align-spaced no-overflow small-12 xlarge-8\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            \"small-12 medium-6 middle-content\",\n                            this.state.flip ? \"order-1\" : \"order-2\"\n                        )}\n                    >\n                        <div className=\"exchange-bordered\">\n                            <div\n                                className=\"exchange-content-header ask\"\n                                data-intro={counterpart.translate(\n                                    \"walkthrough.sell_orders\"\n                                )}\n                            >\n                                <Translate content=\"exchange.asks\" />\n                                {this.state.flip ? (\n                                    <div style={{display: \"inline-block\"}}>\n                                        <span\n                                            onClick={this._flipBuySell.bind(\n                                                this\n                                            )}\n                                            style={{\n                                                cursor: \"pointer\",\n                                                fontSize: \"1rem\",\n                                                marginLeft: \"4px\",\n                                                position: \"relative\",\n                                                top: \"-2px\"\n                                            }}\n                                            className=\"flip-arrow\"\n                                        >\n                                            {\" \"}\n                                            &#8646;\n                                        </span>\n                                        <span\n                                            className=\"order-book-button-v\"\n                                            onClick={this.props.moveOrderBook}\n                                        >\n                                            <Icon\n                                                name=\"thumb-tack\"\n                                                title=\"icons.thumb_tack\"\n                                                className=\"icon-14px\"\n                                            />\n                                        </span>\n                                    </div>\n                                ) : null}\n                                {this.state.flip ? (\n                                    <div className=\"float-right header-sub-title grouped_order\">\n                                        {trackedGroupsConfig ? (\n                                            <GroupOrderLimitSelector\n                                                trackedGroupsConfig={\n                                                    trackedGroupsConfig\n                                                }\n                                                handleGroupOrderLimitChange={\n                                                    handleGroupOrderLimitChange\n                                                }\n                                                currentGroupOrderLimit={\n                                                    currentGroupOrderLimit\n                                                }\n                                            />\n                                        ) : null}\n                                    </div>\n                                ) : null}\n                                <div\n                                    style={{lineHeight: \"16px\"}}\n                                    className=\"float-right header-sub-title\"\n                                >\n                                    <Translate content=\"exchange.total\" />\n                                    <span>: </span>\n                                    {utils.format_number(\n                                        totalAsks,\n                                        quote.get(\"precision\")\n                                    )}\n                                    <span>\n                                        {\" \"}\n                                        (<AssetName name={quoteSymbol} />)\n                                    </span>\n                                </div>\n                            </div>\n                            <div style={{paddingRight: \"0.6rem\"}}>\n                                <table className=\"table order-table table-hover fixed-table text-right\">\n                                    {!this.state.flip\n                                        ? rightHeader\n                                        : leftHeader}\n                                </table>\n                            </div>\n                            <div\n                                className=\"grid-block\"\n                                ref=\"hor_asks\"\n                                style={{\n                                    paddingRight: \"0.6rem\",\n                                    overflow: \"hidden\",\n                                    maxHeight: 210\n                                }}\n                            >\n                                <table\n                                    style={{paddingBottom: 5}}\n                                    className=\"table order-table table-hover fixed-table text-right no-overflow\"\n                                >\n                                    <TransitionWrapper\n                                        ref=\"askTransition\"\n                                        className=\"orderbook clickable\"\n                                        component=\"tbody\"\n                                        transitionName=\"newrow\"\n                                    >\n                                        {askRows}\n                                    </TransitionWrapper>\n                                </table>\n                            </div>\n                            {totalAsksLength > rowCount ? (\n                                <div className=\"orderbook-showall\">\n                                    <a\n                                        onClick={this._onToggleShowAll.bind(\n                                            this,\n                                            \"asks\"\n                                        )}\n                                    >\n                                        <Translate\n                                            content={\n                                                showAllAsks\n                                                    ? \"exchange.hide\"\n                                                    : \"exchange.show_asks\"\n                                            }\n                                        />\n                                        {!showAllAsks ? (\n                                            <span> ({totalAsksLength})</span>\n                                        ) : null}\n                                    </a>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n\n                    <div\n                        className={classnames(\n                            \"small-12 medium-6 middle-content\",\n                            this.state.flip ? \"order-2\" : \"order-1\"\n                        )}\n                    >\n                        <div className=\"exchange-bordered\">\n                            <div\n                                className=\"exchange-content-header bid\"\n                                data-intro={counterpart.translate(\n                                    \"walkthrough.buy_orders\"\n                                )}\n                            >\n                                <Translate content=\"exchange.bids\" />\n                                {!this.state.flip ? (\n                                    <div style={{display: \"inline-block\"}}>\n                                        <span\n                                            onClick={this._flipBuySell.bind(\n                                                this\n                                            )}\n                                            style={{\n                                                cursor: \"pointer\",\n                                                fontSize: \"1rem\",\n                                                marginLeft: \"4px\",\n                                                position: \"relative\",\n                                                top: \"-2px\"\n                                            }}\n                                            className=\"flip-arrow\"\n                                        >\n                                            {\" \"}\n                                            &#8646;\n                                        </span>\n                                        <span\n                                            className=\"order-book-button-v\"\n                                            onClick={this.props.moveOrderBook}\n                                        >\n                                            <Icon\n                                                name=\"thumb-tack\"\n                                                title=\"icons.thumb_tack\"\n                                                className=\"icon-14px\"\n                                            />\n                                        </span>\n                                    </div>\n                                ) : null}\n                                {!this.state.flip ? (\n                                    <div className=\"float-right header-sub-title grouped_order\">\n                                        {trackedGroupsConfig ? (\n                                            <GroupOrderLimitSelector\n                                                trackedGroupsConfig={\n                                                    trackedGroupsConfig\n                                                }\n                                                handleGroupOrderLimitChange={\n                                                    handleGroupOrderLimitChange\n                                                }\n                                                currentGroupOrderLimit={\n                                                    currentGroupOrderLimit\n                                                }\n                                            />\n                                        ) : null}\n                                    </div>\n                                ) : null}\n                                <div\n                                    style={{lineHeight: \"16px\"}}\n                                    className=\"float-right header-sub-title\"\n                                >\n                                    <Translate content=\"exchange.total\" />\n                                    <span>: </span>\n                                    {utils.format_number(\n                                        totalBids,\n                                        base.get(\"precision\")\n                                    )}\n                                    <span>\n                                        {\" \"}\n                                        (<AssetName name={baseSymbol} />)\n                                    </span>\n                                </div>\n                            </div>\n                            <div style={{paddingRight: \"0.6rem\"}}>\n                                <table className=\"table order-table table-hover fixed-table text-right\">\n                                    {this.state.flip ? rightHeader : leftHeader}\n                                </table>\n                            </div>\n                            <div\n                                className=\"grid-block\"\n                                ref=\"hor_bids\"\n                                style={{\n                                    paddingRight: \"0.6rem\",\n                                    overflow: \"hidden\",\n                                    maxHeight: 210\n                                }}\n                            >\n                                <table\n                                    style={{paddingBottom: 5}}\n                                    className=\"table order-table table-hover fixed-table text-right no-overflow\"\n                                >\n                                    <TransitionWrapper\n                                        ref=\"bidTransition\"\n                                        className=\"orderbook clickable\"\n                                        component=\"tbody\"\n                                        transitionName=\"newrow\"\n                                    >\n                                        {bidRows}\n                                    </TransitionWrapper>\n                                </table>\n                            </div>\n                            {totalBidsLength > rowCount ? (\n                                <div className=\"orderbook-showall\">\n                                    <a\n                                        onClick={this._onToggleShowAll.bind(\n                                            this,\n                                            \"bids\"\n                                        )}\n                                    >\n                                        <Translate\n                                            content={\n                                                showAllBids\n                                                    ? \"exchange.hide\"\n                                                    : \"exchange.show_bids\"\n                                            }\n                                        />\n                                        {!showAllBids ? (\n                                            <span> ({totalBidsLength})</span>\n                                        ) : null}\n                                    </a>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            // Vertical orderbook\n            return (\n                <div className=\"left-order-book no-padding no-overflow\">\n                    <div className=\"order-table-container\">\n                        <StickyTable\n                            stickyColumnCount={0}\n                            className=\"order-table table\"\n                            ref=\"vertical_sticky_table\"\n                        >\n                            <div className=\"sticky-table-row top-header\">\n                                <div className=\"cell header-cell left\">\n                                    <span className=\"header-sub-title\">\n                                        <AssetName name={baseSymbol} />\n                                    </span>\n                                </div>\n                                <div className=\"cell header-cell\">\n                                    <span className=\"header-sub-title\">\n                                        <AssetName name={quoteSymbol} />\n                                    </span>\n                                </div>\n                                <div className=\"cell header-cell right\">\n                                    <Translate\n                                        className=\"header-sub-title\"\n                                        content=\"exchange.price\"\n                                    />\n                                </div>\n                            </div>\n                            <TransitionWrapper\n                                ref=\"askTransition\"\n                                className=\"transition-container clickable\"\n                                component=\"div\"\n                                transitionName=\"newrow\"\n                            >\n                                {askRows.length > 0\n                                    ? askRows\n                                    : noOrders || (\n                                          <div className=\"sticky-table-row\">\n                                              <td\n                                                  className=\"cell no-orders padtop\"\n                                                  colSpan=\"3\"\n                                              >\n                                                  <Translate content=\"exchange.no_asks\" />\n                                              </td>\n                                          </div>\n                                      )}\n                            </TransitionWrapper>\n                            <div className=\"sticky-table-row\" ref=\"center_text\">\n                                {noOrders ? (\n                                    <td\n                                        colSpan={3}\n                                        className=\"no-orders padtop\"\n                                    >\n                                        <Translate content=\"exchange.no_orders\" />\n                                    </td>\n                                ) : (\n                                    <td\n                                        className=\"cell center-cell\"\n                                        colSpan=\"3\"\n                                    >\n                                        <div className=\"orderbook-latest-price\">\n                                            <div className=\"text-center spread\">\n                                                {!!spread && (\n                                                    <span\n                                                        className=\"clickable left\"\n                                                        onClick={\n                                                            this\n                                                                .toggleSpreadValue\n                                                        }\n                                                    >\n                                                        <Translate content=\"exchange.spread\" />{\" \"}\n                                                        <span className=\"spread-value\">\n                                                            {spread}\n                                                        </span>\n                                                    </span>\n                                                )}\n                                                <Icon\n                                                    className=\"lock-unlock clickable\"\n                                                    onClick={\n                                                        this.toggleAutoScroll\n                                                    }\n                                                    name={\n                                                        this.state.autoScroll\n                                                            ? \"locked\"\n                                                            : \"unlocked\"\n                                                    }\n                                                    title={\n                                                        this.state.autoScroll\n                                                            ? \"icons.locked.enable_auto_scroll\"\n                                                            : \"icons.unlocked.disable_auto_scroll\"\n                                                    }\n                                                />\n                                                {!!this.props.latest && (\n                                                    <span className=\"right\">\n                                                        <Translate content=\"exchange.latest\" />{\" \"}\n                                                        <span\n                                                            className={\n                                                                this.props\n                                                                    .changeClass\n                                                            }\n                                                        >\n                                                            <PriceText\n                                                                price={\n                                                                    this.props\n                                                                        .latest\n                                                                }\n                                                                base={\n                                                                    this.props\n                                                                        .base\n                                                                }\n                                                                quote={\n                                                                    this.props\n                                                                        .quote\n                                                                }\n                                                            />\n                                                        </span>\n                                                    </span>\n                                                )}\n                                            </div>\n                                        </div>\n                                    </td>\n                                )}\n                            </div>\n                            <TransitionWrapper\n                                ref=\"bidTransition\"\n                                className=\"transition-container clickable\"\n                                component=\"div\"\n                                transitionName=\"newrow\"\n                            >\n                                {bidRows.length > 0\n                                    ? bidRows\n                                    : noOrders || (\n                                          <div className=\"sticky-table-row\">\n                                              <td\n                                                  className=\"cell no-orders\"\n                                                  colSpan=\"3\"\n                                              >\n                                                  <Translate content=\"exchange.no_bids\" />\n                                              </td>\n                                          </div>\n                                      )}\n                            </TransitionWrapper>\n                        </StickyTable>\n                    </div>\n                    <div className=\"v-align no-padding align-center grid-block footer shrink bottom-header\">\n                        <div\n                            className=\"v-align grid-block align-center\"\n                            style={{height: \"2rem\", overflow: \"hidden\"}}\n                        >\n                            <Icon\n                                name=\"thumb-untack\"\n                                title=\"icons.thumb_untack\"\n                                className=\"icon-14px order-book-button-h\"\n                                style={{top: \"-0.5rem\"}}\n                                onClick={this.props.moveOrderBook}\n                            />\n                        </div>\n                        <div className=\"v-align grid-block align-center grouped_order\">\n                            {trackedGroupsConfig ? (\n                                <GroupOrderLimitSelector\n                                    trackedGroupsConfig={trackedGroupsConfig}\n                                    handleGroupOrderLimitChange={\n                                        handleGroupOrderLimitChange\n                                    }\n                                    currentGroupOrderLimit={\n                                        currentGroupOrderLimit\n                                    }\n                                />\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nOrderBook.defaultProps = {\n    bids: [],\n    asks: [],\n    orders: {}\n};\n\nOrderBook.propTypes = {\n    bids: PropTypes.array.isRequired,\n    asks: PropTypes.array.isRequired,\n    orders: PropTypes.object.isRequired\n};\n\nexport default OrderBook;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Immutable from \"immutable\";\nimport Ps from \"perfect-scrollbar\";\nimport Translate from \"react-translate-component\";\nimport market_utils from \"common/market_utils\";\nimport PriceText from \"../Utility/PriceText\";\nimport cnames from \"classnames\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport {connect} from \"alt-react\";\nimport TransitionWrapper from \"../Utility/TransitionWrapper\";\nimport AssetName from \"../Utility/AssetName\";\nimport {ChainTypes as grapheneChainTypes} from \"bitsharesjs\";\nconst {operations} = grapheneChainTypes;\nimport BlockDate from \"../Utility/BlockDate\";\nimport counterpart from \"counterpart\";\nimport ReactTooltip from \"react-tooltip\";\nimport getLocale from \"browser-locale\";\nimport {FillOrder} from \"common/MarketClasses\";\n\nclass MarketHistory extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            activeTab: props.viewSettings.get(\"historyTab\", \"history\")\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (!nextProps.marketReady) return false;\n        return (\n            !Immutable.is(nextProps.history, this.props.history) ||\n            nextProps.baseSymbol !== this.props.baseSymbol ||\n            nextProps.quoteSymbol !== this.props.quoteSymbol ||\n            nextProps.className !== this.props.className ||\n            nextState.activeTab !== this.state.activeTab ||\n            nextProps.currentAccount !== this.props.currentAccount\n        );\n    }\n\n    componentDidMount() {\n        let historyContainer = this.refs.history;\n        Ps.initialize(historyContainer);\n    }\n\n    componentDidUpdate() {\n        let historyContainer = this.refs.history;\n        Ps.update(historyContainer);\n    }\n\n    _changeTab(tab) {\n        SettingsActions.changeViewSetting({\n            historyTab: tab\n        });\n        this.setState({\n            activeTab: tab\n        });\n\n        // Ensure that focus goes back to top of scrollable container when tab is changed\n        let historyNode = this.refs.history;\n        historyNode.scrollTop = 0;\n        Ps.update(historyNode);\n\n        setTimeout(ReactTooltip.rebuild, 1000);\n    }\n\n    render() {\n        let {\n            history,\n            myHistory,\n            base,\n            quote,\n            baseSymbol,\n            quoteSymbol,\n            isNullAccount\n        } = this.props;\n        let {activeTab} = this.state;\n        let historyRows = null;\n\n        if (isNullAccount) {\n            activeTab = \"history\";\n        }\n\n        const assets = {\n            [quote.get(\"id\")]: {\n                precision: quote.get(\"precision\")\n            },\n            [base.get(\"id\")]: {\n                precision: base.get(\"precision\")\n            }\n        };\n\n        if (activeTab === \"my_history\" && (myHistory && myHistory.size)) {\n            historyRows = myHistory\n                .filter(a => {\n                    let opType = a.getIn([\"op\", 0]);\n                    return opType === operations.fill_order;\n                })\n                .filter(a => {\n                    let quoteID = quote.get(\"id\");\n                    let baseID = base.get(\"id\");\n                    let pays = a.getIn([\"op\", 1, \"pays\", \"asset_id\"]);\n                    let receives = a.getIn([\"op\", 1, \"receives\", \"asset_id\"]);\n                    let hasQuote = quoteID === pays || quoteID === receives;\n                    let hasBase = baseID === pays || baseID === receives;\n                    return hasQuote && hasBase;\n                })\n                .sort((a, b) => {\n                    return b.get(\"block_num\") - a.get(\"block_num\");\n                })\n                .map(trx => {\n                    let fill = new FillOrder(\n                        trx.toJS(),\n                        assets,\n                        quote.get(\"id\")\n                    );\n\n                    return (\n                        <tr key={fill.id}>\n                            <td className={fill.className}>\n                                <PriceText\n                                    price={fill.getPrice()}\n                                    base={this.props.base}\n                                    quote={this.props.quote}\n                                />\n                            </td>\n                            <td>{fill.amountToReceive()}</td>\n                            <td>{fill.amountToPay()}</td>\n                            <BlockDate\n                                component=\"td\"\n                                block_number={fill.block}\n                                tooltip\n                            />\n                        </tr>\n                    );\n                })\n                .toArray();\n        } else if (history && history.size) {\n            historyRows = this.props.history\n                .take(100)\n                .map(fill => {\n                    return (\n                        <tr key={\"history_\" + fill.id}>\n                            <td className={fill.className}>\n                                <PriceText\n                                    price={fill.getPrice()}\n                                    base={this.props.base}\n                                    quote={this.props.quote}\n                                />\n                            </td>\n                            <td>{fill.amountToReceive()}</td>\n                            <td>{fill.amountToPay()}</td>\n                            <td className=\"tooltip\" data-tip={fill.time}>\n                                {counterpart.localize(fill.time, {\n                                    type: \"date\",\n                                    format:\n                                        getLocale()\n                                            .toLowerCase()\n                                            .indexOf(\"en-us\") !== -1\n                                            ? \"market_history_us\"\n                                            : \"market_history\"\n                                })}\n                            </td>\n                        </tr>\n                    );\n                })\n                .toArray();\n        }\n\n        let hc = \"mymarkets-header clickable\";\n        let historyClass = cnames(hc, {inactive: activeTab === \"my_history\"});\n        let myHistoryClass = cnames(hc, {inactive: activeTab === \"history\"});\n\n        return (\n            <div className={this.props.className}>\n                <div\n                    className=\"exchange-bordered small-12\"\n                    style={{height: \"auto\"}}\n                >\n                    <div\n                        style={this.props.headerStyle}\n                        className=\"grid-block shrink left-orderbook-header bottom-header\"\n                    >\n                        <div\n                            className={cnames(myHistoryClass, {\n                                disabled: isNullAccount\n                            })}\n                            onClick={this._changeTab.bind(this, \"my_history\")}\n                        >\n                            <Translate content=\"exchange.my_history\" />\n                        </div>\n                        <div\n                            className={historyClass}\n                            onClick={this._changeTab.bind(this, \"history\")}\n                        >\n                            <Translate content=\"exchange.history\" />\n                        </div>\n                    </div>\n                    <div className=\"grid-block shrink left-orderbook-header market-right-padding-only\">\n                        <table className=\"table order-table text-right fixed-table market-right-padding\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <Translate\n                                            className=\"header-sub-title\"\n                                            content=\"exchange.price\"\n                                        />\n                                    </th>\n                                    <th>\n                                        <span className=\"header-sub-title\">\n                                            <AssetName\n                                                dataPlace=\"top\"\n                                                name={quoteSymbol}\n                                            />\n                                        </span>\n                                    </th>\n                                    <th>\n                                        <span className=\"header-sub-title\">\n                                            <AssetName\n                                                dataPlace=\"top\"\n                                                name={baseSymbol}\n                                            />\n                                        </span>\n                                    </th>\n                                    <th>\n                                        <Translate\n                                            className=\"header-sub-title\"\n                                            content=\"explorer.block.date\"\n                                        />\n                                    </th>\n                                </tr>\n                            </thead>\n                        </table>\n                    </div>\n                    <div\n                        className=\"table-container grid-block market-right-padding-only no-overflow\"\n                        ref=\"history\"\n                        style={{maxHeight: 210, overflow: \"hidden\"}}\n                    >\n                        <table className=\"table order-table text-right fixed-table market-right-padding\">\n                            <TransitionWrapper\n                                component=\"tbody\"\n                                transitionName=\"newrow\"\n                            >\n                                {historyRows}\n                            </TransitionWrapper>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMarketHistory.defaultProps = {\n    history: []\n};\n\nMarketHistory.propTypes = {\n    history: PropTypes.object.isRequired\n};\n\nexport default connect(\n    MarketHistory,\n    {\n        listenTo() {\n            return [SettingsStore];\n        },\n        getProps() {\n            return {\n                viewSettings: SettingsStore.getState().viewSettings\n            };\n        }\n    }\n);\n","import React from \"react\";\nimport counterpart from \"counterpart\";\nimport {connect} from \"alt-react\";\nimport BlockchainStore from \"stores/BlockchainStore\";\nimport BlockchainActions from \"actions/BlockchainActions\";\nimport ReactTooltip from \"react-tooltip\";\nimport getLocale from \"browser-locale\";\n\n/**\n * @brief displays block's date and time based on block number\n *\n * properties: block - number\n * Note, it doesn't fetch block, just calculates time based on number alone.\n **/\n\nclass BlockDate extends React.Component {\n    static defaultProps = {\n        format:\n            getLocale()\n                .toLowerCase()\n                .indexOf(\"en-us\") !== -1\n                ? \"market_history_us\"\n                : \"market_history\",\n        tooltip: false,\n        component: \"span\"\n    };\n\n    componentWillMount() {\n        if (!this.props.block)\n            BlockchainActions.getBlock(this.props.block_number);\n    }\n\n    shouldComponentUpdate(np) {\n        if (np.block && !this.props.block)\n            setTimeout(ReactTooltip.rebuild, 1000);\n        return np.block !== this.props.block;\n    }\n\n    render() {\n        const {block, tooltip, component, format} = this.props;\n        if (!block) return React.createElement(component);\n        return React.createElement(\n            component,\n            {\n                className: tooltip ? \"tooltip\" : \"\",\n                \"data-tip\": tooltip ? block.timestamp : \"\"\n            },\n            <span>\n                {counterpart.localize(block.timestamp, {type: \"date\", format})}\n            </span>\n        );\n    }\n}\n\nBlockDate = connect(BlockDate, {\n    listenTo() {\n        return [BlockchainStore];\n    },\n    getProps(props) {\n        return {\n            block: BlockchainStore.getState().blocks.get(props.block_number)\n        };\n    }\n});\n\nexport default BlockDate;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\nimport TranslateWithLinks from \"../Utility/TranslateWithLinks\";\nimport counterpart from \"counterpart\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport PriceText from \"../Utility/PriceText\";\nimport AssetName from \"../Utility/AssetName\";\nimport SimpleDepositWithdraw from \"../Dashboard/SimpleDepositWithdraw\";\nimport SimpleDepositBlocktradesBridge from \"../Dashboard/SimpleDepositBlocktradesBridge\";\nimport {Asset} from \"common/MarketClasses\";\nimport ExchangeInput from \"./ExchangeInput\";\nimport assetUtils from \"common/asset_utils\";\nimport DatePicker from \"react-datepicker2/src/\";\nimport moment from \"moment\";\nimport Icon from \"../Icon/Icon\";\n\nclass BuySell extends React.Component {\n    static propTypes = {\n        balance: ChainTypes.ChainObject,\n        type: PropTypes.string,\n        amountChange: PropTypes.func.isRequired,\n        priceChange: PropTypes.func.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onExpirationTypeChange: PropTypes.func.isRequired,\n        onExpirationCustomChange: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        type: \"bid\"\n    };\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            nextProps.amount !== this.props.amount ||\n            nextProps.onBorrow !== this.props.onBorrow ||\n            nextProps.total !== this.props.total ||\n            nextProps.currentPrice !== this.props.currentPrice ||\n            nextProps.price !== this.props.price ||\n            nextProps.balance !== this.props.balance ||\n            nextProps.account !== this.props.account ||\n            nextProps.className !== this.props.className ||\n            (nextProps.fee && this.props.fee\n                ? nextProps.fee.ne(this.props.fee)\n                : false) ||\n            nextProps.isPredictionMarket !== this.props.isPredictionMarket ||\n            nextProps.feeAsset !== this.props.feeAsset ||\n            nextProps.isOpen !== this.props.isOpen ||\n            nextProps.hasFeeBalance !== this.props.hasFeeBalance ||\n            nextProps.expirationType !== this.props.expirationType ||\n            nextProps.expirationCustomTime !== this.props.expirationCustomTime\n        );\n    }\n\n    _addBalance(balance) {\n        if (this.props.type === \"bid\") {\n            this.props.totalChange({\n                target: {value: balance.getAmount({real: true}).toString()}\n            });\n        } else {\n            this.props.amountChange({\n                target: {value: balance.getAmount({real: true}).toString()}\n            });\n        }\n    }\n\n    _setPrice(price) {\n        this.props.priceChange({target: {value: price.toString()}});\n    }\n\n    _onDeposit(e) {\n        e.preventDefault();\n        this.refs.deposit_modal.show();\n    }\n\n    _onBuy(e) {\n        e.preventDefault();\n        this.refs.bridge_modal.show();\n    }\n\n    render() {\n        let {\n            type,\n            quote,\n            base,\n            amountChange,\n            fee,\n            isPredictionMarket,\n            priceChange,\n            onSubmit,\n            balance,\n            totalChange,\n            balancePrecision,\n            currentPrice,\n            currentPriceObject,\n            feeAsset,\n            feeAssets,\n            hasFeeBalance,\n            backedCoin\n        } = this.props;\n        let amount, price, total;\n        let caret = this.props.isOpen ? (\n            <span>&#9660;</span>\n        ) : (\n            <span>&#9650;</span>\n        );\n\n        if (this.props.amount) amount = this.props.amount;\n        if (this.props.price) price = this.props.price;\n        if (this.props.total) total = this.props.total;\n\n        let balanceAmount = new Asset({\n            amount: balance ? balance.get(\"balance\") : 0,\n            precision: balancePrecision,\n            asset_id: this.props.balanceId\n        });\n\n        const maxBaseMarketFee = new Asset({\n            amount: base.getIn([\"options\", \"max_market_fee\"]),\n            asset_id: base.get(\"asset_id\"),\n            precision: base.get(\"precision\")\n        });\n        const maxQuoteMarketFee = new Asset({\n            amount: quote.getIn([\"options\", \"max_market_fee\"]),\n            asset_id: quote.get(\"asset_id\"),\n            precision: quote.get(\"precision\")\n        });\n        const baseMarketFeePercent =\n            base.getIn([\"options\", \"market_fee_percent\"]) / 100 + \"%\";\n        const quoteMarketFeePercent =\n            quote.getIn([\"options\", \"market_fee_percent\"]) / 100 + \"%\";\n        const quoteFee = !amount\n            ? 0\n            : Math.min(\n                  maxQuoteMarketFee.getAmount({real: true}),\n                  amount *\n                      quote.getIn([\"options\", \"market_fee_percent\"]) /\n                      10000\n              ).toFixed(maxQuoteMarketFee.precision);\n        const baseFee = !amount\n            ? 0\n            : Math.min(\n                  maxBaseMarketFee.getAmount({real: true}),\n                  total * base.getIn([\"options\", \"market_fee_percent\"]) / 10000\n              ).toFixed(maxBaseMarketFee.precision);\n        const baseFlagBooleans = assetUtils.getFlagBooleans(\n            base.getIn([\"options\", \"flags\"]),\n            base.has(\"bitasset_data_id\")\n        );\n        const quoteFlagBooleans = assetUtils.getFlagBooleans(\n            quote.getIn([\"options\", \"flags\"]),\n            quote.has(\"bitasset_data_id\")\n        );\n\n        const {name: baseName, prefix: basePrefix} = utils.replaceName(\n            this.props.base\n        );\n        const hasMarketFee =\n            baseFlagBooleans[\"charge_market_fee\"] ||\n            quoteFlagBooleans[\"charge_market_fee\"];\n        var baseMarketFee = baseFlagBooleans[\"charge_market_fee\"] ? (\n            <div className=\"grid-block no-padding buy-sell-row\">\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-label\">\n                    <Translate content=\"explorer.asset.summary.market_fee\" />:&nbsp;{\n                        baseMarketFeePercent\n                    }\n                </div>\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-input\">\n                    <input\n                        disabled\n                        type=\"text\"\n                        id=\"baseMarketFee\"\n                        value={baseFee}\n                        autoComplete=\"off\"\n                    />\n                </div>\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-box\">\n                    <AssetName noTip name={base.get(\"symbol\")} />\n                    <span\n                        data-tip={counterpart.translate(\"tooltip.market_fee\", {\n                            percent:\n                                base.getIn([\"options\", \"market_fee_percent\"]) /\n                                100,\n                            asset: (basePrefix || \"\") + baseName\n                        })}\n                        className=\"inline-block tooltip\"\n                    >\n                        &nbsp;<Icon\n                            style={{position: \"relative\", top: 3}}\n                            name=\"question-circle\"\n                            title=\"icons.question_circle\"\n                        />\n                    </span>\n                </div>\n            </div>\n        ) : hasMarketFee ? (\n            <div className=\"grid-block no-padding buy-sell-row\">\n                <div\n                    style={{visibility: \"hidden\"}}\n                    className=\"grid-block small-3 no-margin no-overflow buy-sell-label\"\n                >\n                    <Translate content=\"explorer.asset.summary.market_fee\" />:\n                </div>\n            </div>\n        ) : null;\n\n        const {name: quoteName, prefix: quotePrefix} = utils.replaceName(\n            this.props.quote\n        );\n        var quoteMarketFee = quoteFlagBooleans[\"charge_market_fee\"] ? (\n            <div className=\"grid-block no-padding buy-sell-row\">\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-label\">\n                    <Translate content=\"explorer.asset.summary.market_fee\" />:&nbsp;{\n                        quoteMarketFeePercent\n                    }\n                </div>\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-input\">\n                    <input\n                        disabled\n                        type=\"text\"\n                        id=\"quoteMarketFee\"\n                        value={quoteFee}\n                        autoComplete=\"off\"\n                    />\n                </div>\n                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-box\">\n                    <AssetName noTip name={quote.get(\"symbol\")} />\n                    <span\n                        data-tip={counterpart.translate(\"tooltip.market_fee\", {\n                            percent:\n                                quote.getIn([\"options\", \"market_fee_percent\"]) /\n                                100,\n                            asset: (quotePrefix || \"\") + quoteName\n                        })}\n                        className=\"inline-block tooltip\"\n                    >\n                        &nbsp;<Icon\n                            style={{position: \"relative\", top: 3}}\n                            name=\"question-circle\"\n                            title=\"icons.question-circle\"\n                        />\n                    </span>\n                </div>\n            </div>\n        ) : hasMarketFee ? (\n            <div className=\"grid-block no-padding buy-sell-row\">\n                <div\n                    style={{visibility: \"hidden\"}}\n                    className=\"grid-block small-3 no-margin no-overflow buy-sell-label\"\n                >\n                    <Translate content=\"explorer.asset.summary.market_fee\" />:\n                </div>\n            </div>\n        ) : null;\n\n        // if (!balanceAmount) {\n        //     balanceAmount = 0;\n        // }\n        const isBid = type === \"bid\";\n        let marketFee =\n            isBid && quoteMarketFee\n                ? quoteMarketFee\n                : !isBid && baseMarketFee\n                    ? baseMarketFee\n                    : null;\n        let hasBalance = isBid\n            ? balanceAmount.getAmount({real: true}) >= parseFloat(total)\n            : balanceAmount.getAmount({real: true}) >= parseFloat(amount);\n\n        let buttonText = isPredictionMarket\n            ? counterpart.translate(\"exchange.short\")\n            : isBid\n                ? counterpart.translate(\"exchange.buy\")\n                : counterpart.translate(\"exchange.sell\");\n        let forceSellText = isBid\n            ? counterpart.translate(\"exchange.buy\")\n            : counterpart.translate(\"exchange.sell\");\n\n        let noBalance = isPredictionMarket\n            ? false\n            : !(balanceAmount.getAmount() > 0 && hasBalance);\n        let invalidPrice = !(price > 0);\n        let invalidAmount = !(amount > 0);\n\n        let disabled = noBalance || invalidPrice || invalidAmount;\n\n        let buttonClass = classNames(\"button buySellButton\", type, {\n            disabled: disabled\n        });\n        let balanceSymbol = isBid ? base.get(\"symbol\") : quote.get(\"symbol\");\n\n        let disabledText = invalidPrice\n            ? counterpart.translate(\"exchange.invalid_price\")\n            : invalidAmount\n                ? counterpart.translate(\"exchange.invalid_amount\")\n                : noBalance\n                    ? counterpart.translate(\"exchange.no_balance\")\n                    : null;\n\n        // Fee asset selection\n        if (\n            feeAssets[1] &&\n            feeAssets[1].getIn([\n                \"options\",\n                \"core_exchange_rate\",\n                \"quote\",\n                \"asset_id\"\n            ]) === \"1.3.0\" &&\n            feeAssets[1].getIn([\n                \"options\",\n                \"core_exchange_rate\",\n                \"base\",\n                \"asset_id\"\n            ]) === \"1.3.0\"\n        ) {\n            feeAsset = feeAssets[0];\n            feeAssets.splice(1, 1);\n        }\n        let index = 0;\n        let options = feeAssets.map(asset => {\n            let {name, prefix} = utils.replaceName(asset);\n            return (\n                <option key={asset.get(\"id\")} value={index++}>\n                    {prefix}\n                    {name}\n                </option>\n            );\n        });\n\n        // Subtract fee from amount to sell\n        let balanceToAdd;\n\n        if (feeAsset.get(\"symbol\") === balanceSymbol) {\n            balanceToAdd = balanceAmount.clone(\n                balanceAmount.getAmount() - fee.getAmount()\n            );\n        } else {\n            balanceToAdd = balanceAmount;\n        }\n\n        let {name, prefix} = utils.replaceName(\n            this.props[isBid ? \"base\" : \"quote\"]\n        );\n        let buyBorrowDepositName = (prefix ? prefix : \"\") + name;\n\n        const translator = require(\"counterpart\");\n\n        let dataIntro = null;\n\n        if (type == \"bid\") {\n            dataIntro = translator.translate(\"walkthrough.buy_form\");\n        }\n\n        if (type == \"ask\") {\n            dataIntro = translator.translate(\"walkthrough.sell_form\");\n        }\n\n        const expirationsOptionsList = Object.keys(this.props.expirations).map(\n            (key, i) => (\n                <option value={key} key={key}>\n                    {this.props.expirations[key].title}\n                </option>\n            )\n        );\n\n        // datepicker puts on the end of body so it's out of theme scope\n        // so theme is used on wrapperClassName\n        const theme = SettingsStore.getState().settings.get(\"themes\");\n\n        const minExpirationDate = moment();\n\n        return (\n            <div className={this.props.className}>\n                <div className=\"exchange-bordered buy-sell-container\">\n                    <div\n                        className={\"exchange-content-header \" + type}\n                        data-intro={dataIntro}\n                    >\n                        <span>\n                            <TranslateWithLinks\n                                string=\"exchange.buysell_formatter\"\n                                noLink\n                                noTip={false}\n                                keys={[\n                                    {\n                                        type: \"asset\",\n                                        value: quote.get(\"symbol\"),\n                                        arg: \"asset\"\n                                    },\n                                    {\n                                        type: \"translate\",\n                                        value: isPredictionMarket\n                                            ? \"exchange.short\"\n                                            : isBid\n                                                ? \"exchange.buy\"\n                                                : \"exchange.sell\",\n                                        arg: \"direction\"\n                                    }\n                                ]}\n                            />\n                        </span>\n                        {/* <span>{buttonText} <AssetName dataPlace=\"top\" name={quote.get(\"symbol\")} /></span> */}\n                        {this.props.onFlip ? (\n                            <span\n                                onClick={this.props.onFlip}\n                                style={{cursor: \"pointer\", fontSize: \"1rem\"}}\n                                className=\"flip-arrow\"\n                            >\n                                {\" \"}\n                                &#8646;\n                            </span>\n                        ) : (\n                            \"null\"\n                        )}\n                        {this.props.onTogglePosition ? (\n                            <span\n                                onClick={this.props.onTogglePosition}\n                                style={{cursor: \"pointer\", fontSize: \"1rem\"}}\n                                className=\"flip-arrow\"\n                            >\n                                {\" \"}\n                                &#8645;\n                            </span>\n                        ) : (\n                            \"null\"\n                        )}\n                        {\n                            <div\n                                onClick={this.props.onToggleOpen}\n                                className=\"float-right clickable hide-for-xlarge\"\n                                style={{paddingLeft: 10}}\n                            >\n                                {caret}\n                            </div>\n                        }\n                        {this.props.currentBridges ? (\n                            <div className=\"float-right buy-sell-deposit\">\n                                <a onClick={this._onBuy.bind(this)}>\n                                    <TranslateWithLinks\n                                        string=\"exchange.buysell_formatter\"\n                                        noLink\n                                        keys={[\n                                            {\n                                                type: \"asset\",\n                                                value: this.props[\n                                                    isBid ? \"base\" : \"quote\"\n                                                ].get(\"symbol\"),\n                                                arg: \"asset\"\n                                            },\n                                            {\n                                                type: \"translate\",\n                                                value: \"exchange.buy\",\n                                                arg: \"direction\"\n                                            }\n                                        ]}\n                                    />\n                                </a>\n                            </div>\n                        ) : null}\n                        {this.props.backedCoin ? (\n                            <div className=\"float-right buy-sell-deposit\">\n                                <a onClick={this._onDeposit.bind(this)}>\n                                    <TranslateWithLinks\n                                        string=\"exchange.buysell_formatter\"\n                                        noLink\n                                        keys={[\n                                            {\n                                                type: \"asset\",\n                                                value: this.props[\n                                                    isBid ? \"base\" : \"quote\"\n                                                ].get(\"symbol\"),\n                                                arg: \"asset\"\n                                            },\n                                            {\n                                                type: \"translate\",\n                                                value: \"exchange.deposit\",\n                                                arg: \"direction\"\n                                            }\n                                        ]}\n                                    />\n                                </a>\n                            </div>\n                        ) : null}\n                        {this.props.onBorrow ? (\n                            <div className=\"float-right buy-sell-deposit\">\n                                <a onClick={this.props.onBorrow}>\n                                    <TranslateWithLinks\n                                        string=\"exchange.buysell_formatter\"\n                                        noLink\n                                        keys={[\n                                            {\n                                                type: \"asset\",\n                                                value: this.props[\n                                                    isBid ? \"base\" : \"quote\"\n                                                ].get(\"symbol\"),\n                                                arg: \"asset\"\n                                            },\n                                            {\n                                                type: \"translate\",\n                                                value: \"exchange.borrow\",\n                                                arg: \"direction\"\n                                            }\n                                        ]}\n                                    />\n                                </a>\n                            </div>\n                        ) : null}\n                    </div>\n\n                    <form\n                        className={\n                            (!this.props.isOpen ? \"hide-container \" : \"\") +\n                            \"order-form\"\n                        }\n                        noValidate\n                    >\n                        <div className=\"grid-block vertical no-overflow no-padding\">\n                            <div className=\"grid-block no-padding buy-sell-row\">\n                                <div className=\"grid-block small-3 no-margin no-overflow buy-sell-label\">\n                                    <Translate content=\"exchange.price\" />:\n                                </div>\n                                <div className=\"grid-block small-5 no-margin no-overflow buy-sell-input\">\n                                    <ExchangeInput\n                                        id={`${type}Price`}\n                                        value={price}\n                                        onChange={priceChange}\n                                        autoComplete=\"off\"\n                                        placeholder=\"0.0\"\n                                    />\n                                </div>\n                                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-box\">\n                                    <AssetName\n                                        dataPlace=\"right\"\n                                        name={base.get(\"symbol\")}\n                                    />\n                                    &nbsp;/&nbsp;\n                                    <AssetName\n                                        dataPlace=\"right\"\n                                        name={quote.get(\"symbol\")}\n                                    />\n                                </div>\n                            </div>\n\n                            <div className=\"grid-block no-padding buy-sell-row\">\n                                <div className=\"grid-block small-3 no-margin no-overflow buy-sell-label\">\n                                    <Translate content=\"transfer.amount\" />:\n                                </div>\n                                <div className=\"grid-block small-5 no-margin no-overflow buy-sell-input\">\n                                    <ExchangeInput\n                                        id={`${type}Amount`}\n                                        value={amount}\n                                        onChange={amountChange}\n                                        autoComplete=\"off\"\n                                        placeholder=\"0.0\"\n                                    />\n                                </div>\n                                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-box\">\n                                    <AssetName\n                                        dataPlace=\"right\"\n                                        name={quote.get(\"symbol\")}\n                                    />\n                                </div>\n                            </div>\n\n                            <div className=\"grid-block buy-sell-row bottom-row\">\n                                <div className=\"grid-block small-3 no-margin no-overflow buy-sell-label\">\n                                    <Translate content=\"exchange.total\" />:\n                                </div>\n                                <div className=\"grid-block small-5 no-margin no-overflow buy-sell-input\">\n                                    <ExchangeInput\n                                        id={`${type}Total`}\n                                        value={total}\n                                        onChange={totalChange}\n                                        autoComplete=\"off\"\n                                        placeholder=\"0.0\"\n                                    />\n                                </div>\n                                <div className=\"grid-block small-4 no-margin no-overflow buy-sell-box\">\n                                    <AssetName\n                                        dataPlace=\"right\"\n                                        name={base.get(\"symbol\")}\n                                    />\n                                </div>\n                            </div>\n\n                            <div className=\"grid-block no-padding buy-sell-row\">\n                                <div className=\"grid-block small-3 no-margin no-overflow buy-sell-label\">\n                                    <Translate content=\"transfer.fee\" />:\n                                </div>\n                                <div className=\"grid-block small-5 no-margin no-overflow buy-sell-input\">\n                                    <input\n                                        className={\n                                            !hasFeeBalance ? \"no-balance\" : \"\"\n                                        }\n                                        disabled\n                                        type=\"text\"\n                                        id={`${type}Fee`}\n                                        value={\n                                            !hasFeeBalance\n                                                ? counterpart.translate(\n                                                      \"transfer.errors.insufficient\"\n                                                  )\n                                                : fee.getAmount({real: true})\n                                        }\n                                        autoComplete=\"off\"\n                                    />\n                                </div>\n\n                                <div\n                                    className=\"grid-block small-4 no-margin no-overflow buy-sell-box\"\n                                    style={{\n                                        paddingLeft:\n                                            feeAssets.length !== 1 ? 0 : 5\n                                    }}\n                                >\n                                    <select\n                                        style={\n                                            feeAssets.length === 1\n                                                ? {background: \"none\"}\n                                                : null\n                                        }\n                                        disabled={feeAssets.length === 1}\n                                        value={feeAssets.indexOf(\n                                            this.props.feeAsset\n                                        )}\n                                        className={\n                                            \"form-control\" +\n                                            (feeAssets.length !== 1\n                                                ? \" buysell-select\"\n                                                : \"\")\n                                        }\n                                        onChange={this.props.onChangeFeeAsset}\n                                    >\n                                        {options}\n                                    </select>\n                                </div>\n                            </div>\n\n                            {marketFee}\n                        </div>\n                        <div>\n                            <div className=\"grid-content clear-fix no-padding\">\n                                <table className=\"float-left\">\n                                    <tbody>\n                                        <tr className=\"buy-sell-info\">\n                                            <td>\n                                                <Translate content=\"exchange.balance\" />:\n                                            </td>\n                                            <td\n                                                style={{\n                                                    paddingLeft: 5,\n                                                    textAlign: \"right\"\n                                                }}\n                                            >\n                                                <span\n                                                    style={{\n                                                        borderBottom:\n                                                            \"#A09F9F 1px dotted\",\n                                                        cursor: \"pointer\"\n                                                    }}\n                                                    onClick={this._addBalance.bind(\n                                                        this,\n                                                        balanceToAdd\n                                                    )}\n                                                >\n                                                    {utils.format_number(\n                                                        balanceAmount.getAmount(\n                                                            {real: true}\n                                                        ),\n                                                        balancePrecision\n                                                    )}{\" \"}\n                                                    <AssetName\n                                                        name={balanceSymbol}\n                                                    />\n                                                </span>\n                                            </td>\n                                        </tr>\n\n                                        <tr className=\"buy-sell-info\">\n                                            <td style={{paddingTop: 5}}>\n                                                {isBid ? (\n                                                    <Translate content=\"exchange.lowest_ask\" />\n                                                ) : (\n                                                    <Translate content=\"exchange.highest_bid\" />\n                                                )}:&nbsp;\n                                            </td>\n                                            {currentPrice ? (\n                                                <td\n                                                    style={{\n                                                        paddingLeft: 5,\n                                                        textAlign: \"right\",\n                                                        paddingTop: 5,\n                                                        verticalAlign: \"bottom\"\n                                                    }}\n                                                >\n                                                    <span\n                                                        style={{\n                                                            borderBottom:\n                                                                \"#A09F9F 1px dotted\",\n                                                            cursor: \"pointer\"\n                                                        }}\n                                                        onClick={this.props.setPrice.bind(\n                                                            this,\n                                                            type,\n                                                            currentPriceObject.sellPrice()\n                                                        )}\n                                                    >\n                                                        <PriceText\n                                                            price={currentPrice}\n                                                            quote={quote}\n                                                            base={base}\n                                                        />{\" \"}\n                                                        <AssetName\n                                                            name={base.get(\n                                                                \"symbol\"\n                                                            )}\n                                                        />/<AssetName\n                                                            name={quote.get(\n                                                                \"symbol\"\n                                                            )}\n                                                        />\n                                                    </span>\n                                                </td>\n                                            ) : null}\n                                        </tr>\n\n                                        <tr className=\"buy-sell-info\">\n                                            <td style={{paddingTop: 5}}>\n                                                <Translate content=\"transaction.expiration\" />:\n                                            </td>\n                                            <td className=\"expiration-datetime-picker\">\n                                                <select\n                                                    onChange={\n                                                        this.props\n                                                            .onExpirationTypeChange\n                                                    }\n                                                    value={\n                                                        this.props\n                                                            .expirationType\n                                                    }\n                                                >\n                                                    {expirationsOptionsList}\n                                                </select>\n                                                {this.props.expirationType ===\n                                                \"SPECIFIC\" ? (\n                                                    <DatePicker\n                                                        pickerPosition={\n                                                            \"bottom center\"\n                                                        }\n                                                        wrapperClassName={theme}\n                                                        timePicker={true}\n                                                        min={minExpirationDate}\n                                                        inputFormat={\n                                                            \"Do MMM YYYY hh:mm A\"\n                                                        }\n                                                        value={\n                                                            this.props\n                                                                .expirationCustomTime\n                                                        }\n                                                        onChange={\n                                                            this.props\n                                                                .onExpirationCustomChange\n                                                        }\n                                                    />\n                                                ) : null}\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n\n                                {/* BUY/SELL button */}\n                                {disabledText ? (\n                                    <div\n                                        className=\"float-right\"\n                                        data-tip={disabledText}\n                                        data-place=\"right\"\n                                    >\n                                        <input\n                                            style={{margin: 0}}\n                                            className={buttonClass}\n                                            type=\"submit\"\n                                            onClick={onSubmit.bind(this, true)}\n                                            value={buttonText}\n                                        />\n                                    </div>\n                                ) : (\n                                    <div className=\"float-right\" data-tip={\"\"}>\n                                        <input\n                                            style={{margin: 0}}\n                                            className={buttonClass}\n                                            type=\"submit\"\n                                            onClick={onSubmit.bind(this, true)}\n                                            value={buttonText}\n                                        />\n                                    </div>\n                                )}\n\n                                {/* SHORT button */}\n                                {disabledText && isPredictionMarket ? (\n                                    <div\n                                        style={{paddingRight: 10}}\n                                        className=\"float-right\"\n                                        data-tip={disabledText}\n                                        data-place=\"right\"\n                                    >\n                                        <input\n                                            style={{margin: 0}}\n                                            className={buttonClass}\n                                            type=\"submit\"\n                                            onClick={onSubmit.bind(this, false)}\n                                            value={forceSellText}\n                                        />\n                                    </div>\n                                ) : isPredictionMarket ? (\n                                    <div\n                                        style={{paddingRight: 10}}\n                                        className=\"float-right\"\n                                        data-tip={\"\"}\n                                    >\n                                        <input\n                                            style={{margin: 0}}\n                                            className={buttonClass}\n                                            type=\"submit\"\n                                            onClick={onSubmit.bind(this, false)}\n                                            value={forceSellText}\n                                        />\n                                    </div>\n                                ) : null}\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <SimpleDepositWithdraw\n                    ref=\"deposit_modal\"\n                    action=\"deposit\"\n                    fiatModal={false}\n                    account={this.props.currentAccount.get(\"name\")}\n                    sender={this.props.currentAccount.get(\"id\")}\n                    asset={this.props[isBid ? \"base\" : \"quote\"].get(\"id\")}\n                    modalId={\n                        \"simple_deposit_modal\" + (type === \"bid\" ? \"\" : \"_ask\")\n                    }\n                    balances={[this.props.balance]}\n                    {...backedCoin}\n                />\n\n                {/* Bridge modal */}\n                <SimpleDepositBlocktradesBridge\n                    ref=\"bridge_modal\"\n                    action=\"deposit\"\n                    account={this.props.currentAccount.get(\"name\")}\n                    sender={this.props.currentAccount.get(\"id\")}\n                    asset={this.props.balanceId}\n                    modalId={\n                        \"simple_bridge_modal\" + (type === \"bid\" ? \"\" : \"_ask\")\n                    }\n                    balances={[this.props.balance]}\n                    bridges={this.props.currentBridges}\n                />\n            </div>\n        );\n    }\n}\n\nexport default BindToChainState(BuySell);\n","import {connect} from \"alt-react\";\nimport AssetStore from \"stores/AssetStore\";\nimport React from \"react\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport {Link} from \"react-router-dom\";\nimport AssetName from \"../Utility/AssetName\";\nimport Icon from \"../Icon/Icon\";\nimport {debounce} from \"lodash-es\";\nimport {ChainStore} from \"bitsharesjs\";\nimport Translate from \"react-translate-component\";\nimport LoadingIndicator from \"../LoadingIndicator\";\nimport AssetActions from \"actions/AssetActions\";\nimport {ChainValidation} from \"bitsharesjs\";\nimport counterpart from \"counterpart\";\nimport utils from \"common/utils\";\nimport {hasGatewayPrefix} from \"common/gatewayUtils\";\n\nclass MarketPickerWrapper extends React.Component {\n    constructor() {\n        super();\n\n        this.state = this.initialState();\n\n        this.getAssetList = debounce(AssetActions.getAssetList.defer, 150);\n    }\n\n    initialState() {\n        return {\n            marketsList: \"\",\n            issuersList: \"\",\n            lookupQuote: null,\n            allMarkets: \"\",\n            allIssuers: \"\",\n            inputValue: \"\"\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.marketPickerAsset !== this.props.marketPickerAsset)\n            this.setState(this.initialState());\n\n        if (nextProps.searchAssets !== this.props.searchAssets)\n            this.assetFilter();\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            np.marketPickerAsset !== this.props.marketPickerAsset ||\n            np.searchAssets !== this.props.searchAssets ||\n            ns.marketsList !== this.state.marketsList ||\n            ns.issuersList !== this.state.issuersList ||\n            !utils.are_equal_shallow(ns, this.state)\n        );\n    }\n\n    _onSelectIssuer(e) {\n        let filterByIssuerName = e.target.value == \"0\" ? null : e.target.value;\n        this.assetFilter(filterByIssuerName);\n    }\n\n    _onInputName(getBackedAssets, e) {\n        let toFind = e.target.value.trim().toUpperCase();\n        let isValidName = !ChainValidation.is_valid_symbol_error(toFind, true);\n\n        /* Don't lookup invalid asset names */\n        if (toFind && toFind.length >= 2 && !isValidName) return;\n\n        this.setState({\n            inputValue: e.target.value.trim(),\n            activeSearch: true,\n            allMarkets: \"\",\n            allIssuers: \"\",\n            marketsList: \"\",\n            issuersList: \"\"\n        });\n\n        if (this.state.inputValue !== toFind) {\n            this.timer && clearTimeout(this.timer);\n        }\n\n        this.timer = setTimeout(() => {\n            this._lookupAssets(toFind, getBackedAssets);\n        }, 1500);\n    }\n\n    _lookupAssets(value, gatewayAssets = false) {\n        if (!value && value !== \"\") return;\n\n        let quote = value.toUpperCase();\n\n        this.getAssetList(quote, 10, gatewayAssets);\n\n        this.setState({\n            lookupQuote: quote\n        });\n    }\n\n    _changeMarketPickerFilter(value) {\n        this.setState({\n            marketsList: \"\",\n            issuersList: \"\",\n            lookupQuote: null,\n            allMarkets: \"\",\n            allIssuers: \"\",\n            inputValue: \"\",\n            marketPickerTab: value,\n            activeSearch: false\n        });\n    }\n\n    _fetchIssuer(asset) {\n        let issuer = ChainStore.getObject(asset.issuer, false, false);\n        // Issuer may sometimes not resolve at first.\n        // A waiter may be required here\n        if (!issuer) {\n            return;\n        } else {\n            return issuer;\n        }\n    }\n\n    assetFilter(filterByIssuerName = null) {\n        let {searchAssets, marketPickerAsset} = this.props;\n\n        let {inputValue, lookupQuote, marketPickerTab} = this.state;\n\n        this.setState({\n            activeSearch: true\n        });\n\n        let assetCount = 0;\n        let allMarkets = [];\n        let allIssuers = [];\n\n        let baseSymbol = this.props.baseAsset.get(\"symbol\");\n        let quoteSymbol = this.props.quoteAsset.get(\"symbol\");\n\n        if (searchAssets.size && !!inputValue && inputValue.length > 2) {\n            searchAssets\n                .filter(a => {\n                    try {\n                        if (a.options.description) {\n                            let description = JSON.parse(a.options.description);\n                            if (\"visible\" in description) {\n                                if (!description.visible) return false;\n                            }\n                        }\n                    } catch (e) {}\n\n                    return a.symbol.indexOf(lookupQuote) !== -1;\n                })\n                .forEach(asset => {\n                    if (assetCount > 100) return;\n                    assetCount++;\n\n                    let issuer = this._fetchIssuer(asset);\n\n                    let base = this.props.baseAsset.get(\"symbol\");\n                    let marketID = asset.symbol + \"_\" + base;\n\n                    let isQuoteAsset = quoteSymbol == marketPickerAsset;\n                    let includeAsset =\n                        (isQuoteAsset && asset.symbol != baseSymbol) ||\n                        (!isQuoteAsset && asset.symbol != quoteSymbol);\n\n                    if (\n                        includeAsset &&\n                        (!filterByIssuerName ||\n                            filterByIssuerName == issuer.get(\"name\")) &&\n                        ((marketPickerTab == \"search\" &&\n                            asset.symbol.startsWith(\n                                inputValue.toUpperCase()\n                            )) ||\n                            (!marketPickerTab || marketPickerTab == \"filter\"))\n                    ) {\n                        allMarkets.push([\n                            marketID,\n                            {\n                                quote: asset.symbol,\n                                base: base,\n                                issuer: !issuer ? null : issuer.get(\"name\")\n                            }\n                        ]);\n                    }\n                    if (\n                        includeAsset &&\n                        issuer &&\n                        !allIssuers.includes(issuer.get(\"name\"))\n                    )\n                        allIssuers.push(issuer.get(\"name\"));\n                });\n        }\n\n        let marketsList = this.state.marketsList;\n        let issuersList = this.state.issuersList;\n\n        issuersList = !allIssuers\n            ? null\n            : allIssuers\n                  .sort((a, b) => {\n                      if (a > b) {\n                          return 1;\n                      } else if (a < b) {\n                          return -1;\n                      } else {\n                          return 0;\n                      }\n                  })\n                  .map(issuer => {\n                      return (\n                          <option key={issuer} value={issuer}>\n                              {issuer}\n                          </option>\n                      );\n                  });\n\n        marketsList = !allMarkets\n            ? null\n            : allMarkets\n                  .sort((a, b) => {\n                      let aIsKnownGateway = hasGatewayPrefix(a[1][\"quote\"]);\n                      let bIsKnownGateway = hasGatewayPrefix(b[1][\"quote\"]);\n\n                      if (aIsKnownGateway && !bIsKnownGateway) {\n                          return -1;\n                      } else if (bIsKnownGateway && !aIsKnownGateway) {\n                          return 1;\n                      } else if (a[1][\"quote\"] > b[1][\"quote\"]) {\n                          return 1;\n                      } else if (a[1][\"quote\"] < b[1][\"quote\"]) {\n                          return -1;\n                      } else {\n                          return 0;\n                      }\n                  })\n                  .map(market => {\n                      return (\n                          <li key={market[0]}>\n                              <AssetName name={market[1][\"quote\"]} />\n\n                              <span style={{float: \"right\"}}>\n                                  <Link\n                                      onClick={() => {\n                                          this.props.onToggleMarketPicker(null),\n                                              MarketsActions.switchMarket();\n                                      }}\n                                      to={\n                                          quoteSymbol == marketPickerAsset\n                                              ? `/market/${\n                                                    market[1][\"quote\"]\n                                                }_${baseSymbol}`\n                                              : `/market/${quoteSymbol}_${\n                                                    market[1][\"quote\"]\n                                                }`\n                                      }\n                                  >\n                                      <Translate content=\"exchange.market_picker.use\" />\n                                  </Link>\n                              </span>\n                          </li>\n                      );\n                  });\n\n        this.setState({\n            allMarkets,\n            allIssuers,\n            marketsList,\n            issuersList,\n            activeSearch: false\n        });\n    }\n\n    render() {\n        let {marketPickerAsset} = this.props;\n\n        let {\n            marketPickerTab,\n            inputValue,\n            allMarkets,\n            issuersList,\n            marketsList\n        } = this.state;\n\n        return (\n            <div className=\"marketPicker\">\n                <div className=\"marketPicker__header\">\n                    <div className=\"marketPicker__filterType\">\n                        <Translate\n                            className=\"marketPicker__filterHeader\"\n                            component=\"span\"\n                            content=\"exchange.market_picker.search_mode\"\n                        />\n                        <Icon\n                            style={{marginLeft: 5, cursor: \"pointer\"}}\n                            className={\n                                !this.state.marketPickerTab ||\n                                this.state.marketPickerTab == \"filter\"\n                                    ? \"blue-icon\"\n                                    : \"\"\n                            }\n                            size=\"1_5x\"\n                            onClick={this._changeMarketPickerFilter.bind(\n                                this,\n                                \"filter\"\n                            )}\n                            name=\"filter\"\n                            title=\"icons.filter\"\n                        />\n                        <Icon\n                            style={{marginLeft: 5, cursor: \"pointer\"}}\n                            className={\n                                this.state.marketPickerTab == \"search\"\n                                    ? \"blue-icon\"\n                                    : \"\"\n                            }\n                            size=\"1_5x\"\n                            onClick={this._changeMarketPickerFilter.bind(\n                                this,\n                                \"search\"\n                            )}\n                            name=\"zoom\"\n                            title=\"icons.zoom\"\n                        />\n                    </div>\n                    <Translate\n                        className=\"marketPicker__title\"\n                        component=\"span\"\n                        content=\"exchange.market_picker.title\"\n                    />\n                </div>\n                <div className=\"marketPicker__subHeader\">\n                    <Translate content=\"exchange.market_picker.sub_title\" />&nbsp;\n                    <Link\n                        to={`/asset/${marketPickerAsset}`}\n                        style={{\n                            cursor: \"pointer\",\n                            color: \"lightblue !important\"\n                        }}\n                    >\n                        <AssetName name={marketPickerAsset} />\n                        <Icon\n                            className=\"blue-icon\"\n                            style={{marginLeft: 5}}\n                            name=\"info-circle-o\"\n                            title=\"icons.info_circle_o\"\n                        />\n                    </Link>\n                </div>\n                <hr />\n                <div\n                    id=\"search\"\n                    style={{display: marketPickerTab == \"search\" ? \"\" : \"none\"}}\n                >\n                    <div>\n                        <section className=\"block-list no-border-bottom\">\n                            <header>\n                                <Translate\n                                    component=\"span\"\n                                    content=\"exchange.market_picker.search_for_asset\"\n                                />\n                            </header>\n                            <input\n                                type=\"text\"\n                                value={inputValue}\n                                onChange={this._onInputName.bind(this, false)}\n                                placeholder={counterpart.translate(\n                                    \"exchange.market_picker.search\"\n                                )}\n                                maxLength=\"16\"\n                                tabIndex={2}\n                            />\n                        </section>\n                    </div>\n                </div>\n                <div\n                    id=\"filter\"\n                    style={{\n                        display:\n                            !this.state.marketPickerTab ||\n                            this.state.marketPickerTab == \"filter\"\n                                ? \"\"\n                                : \"none\"\n                    }}\n                >\n                    <div>\n                        <section className=\"block-list no-border-bottom\">\n                            <header>\n                                <Translate\n                                    component=\"span\"\n                                    content=\"exchange.market_picker.find_by_asset\"\n                                />\n                            </header>\n                            <input\n                                type=\"text\"\n                                value={inputValue}\n                                onChange={this._onInputName.bind(this, true)}\n                                placeholder={counterpart.translate(\n                                    \"exchange.market_picker.search\"\n                                )}\n                                maxLength=\"16\"\n                                tabIndex={2}\n                            />\n                        </section>\n                    </div>\n                    <div>\n                        <section className=\"block-list no-border-bottom\">\n                            <header>\n                                <Translate\n                                    component=\"span\"\n                                    content=\"exchange.market_picker.filter_by_issuer\"\n                                />\n                            </header>\n                            <ul>\n                                <li className=\"with-dropdpwn\">\n                                    <select\n                                        className=\"settings-select\"\n                                        onChange={this._onSelectIssuer.bind(\n                                            this\n                                        )}\n                                        style={{border: 0}}\n                                    >\n                                        <option key=\"0\" value=\"0\">\n                                            {counterpart.translate(\n                                                \"exchange.market_picker.show_all\"\n                                            )}{\" \"}\n                                        </option>\n                                        {issuersList}\n                                    </select>\n                                </li>\n                            </ul>\n                        </section>\n                    </div>\n                </div>\n                <section className=\"block-list no-border-bottom\">\n                    <Translate\n                        component=\"header\"\n                        content=\"exchange.market_picker.results\"\n                        total_assets={!allMarkets ? 0 : allMarkets.length}\n                    />\n                </section>\n                {this.state.activeSearch &&\n                this.state.inputValue.length != 0 ? (\n                    <div style={{textAlign: \"center\"}}>\n                        <LoadingIndicator type=\"three-bounce\" />\n                    </div>\n                ) : (\n                    <div className=\"results\">\n                        <ul style={{marginLeft: 0}}>{marketsList}</ul>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nclass MarketPicker extends React.Component {\n    render() {\n        return <MarketPickerWrapper {...this.props} />;\n    }\n}\n\nMarketPicker = connect(\n    MarketPicker,\n    {\n        listenTo() {\n            return [AssetStore];\n        },\n        getProps() {\n            return {\n                searchAssets: AssetStore.getState().assets,\n                assetsLoading: AssetStore.getState().assetsLoading\n            };\n        }\n    }\n);\n\nexport default MarketPicker;\n","import React from \"react\";\nconst TradingView = require(\"../../../charting_library/charting_library.min.js\");\nimport colors from \"assets/colors\";\nimport {getResolutionsFromBuckets, getTVTimezone} from \"./tradingViewClasses\";\n\n// import {connect} from \"alt-react\";\n// import MarketsStore from \"stores/MarketsStore\";\n\nexport default class TradingViewPriceChart extends React.Component {\n    loadTradingView(props) {\n        const {dataFeed} = props;\n        let themeColors = colors[props.theme];\n\n        if (!dataFeed) return;\n        if (!!this.tvWidget) return;\n\n        if (__DEV__)\n            console.log(\n                \"currentResolution\",\n                getResolutionsFromBuckets([props.bucketSize])[0],\n                \"symbol\",\n                props.quoteSymbol + \"_\" + props.baseSymbol,\n                \"timezone:\",\n                getTVTimezone()\n            );\n\n        dataFeed.update({\n            resolutions: props.buckets,\n            ticker: props.quoteSymbol + \"_\" + props.baseSymbol,\n            interval: getResolutionsFromBuckets([props.bucketSize])[0]\n        });\n\n        if (__DEV__) console.log(\"*** Load Chart ***\");\n        if (__DEV__) console.time(\"*** Chart load time: \");\n        this.tvWidget = new TradingView.widget({\n            fullscreen: false,\n            symbol: props.quoteSymbol + \"_\" + props.baseSymbol,\n            interval: getResolutionsFromBuckets([props.bucketSize])[0],\n            library_path: `${\n                __ELECTRON__ ? __BASE_URL__ : \"\"\n            }/charting_library/`,\n            datafeed: dataFeed,\n            container_id: \"tv_chart\",\n            charts_storage_url: \"https://saveload.tradingview.com\",\n            charts_storage_api_version: \"1.1\",\n            client_id: \"tradingview.com\",\n            user_id: \"public_user_id\",\n            autosize: true,\n            locale: props.locale,\n            timezone: getTVTimezone(),\n            toolbar_bg: themeColors.bgColor,\n            overrides: {\n                \"paneProperties.background\": themeColors.bgColor,\n                \"paneProperties.horzGridProperties.color\":\n                    themeColors.axisLineColor,\n                \"paneProperties.vertGridProperties.color\":\n                    themeColors.axisLineColor,\n                \"scalesProperties.lineColor\": themeColors.axisLineColor,\n                \"scalesProperties.textColor\": themeColors.textColor\n            },\n            custom_css_url: props.theme + \".css\",\n            enabled_features: [\n                \"study_templates\",\n                \"keep_left_toolbar_visible_on_small_screens\"\n            ],\n            disabled_features: [\n                \"header_saveload\",\n                \"symbol_info\",\n                \"symbol_search_hot_key\",\n                \"border_around_the_chart\",\n                \"header_symbol_search\",\n                \"header_compare\"\n            ],\n            debug: false,\n            preset: this.props.mobile ? \"mobile\" : \"\"\n        });\n\n        this.tvWidget.onChartReady(() => {\n            if (__DEV__) console.log(\"*** Chart Ready ***\");\n            if (__DEV__) console.timeEnd(\"*** Chart load time: \");\n            dataFeed.update({\n                onMarketChange: this._setSymbol.bind(this)\n            });\n        });\n    }\n\n    componentWillReceiveProps(np) {\n        if (!np.marketReady) return;\n        if (!this.props.dataFeed && np.dataFeed) {\n            loadTradingView(np);\n        }\n    }\n\n    _setSymbol(ticker) {\n        if (this.tvWidget) {\n            this.tvWidget.setSymbol(\n                ticker,\n                getResolutionsFromBuckets([this.props.bucketSize])[0]\n            );\n        }\n    }\n\n    componentDidMount() {\n        this.loadTradingView(this.props);\n    }\n\n    componentWillUnmount() {\n        this.props.dataFeed.clearSubs();\n    }\n\n    shouldComponentUpdate(np) {\n        if (np.chartHeight !== this.props.chartHeight) return true;\n        if (!!this.tvWidget) return false;\n        if (!np.marketReady) return false;\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"small-12\">\n                <div\n                    className=\"exchange-bordered\"\n                    style={{\n                        marginTop: 10,\n                        marginBottom: 10,\n                        height: this.props.chartHeight + \"px\"\n                    }}\n                    id=\"tv_chart\"\n                />\n            </div>\n        );\n    }\n}\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?e(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],e):e(t.TradingView=t.TradingView||{})}(this,function(t){\"use strict\";function e(t,o){var i=n({},t);for(var s in o)\"object\"!=typeof t[s]||null===t[s]||Array.isArray(t[s])?void 0!==o[s]&&(i[s]=o[s]):i[s]=e(t[s],o[s]);return i}function o(){return\"1.12 (internal id 630b704a @ 2018-06-06 02:16:11.305509)\"}function i(t){window.addEventListener(\"DOMContentLoaded\",t,!1)}var n=Object.assign||function(t){for(var e,o=arguments,i=1,n=arguments.length;i<n;i++){e=o[i];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s])}return t},s={mobile:{disabled_features:[\"left_toolbar\",\"header_widget\",\"timeframes_toolbar\",\"edit_buttons_in_legend\",\"context_menus\",\"control_bar\",\"border_around_the_chart\"],enabled_features:[]}},r={width:800,height:500,symbol:\"AA\",interval:\"D\",timezone:\"UTC\",container_id:\"\",library_path:\"\",locale:\"en\",widgetbar:{details:!1,watchlist:!1,watchlist_settings:{default_symbols:[]}},overrides:{\"mainSeriesProperties.showCountdown\":!1},studies_overrides:{},brokerConfig:{configFlags:{}},fullscreen:!1,autosize:!1,disabled_features:[],enabled_features:[],debug:!1,logo:{},time_frames:[{text:\"5y\",resolution:\"W\"},{text:\"1y\",resolution:\"W\"},{text:\"6m\",resolution:\"120\"},{text:\"3m\",resolution:\"60\"},{text:\"1m\",resolution:\"30\"},{text:\"5d\",resolution:\"5\"},{text:\"1d\",resolution:\"1\"}],client_id:\"0\",user_id:\"0\",charts_storage_api_version:\"1.0\",favorites:{intervals:[],chartTypes:[]}},a=function(){function t(t){if(this._id=\"tradingview_\"+(1048576*(1+Math.random())|0).toString(16).substring(1),this._ready=!1,this._readyHandlers=[],this._onWindowResize=this._autoResizeChart.bind(this),!t.datafeed)throw new Error(\"Datafeed is not defined\");if(this._options=e(r,t),t.preset){var o=s[t.preset];o?(void 0!==this._options.disabled_features?this._options.disabled_features=this._options.disabled_features.concat(o.disabled_features):this._options.disabled_features=o.disabled_features,void 0!==this._options.enabled_features?this._options.enabled_features=this._options.enabled_features.concat(o.enabled_features):this._options.enabled_features=o.enabled_features):console.warn(\"Unknown preset: `\"+t.preset+\"`\")}this._create()}return t.prototype.onChartReady=function(t){this._ready?t.call(this):this._readyHandlers.push(t)},t.prototype.onGrayedObjectClicked=function(t){this._innerAPI().onGrayedObjectClicked(t)},t.prototype.onShortcut=function(t,e){this._innerWindow().createShortcutAction(t,e)},t.prototype.subscribe=function(t,e){this._innerAPI().subscribe(t,e)},t.prototype.unsubscribe=function(t,e){this._innerAPI().unsubscribe(t,e)},t.prototype.chart=function(t){return this._innerAPI().chart(t)},t.prototype.setLanguage=function(t){this.remove(),this._options.locale=t,this._create()},t.prototype.setSymbol=function(t,e,o){this._innerAPI().changeSymbol(t,e+\"\",o)},t.prototype.remove=function(){window.removeEventListener(\"resize\",this._onWindowResize),this._readyHandlers.splice(0,this._readyHandlers.length),delete window[this._id];var t=this._getIFrameElement();t.contentWindow.destroyChart(),t.parentNode&&t.parentNode.removeChild(t)},t.prototype.closePopupsAndDialogs=function(){this._innerAPI().closePopupsAndDialogs()},t.prototype.selectLineTool=function(t){this._innerAPI().selectLineTool(t)},t.prototype.selectedLineTool=function(){return this._innerAPI().selectedLineTool()},t.prototype.save=function(t){this._innerAPI().saveChart(t)},t.prototype.load=function(t,e){this._innerAPI().loadChart({json:t,extendedData:e})},t.prototype.getSavedCharts=function(t){this._innerAPI().getSavedCharts(t)},t.prototype.loadChartFromServer=function(t){this._innerAPI().loadChartFromServer(t)},t.prototype.saveChartToServer=function(t,e,o,i){this._innerAPI().saveChartToServer(t,e,o,i)},t.prototype.removeChartFromServer=function(t,e){this._innerAPI().removeChartFromServer(t,e)},t.prototype.onContextMenu=function(t){this._innerAPI().onContextMenu(t)},t.prototype.createButton=function(t){return this._innerWindow().createButton(t)},t.prototype.showNoticeDialog=function(t){this._innerAPI().showNoticeDialog(t)},t.prototype.showConfirmDialog=function(t){this._innerAPI().showConfirmDialog(t)},t.prototype.showLoadChartDialog=function(){this._innerAPI().showLoadChartDialog()},t.prototype.showSaveAsChartDialog=function(){this._innerAPI().showSaveAsChartDialog()},t.prototype.symbolInterval=function(){return this._innerAPI().getSymbolInterval()},t.prototype.mainSeriesPriceFormatter=function(){return this._innerAPI().mainSeriesPriceFormatter()},t.prototype.getIntervals=function(){return this._innerAPI().getIntervals()},t.prototype.getStudiesList=function(){return this._innerAPI().getStudiesList()},t.prototype.addCustomCSSFile=function(t){this._innerWindow().addCustomCSSFile(t)},t.prototype.applyOverrides=function(t){this._options=e(this._options,{overrides:t}),this._innerWindow().applyOverrides(t)},t.prototype.applyStudiesOverrides=function(t){this._innerWindow().applyStudiesOverrides(t)},t.prototype.watchList=function(){return this._innerAPI().watchlist()},t.prototype.activeChart=function(){return this._innerAPI().activeChart()},t.prototype.chartsCount=function(){return this._innerAPI().chartsCount()},t.prototype.layout=function(){return this._innerAPI().layout()},t.prototype.setLayout=function(t){this._innerAPI().setLayout(t)},t.prototype._getIFrameElement=function(){var t=document.getElementById(this._id);if(null===t)throw new Error(\"There is no such iframe\");return t},t.prototype._innerAPI=function(){return this._getIFrameElement().contentWindow.tradingViewApi},t.prototype._innerWindow=function(){return this._getIFrameElement().contentWindow},t.prototype._autoResizeChart=function(){this._options.fullscreen&&(this._getIFrameElement().style.height=window.innerHeight+\"px\")},t.prototype._create=function(){var t=this,e=this._render(),o=document.getElementById(this._options.container_id);if(null===o)throw new Error(\"There is no such element - #\"+this._options.container_id);o.innerHTML=e;var i=this._getIFrameElement();(this._options.autosize||this._options.fullscreen)&&(i.style.width=\"100%\",this._options.fullscreen||(i.style.height=\"100%\")),window.addEventListener(\"resize\",this._onWindowResize),this._onWindowResize();var n=function(){i.removeEventListener(\"load\",n,!1),i.contentWindow.widgetReady(function(){t._ready=!0;for(var e=0,o=t._readyHandlers;e<o.length;e++){o[e].call(t)}i.contentWindow.initializationFinished()})};i.addEventListener(\"load\",n,!1)},t.prototype._render=function(){var t=window;t[this._id]={datafeed:this._options.datafeed,customFormatters:this._options.customFormatters,brokerFactory:this._options.brokerFactory,overrides:this._options.overrides,studiesOverrides:this._options.studies_overrides,disabledFeatures:this._options.disabled_features,enabledFeatures:this._options.enabled_features,brokerConfig:this._options.brokerConfig,restConfig:this._options.restConfig,favorites:this._options.favorites,logo:this._options.logo,numeric_formatting:this._options.numeric_formatting,rss_news_feed:this._options.rss_news_feed,newsProvider:this._options.news_provider,loadLastChart:this._options.load_last_chart,saveLoadAdapter:this._options.save_load_adapter,loading_screen:this._options.loading_screen,settingsAdapter:this._options.settings_adapter},this._options.saved_data&&(t[this._id].chartContent={json:this._options.saved_data});var e=(this._options.library_path||\"\")+\"static/tv-chart.630b704a2b9d0eaf1593.html#localserver=1&symbol=\"+encodeURIComponent(this._options.symbol)+\"&interval=\"+encodeURIComponent(this._options.interval)+(this._options.timeframe?\"&timeframe=\"+encodeURIComponent(this._options.timeframe):\"\")+(this._options.toolbar_bg?\"&toolbarbg=\"+this._options.toolbar_bg.replace(\"#\",\"\"):\"\")+(this._options.studies_access?\"&studiesAccess=\"+encodeURIComponent(JSON.stringify(this._options.studies_access)):\"\")+\"&widgetbar=\"+encodeURIComponent(JSON.stringify(this._options.widgetbar))+(this._options.drawings_access?\"&drawingsAccess=\"+encodeURIComponent(JSON.stringify(this._options.drawings_access)):\"\")+\"&timeFrames=\"+encodeURIComponent(JSON.stringify(this._options.time_frames))+\"&locale=\"+encodeURIComponent(this._options.locale)+\"&uid=\"+encodeURIComponent(this._id)+\"&clientId=\"+encodeURIComponent(String(this._options.client_id))+\"&userId=\"+encodeURIComponent(String(this._options.user_id))+(this._options.charts_storage_url?\"&chartsStorageUrl=\"+encodeURIComponent(this._options.charts_storage_url):\"\")+(this._options.charts_storage_api_version?\"&chartsStorageVer=\"+encodeURIComponent(this._options.charts_storage_api_version):\"\")+(this._options.indicators_file_name?\"&indicatorsFile=\"+encodeURIComponent(this._options.indicators_file_name):\"\")+(this._options.custom_css_url?\"&customCSS=\"+encodeURIComponent(this._options.custom_css_url):\"\")+(this._options.auto_save_delay?\"&autoSaveDelay=\"+encodeURIComponent(String(this._options.auto_save_delay)):\"\")+\"&debug=\"+this._options.debug+(this._options.snapshot_url?\"&snapshotUrl=\"+encodeURIComponent(this._options.snapshot_url):\"\")+(this._options.timezone?\"&timezone=\"+encodeURIComponent(this._options.timezone):\"\")+(this._options.study_count_limit?\"&studyCountLimit=\"+encodeURIComponent(String(this._options.study_count_limit)):\"\")+(this._options.symbol_search_request_delay?\"&ssreqdelay=\"+encodeURIComponent(String(this._options.symbol_search_request_delay)):\"\");return'<iframe id=\"'+this._id+'\" name=\"'+this._id+'\"  src=\"'+e+'\"'+(this._options.autosize||this._options.fullscreen?\"\":' width=\"'+this._options.width+'\" height=\"'+this._options.height+'\"')+' frameborder=\"0\" allowTransparency=\"true\" scrolling=\"no\" allowfullscreen style=\"display:block;\"></iframe>'},t}(),d=a;window.TradingView=window.TradingView||{},window.TradingView.version=o,t.version=o,t.onready=i,t.widget=d,Object.defineProperty(t,\"__esModule\",{value:!0})});\n","module.exports = {\n    midnightTheme: {\n        bidColor: \"#50D2C2\",\n        bidFillColor: \"rgba(80, 210, 194, 0.5)\",\n        askColor: \"#E3745B\",\n        askFillColor: \"rgba(227, 116, 91, 0.5)\",\n        callColor: \"#BBBF2B\",\n        settleColor: \"rgba(125, 134, 214, 1)\",\n        settleFillColor: \"rgba(125, 134, 214, 0.5)\",\n        positiveColor: \"#6BA583\",\n        negativeColor: \"#DB0000\",\n        strokeColor: \"#FFFF00\",\n        primaryText: \"#e0e0e0\",\n        volumeColor: \"#848484\",\n\n        //tooltip\n        tooltipBackgroundColor: \"rgba(0, 0, 0, 0.4)\",\n        tooltipColor: \"#fff\",\n        tooltipFillColor: \"#fff\",\n        //axis\n        axisLabelsColor: \"#fff\",\n        axisLineColor: \"rgba(200, 200, 200, 0.3)\",\n        indicatorLineColor: \"#FFFFFF\",\n        bgColor: \"#191a1f\",\n        textColor: \"#e0e0e0\"\n    },\n    rudexDarkTheme: {\n        bidColor: \"#50D2C2\",\n        bidFillColor: \"rgba(80, 210, 194, 0.5)\",\n        askColor: \"#E3745B\",\n        askFillColor: \"rgba(227, 116, 91, 0.5)\",\n        callColor: \"#BBBF2B\",\n        settleColor: \"rgba(125, 134, 214, 1)\",\n        settleFillColor: \"rgba(125, 134, 214, 0.5)\",\n        positiveColor: \"#6BA583\",\n        negativeColor: \"#DB0000\",\n        strokeColor: \"#FFFF00\",\n        primaryText: \"#e0e0e0\",\n        volumeColor: \"#848484\",\n\n        //tooltip\n        tooltipBackgroundColor: \"rgba(0, 0, 0, 0.4)\",\n        tooltipColor: \"#fff\",\n        tooltipFillColor: \"#fff\",\n        //axis\n        axisLabelsColor: \"#fff\",\n        axisLineColor: \"#AAAAAA\",\n        indicatorLineColor: \"#FFFFFF\",\n        bgColor: \"#191a1f\",\n        textColor: \"#e0e0e0\"\n    },\n    darkTheme: {\n        bidColor: \"#6BA583\",\n        bidFillColor: \"rgba(80, 210, 194, 0.5)\",\n        askColor: \"#E3745B\",\n        askFillColor: \"rgba(227, 116, 91, 0.5)\",\n        callColor: \"#BBBF2B\",\n        settleColor: \"rgba(125, 134, 214, 1)\",\n        settleFillColor: \"rgba(125, 134, 214, 0.5)\",\n        positiveColor: \"#258A14\",\n        negativeColor: \"#DB0000\",\n        strokeColor: \"#FFFF00\",\n        primaryText: \"#e0e0e0\",\n        volumeColor: \"#848484\",\n\n        //tooltip\n        tooltipBackgroundColor: \"rgba(0, 0, 0, 0.4)\",\n        tooltipColor: \"#fff\",\n        tooltipFillColor: \"#fff\",\n        //axis\n        axisLabelsColor: \"#fff\",\n        axisLineColor: \"rgba(200, 200, 200, 0.3)\",\n        indicatorLineColor: \"#FFFFFF\",\n        bgColor: \"#2a2a2a\",\n        textColor: \"#ffffff\"\n    },\n    lightTheme: {\n        bidColor: \"#258A14\",\n        bidFillColor: \"rgba(80, 210, 194, 0.5)\",\n        askColor: \"#EA340B\",\n        askFillColor: \"rgba(227, 116, 91, 0.5)\",\n        callColor: \"#BBBF2B\",\n        settleColor: \"rgba(125, 134, 214, 1)\",\n        settleFillColor: \"rgba(125, 134, 214, 0.5)\",\n        positiveColor: \"#528c0a\",\n        negativeColor: \"rgba(225, 66, 74, 1)\",\n        strokeColor: \"#000000\",\n        primaryText: \"#242424\",\n        volumeColor: \"#848484\",\n\n        //tooltip\n        tooltipBackgroundColor: \"rgba(255,255,255, 0.9)\",\n        tooltipColor: \"#000\",\n        tooltipFillColor: \"#000\",\n        //axis\n        axisLabelsColor: \"#000\",\n        axisLineColor: \"rgba(200, 200, 200, 0.3)\",\n        indicatorLineColor: \"#848484\",\n        bgColor: \"#fff\",\n        textColor: \"#3d3d3d\"\n    }\n};\n","import MarketsStore from \"stores/MarketsStore\";\nimport {FetchChain} from \"bitsharesjs\";\nimport moment from \"moment-timezone\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport {getGatewayName} from \"common/gatewayUtils\";\nimport utils from \"common/utils\";\n\nclass SymbolInfo {\n    constructor(options) {\n        this.name = options.ticker;\n        this.ticker = options.ticker;\n\n        const quoteGateway = getGatewayName(options.quoteAsset);\n        const baseGateway = getGatewayName(options.baseAsset);\n        let currentExchange =\n            quoteGateway === baseGateway\n                ? quoteGateway\n                : quoteGateway && !baseGateway\n                    ? quoteGateway\n                    : !quoteGateway && baseGateway\n                        ? baseGateway\n                        : `${quoteGateway} / ${baseGateway}`;\n\n        let {name: baseSymbol, prefix: basePrefix} = utils.replaceName(\n            options.baseAsset\n        );\n        let {name: quoteSymbol, prefix: quotePrefix} = utils.replaceName(\n            options.quoteAsset\n        );\n\n        this.description = `${quotePrefix || \"\"}${quoteSymbol} / ${basePrefix ||\n            \"\"}${baseSymbol} ${\n            !!currentExchange ? `(${currentExchange})` : \"\"\n        }`;\n        this.type = \"bitcoin\";\n        this.session = \"24x7\";\n        this.timezone = moment.tz.guess();\n        this.data_status = \"streaming\";\n        this.supported_resolutions = options.resolutions;\n        this.has_empty_bars = true;\n        this.pricescale = Math.pow(10, options.baseAsset.get(\"precision\"));\n        this.quoteAsset = options.quoteAsset;\n        this.baseAsset = options.baseAsset;\n        this.minmov = 1;\n\n        this.has_intraday = this.supported_resolutions.reduce(\n            (supported, r) => {\n                return supported || !isNaN(parseInt(r, 10));\n            },\n            false\n        );\n        this.intraday_multipliers = this.supported_resolutions.filter(r => {\n            return !isNaN(parseInt(r, 10));\n        });\n\n        this.has_seconds = this.supported_resolutions.reduce((supported, r) => {\n            return supported || r.indexOf(\"S\") !== -1;\n        }, false);\n        this.seconds_multipliers = this.supported_resolutions.filter(r => {\n            return r.indexOf(\"S\") !== -1;\n        });\n\n        this.has_daily = this.supported_resolutions.reduce((supported, r) => {\n            return supported || r.indexOf(\"D\") !== -1;\n        }, false);\n\n        this.has_daily = this.supported_resolutions.reduce((supported, r) => {\n            return supported || r.indexOf(\"D\") !== -1;\n        }, false);\n    }\n}\n\nfunction getResolutionsFromBuckets(buckets) {\n    let resolutions = buckets\n        .map(r => {\n            let minute = r / 60;\n            let day = minute / 60 / 24;\n            let week = day / 7;\n\n            if (minute < 1) {\n                // below 1 minute we return Seconds\n                return r + \"S\";\n            } else if (day < 1 && parseInt(minute, 10) === minute) {\n                // below 1 day we return Minutes\n                return minute.toString();\n            } else if (week < 1) {\n                // below 1 week we return Days\n                if (day >= 1) {\n                    if (parseInt(day, 10) === day) {\n                        if (day === 1) return \"D\";\n                        return day + \"D\";\n                    }\n                }\n            } else {\n                // we return weeks\n                if (week >= 1) {\n                    if (parseInt(week, 10) === week) {\n                        return week + \"D\";\n                    }\n                }\n            }\n\n            return null;\n        })\n        .filter(a => !!a);\n\n    return resolutions;\n}\n\nfunction getBucketFromResolution(r) {\n    if (r === \"D\") return 24 * 60 * 60;\n\n    if (r.indexOf(\"W\") !== -1) {\n        return parseInt(r.replace(\"D\", \"\"), 10) * 7 * 24 * 60 * 60;\n    } else if (r.indexOf(\"D\") !== -1) {\n        return parseInt(r.replace(\"D\", \"\"), 10) * 24 * 60 * 60;\n    } else if (r.indexOf(\"S\") !== -1) {\n        return parseInt(r.replace(\"S\", \"\"), 10);\n    } else {\n        return parseInt(r, 10) * 60;\n    }\n}\n\nclass DataFeed {\n    update(options) {\n        for (let key in options) {\n            switch (key) {\n                case \"resolutions\":\n                    this.supported_resolutions = getResolutionsFromBuckets(\n                        options.resolutions\n                    );\n                    break;\n\n                case \"onMarketChange\":\n                    MarketsStore.unsubscribe(\"market_change\");\n                    MarketsStore.subscribe(\"market_change\", options[key]);\n                    break;\n\n                default:\n                    this[key] = options[key];\n            }\n        }\n    }\n\n    clearSubs() {\n        MarketsStore.clearSubs();\n    }\n\n    onReady(callback) {\n        setTimeout(() => {\n            callback({\n                exchanges: [\n                    {\n                        value: \"OPEN.\",\n                        name: \"Openledger\",\n                        desc: \"Openledger Gateway\"\n                    }\n                ],\n                symbols_types: [],\n                supported_resolutions: this.supported_resolutions,\n                supports_marks: false,\n                supports_search: false,\n                supports_time: true\n            });\n        }, 10);\n    }\n\n    searchSymbols(userInput, exchange, symbolType, onResultReadyCallback) {\n        console.log(\"searchSymbols\", userInput, exchange, symbolType);\n\n        onResultReadyCallback([]);\n\n        /*\n        [\n            {\n                \"symbol\": \"<short symbol name>\",\n                \"full_name\": \"<full symbol name>\", // e.g. BTCE:BTCUSD\n                \"description\": \"<symbol description>\",\n                \"exchange\": \"<symbol exchange name>\",\n                \"ticker\": \"<symbol ticker name, optional>\",\n                \"type\": \"stock\" // or \"futures\" or \"bitcoin\" or \"forex\" or \"index\"\n            },\n            {\n                //    .....\n            }\n        ]\n        */\n    }\n\n    resolveSymbol(\n        symbolName,\n        onSymbolResolvedCallback,\n        onResolveErrorCallback\n    ) {\n        let [quote, base] = symbolName.split(\"_\");\n        Promise.all([\n            FetchChain(\"getAsset\", quote),\n            FetchChain(\"getAsset\", base)\n        ])\n            .then(assets => {\n                let [quoteAsset, baseAsset] = assets;\n                onSymbolResolvedCallback(\n                    new SymbolInfo({\n                        ticker: symbolName,\n                        quoteAsset,\n                        baseAsset,\n                        resolutions: this.supported_resolutions\n                    })\n                );\n            })\n            .catch(onResolveErrorCallback);\n    }\n\n    getBars(\n        symbolInfo,\n        resolution,\n        from,\n        to,\n        onHistoryCallback,\n        onErrorCallback,\n        firstDataRequest\n    ) {\n        from *= 1000;\n        to *= 1000;\n        let bars = this._getHistory();\n        this.latestBar = bars[bars.length - 1];\n        bars = bars.filter(a => {\n            return a.time >= from && a.time <= to;\n        });\n\n        if (this.interval !== resolution) {\n            if (!firstDataRequest) return;\n\n            let newBucketSize = getBucketFromResolution(resolution);\n            MarketsActions.changeBucketSize(newBucketSize);\n\n            return MarketsActions.unSubscribeMarket(\n                symbolInfo.quoteAsset.get(\"id\"),\n                symbolInfo.baseAsset.get(\"id\")\n            ).then(() => {\n                MarketsActions.subscribeMarket(\n                    symbolInfo.baseAsset,\n                    symbolInfo.quoteAsset,\n                    newBucketSize\n                ).then(() => {\n                    let bars = this._getHistory();\n                    this.latestBar = bars[bars.length - 1];\n                    bars = bars.filter(a => {\n                        return a.time >= from && a.time <= to;\n                    });\n                    this.interval = resolution;\n                    if (!bars.length)\n                        return onHistoryCallback(bars, {noData: true});\n                    onHistoryCallback(bars);\n                });\n            });\n        }\n\n        // console.log(\n        //     \"getBars\",\n        //     symbolInfo.ticker,\n        //     resolution,\n        //     \"firstDataRequest\",\n        //     firstDataRequest,\n        //     \"bars\",\n        //     bars\n        // );\n        this.interval = resolution;\n        if (!bars.length) return onHistoryCallback(bars, {noData: true});\n\n        onHistoryCallback(bars);\n    }\n\n    _getHistory() {\n        return MarketsStore.getState().priceData;\n    }\n\n    subscribeBars(\n        symbolInfo,\n        resolution,\n        onRealtimeCallback,\n        subscriberUID,\n        onResetCacheNeededCallback\n    ) {\n        MarketsStore.unsubscribe(\"subscribeBars\");\n        onResetCacheNeededCallback();\n        MarketsStore.subscribe(\"subscribeBars\", () => {\n            let bars = this._getHistory();\n            let newBars = bars.filter(a => {\n                if (!this.latestBar) return true;\n                return a.time > this.latestBar.time;\n            });\n            // console.log(\"subscribeBars\", MarketsStore.getState().activeMarket, \"found new bars:\", newBars);\n            if (newBars.length) {\n                newBars.forEach(bar => {\n                    onRealtimeCallback(bar);\n                });\n                this.latestBar = newBars[newBars.length - 1];\n            } else {\n                // Check if latest bar is different\n                let didChange = false;\n                for (let key in this.latestBar) {\n                    if (this.latestBar[key] !== bars[bars.length - 1][key]) {\n                        didChange = true;\n                    }\n                }\n                if (didChange) {\n                    onRealtimeCallback(bars[bars.length - 1]);\n                }\n            }\n        });\n    }\n\n    unsubscribeBars() {\n        /*\n        * This is ALWAYS called after subscribeBars for some reason, but\n        * sometimes it executes BEFORE the subscribe call in subscribeBars and\n        * sometimes AFTER. This causes the callback to be cleared and we stop\n        * receiving updates from the MarketStore. Unless we find it causes bugs,\n        * it's best to just not use this.\n        */\n        // MarketsStore.unsubscribe(\"subscribeBars\");\n        // this.latestBar = null;\n    }\n\n    calculateHistoryDepth(resolution, resolutionBack, intervalBack) {\n        return undefined;\n    }\n\n    getServerTime(callback) {\n        callback(new Date().getTime() / 1000);\n    }\n}\n\nconst supportedTimeZones = [\n    \"America/Argentina/Buenos_Aires\",\n    \"America/Bogota\",\n    \"America/Caracas\",\n    \"America/Chicago\",\n    \"America/El_Salvador\",\n    \"America/Los_Angeles\",\n    \"America/Mexico_City\",\n    \"America/New_York\",\n    \"America/Phoenix\",\n    \"America/Sao_Paulo\",\n    \"America/Toronto\",\n    \"America/Vancouver\",\n    \"Asia/Almaty\",\n    \"Asia/Ashkhabad\",\n    \"Asia/Bangkok\",\n    \"Asia/Dubai\",\n    \"Asia/Hong_Kong\",\n    \"Asia/Kathmandu\",\n    \"Asia/Kolkata\",\n    \"Asia/Seoul\",\n    \"Asia/Shanghai\",\n    \"Asia/Singapore\",\n    \"Asia/Taipei\",\n    \"Asia/Tehran\",\n    \"Asia/Tokyo\",\n    \"Australia/ACT\",\n    \"Australia/Adelaide\",\n    \"Australia/Brisbane\",\n    \"Australia/Sydney\",\n    \"Europe/Athens\",\n    \"Europe/Berlin\",\n    \"Europe/Istanbul\",\n    \"Europe/London\",\n    \"Europe/Madrid\",\n    \"Europe/Moscow\",\n    \"Europe/Paris\",\n    \"Europe/Warsaw\",\n    \"Europe/Zurich\",\n    \"Pacific/Auckland\",\n    \"Pacific/Chatham\",\n    \"Pacific/Fakaofo\",\n    \"Pacific/Honolulu\",\n    \"US/Mountain\"\n];\n\nfunction getTVTimezone() {\n    const current = moment.tz.guess();\n    const defaultZone = \"Europe/London\";\n\n    let isSupported = supportedTimeZones.indexOf(current) !== -1;\n    if (isSupported) return current;\n    else {\n        /* Try to find a matching timezone from the limited list supported by TradingView */\n        const time = moment().toISOString();\n        const actual = moment.tz(time, current).format();\n        for (var i = 0; i < supportedTimeZones.length; i++) {\n            let zoneTime = moment.tz(time, supportedTimeZones[i]);\n            if (zoneTime.format() === actual) {\n                if (__DEV__)\n                    console.log(\n                        `Found a match for ${current} timezone, using ${\n                            supportedTimeZones[i]\n                        }`\n                    );\n                // Found a match, return that zone\n                return supportedTimeZones[i];\n            }\n        }\n    }\n    console.log(\n        `No matching timezone found for ${current}, setting to default value of Europe/London`\n    );\n    return defaultZone;\n}\n\nexport {DataFeed, SymbolInfo, getResolutionsFromBuckets, getTVTimezone};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ReactHighchart from \"react-highcharts\";\nimport utils from \"common/utils\";\nimport counterpart from \"counterpart\";\nimport {cloneDeep} from \"lodash-es\";\nimport Translate from \"react-translate-component\";\nimport colors from \"assets/colors\";\nimport AssetName from \"../Utility/AssetName\";\nimport {didOrdersChange} from \"common/MarketClasses\";\n\nclass DepthHighChart extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        let settleCheck = isNaN(nextProps.feedPrice)\n            ? false\n            : nextProps.feedPrice !== this.props.feedPrice;\n        return (\n            didOrdersChange(nextProps.orders, this.props.orders) ||\n            didOrdersChange(nextProps.call_orders, this.props.call_orders) ||\n            settleCheck ||\n            nextProps.feedPrice !== this.props.feedPrice ||\n            nextProps.height !== this.props.height ||\n            nextProps.leftOrderBook !== this.props.leftOrderBook ||\n            nextProps.LCP !== this.props.LCP ||\n            nextProps.showCallLimit !== this.props.showCallLimit ||\n            nextProps.hasPrediction !== this.props.hasPrediction ||\n            nextProps.feedPrice !== this.props.feedPrice ||\n            nextProps.marketReady !== this.props.marketReady\n        );\n    }\n\n    componentDidMount() {\n        this.reflowChart(500);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            this.refs.depthChart &&\n            nextProps.verticalOrderbook !== this.props.verticalOrderbook\n        ) {\n            this.reflowChart(100);\n        }\n    }\n\n    componentWillUpdate() {\n        if (this.props.centerRef) {\n            this.tempScroll = this.props.centerRef.scrollTop;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.centerRef) {\n            this.props.centerRef.scrollTop = this.tempScroll;\n        }\n    }\n\n    reflowChart(timeout) {\n        setTimeout(() => {\n            if (this.refs.depthChart) {\n                this.refs.depthChart.chart.reflow();\n            }\n        }, timeout);\n    }\n\n    _getThemeColors(props = this.props) {\n        return colors[props.theme];\n    }\n\n    render() {\n        let {\n            flat_bids,\n            flat_asks,\n            flat_calls,\n            flat_settles,\n            totalBids,\n            totalAsks,\n            base,\n            quote,\n            feedPrice\n        } = this.props;\n\n        const {\n            primaryText,\n            callColor,\n            settleColor,\n            settleFillColor,\n            bidColor,\n            bidFillColor,\n            askColor,\n            askFillColor,\n            axisLineColor\n        } = this._getThemeColors();\n\n        let {name: baseSymbol, prefix: basePrefix} = utils.replaceName(base);\n        let {name: quoteSymbol, prefix: quotePrefix} = utils.replaceName(quote);\n        baseSymbol = (basePrefix || \"\") + baseSymbol;\n        quoteSymbol = (quotePrefix || \"\") + quoteSymbol;\n\n        let flatBids = cloneDeep(flat_bids),\n            flatAsks = cloneDeep(flat_asks),\n            flatCalls = cloneDeep(flat_calls),\n            flatSettles = cloneDeep(flat_settles);\n\n        let config = {\n            chart: {\n                type: \"area\",\n                backgroundColor: \"rgba(255, 0, 0, 0)\",\n                spacing: [10, 0, 5, 0]\n            },\n            title: {\n                text: null\n            },\n            credits: {\n                enabled: false\n            },\n            legend: {\n                enabled: false\n            },\n            rangeSelector: {\n                enabled: false\n            },\n            navigator: {\n                enabled: false\n            },\n            scrollbar: {\n                enabled: false\n            },\n            dataGrouping: {\n                enabled: false\n            },\n            tooltip: {\n                shared: false,\n                backgroundColor: \"rgba(0, 0, 0, 0.75)\",\n                useHTML: true,\n                formatter: function() {\n                    return `\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>${counterpart.translate(\"exchange.price\")}:</td>\n\t\t\t\t\t\t\t<td style=\"text-align: right\">${utils.format_number(\n                                this.x,\n                                base.get(\"precision\")\n                            )} ${baseSymbol}/${quoteSymbol}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>${counterpart.translate(\"exchange.quantity\")}:</td>\n\t\t\t\t\t\t\t<td style=\"text-align: right\">${utils.format_number(\n                                this.y,\n                                quote.get(\"precision\")\n                            )} ${quoteSymbol}</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t\t`;\n                },\n                style: {\n                    color: \"#FFFFFF\"\n                }\n            },\n            series: [],\n            yAxis: {\n                labels: {\n                    enabled: true,\n                    style: {\n                        color: primaryText\n                    },\n                    formatter: function() {\n                        return utils.format_number(\n                            this.value,\n                            quote.get(\"precision\")\n                        );\n                    }\n                },\n                opposite: false,\n                title: {\n                    text: null,\n                    style: {\n                        color: \"#FFFFFF\"\n                    }\n                },\n                gridLineWidth: 1,\n                gridLineColor: \"rgba(196, 196, 196, 0.30)\",\n                gridZIndex: 1,\n                crosshair: {\n                    snap: false\n                },\n                currentPriceIndicator: {\n                    enabled: false\n                }\n            },\n            xAxis: {\n                labels: {\n                    style: {\n                        color: primaryText\n                    }\n                    // formatter: function() {\n                    //     return this.value / power;\n                    // }\n                },\n                ordinal: false,\n                lineColor: \"#000000\",\n                title: {\n                    text: null\n                },\n                plotLines: []\n            },\n            plotOptions: {\n                area: {\n                    animation: false,\n                    marker: {\n                        enabled: false\n                    },\n                    series: {\n                        enableMouseTracking: false\n                    }\n                }\n            }\n        };\n\n        // Center the charts between bids and asks\n        if (flatBids.length > 0 && flatAsks.length > 0) {\n            let middleValue =\n                (flatAsks[0][0] + flatBids[flatBids.length - 1][0]) / 2;\n\n            config.xAxis.min = middleValue * 0.4;\n            config.xAxis.max = middleValue * 1.6;\n            if (config.xAxis.max < flatAsks[0][0]) {\n                config.xAxis.max = flatAsks[0][0] * 1.5;\n            }\n            if (config.xAxis.min > flatBids[flatBids.length - 1][0]) {\n                config.xAxis.min = flatBids[flatBids.length - 1][0] * 0.5;\n            }\n            let yMax = 0;\n            flatBids.forEach(b => {\n                if (b[0] >= config.xAxis.min) {\n                    yMax = Math.max(b[1], yMax);\n                }\n            });\n            flatAsks.forEach(a => {\n                if (a[0] <= config.xAxis.max) {\n                    yMax = Math.max(a[1], yMax);\n                }\n            });\n            config.yAxis.max = yMax * 1.15;\n\n            // Adjust y axis label decimals\n            let yLabelDecimals = yMax > 10 ? 0 : yMax > 1 ? 2 : 5;\n            config.yAxis.labels.formatter = function() {\n                return utils.format_number(this.value, yLabelDecimals);\n            };\n        } else if (flatBids.length && !flatAsks.length) {\n            config.xAxis.min = flatBids[flatBids.length - 1][0] * 0.4;\n            config.xAxis.max = flatBids[flatBids.length - 1][0] * 1.6;\n        } else if (flatAsks.length && !flatBids.length) {\n            config.xAxis.min = 0;\n            config.xAxis.max = flatAsks[0][0] * 2;\n        }\n\n        if (this.props.hasPrediction) {\n            config.xAxis.min = -0.05;\n            config.xAxis.max = 1.05;\n        }\n\n        // Add plotlines if defined\n        // if (falsethis.props.plotLine) {\n        //\t config.xAxis.plotLines.push({\n        //\t\t color: \"red\",\n        //\t\t id: \"plot_line\",\n        //\t\t dashStyle: \"longdashdot\",\n        //\t\t value: this.props.plotLine * power,\n        //\t\t width: 1,\n        //\t\t zIndex: 5\n        //\t });\n        // }\n\n        // Market asset\n        if (this.props.LCP) {\n            config.xAxis.plotLines.push({\n                color: axisLineColor,\n                id: \"plot_line\",\n                dashStyle: \"longdash\",\n                value: this.props.LCP,\n                label: {\n                    text: counterpart.translate(\"explorer.block.call_limit\"),\n                    style: {\n                        color: primaryText,\n                        fontWeight: \"bold\"\n                    }\n                },\n                width: 2,\n                zIndex: 5\n            });\n        }\n\n        // if (this.props.SQP) {\n        //\t config.xAxis.plotLines.push({\n        //\t\t color: \"#B6B6B6\",\n        //\t\t id: \"plot_line\",\n        //\t\t dashStyle: \"longdash\",\n        //\t\t value: this.props.SQP * power,\n        //\t\t label: {\n        //\t\t\t text: counterpart.translate(\"exchange.squeeze\"),\n        //\t\t\t style: {\n        //\t\t\t\t color: \"#DADADA\",\n        //\t\t\t\t fontWeight: \"bold\"\n        //\t\t\t }\n        //\t\t },\n        //\t\t width: 2,\n        //\t\t zIndex: 5\n        //\t });\n        // }\n\n        if (feedPrice) {\n            const settlementColor = base.has(\"bitasset\") ? askColor : bidColor;\n            config.xAxis.plotLines.push({\n                color: settlementColor,\n                id: \"plot_line\",\n                dashStyle: \"solid\",\n                value: feedPrice,\n                label: {\n                    text: counterpart.translate(\"explorer.block.feed_price\"),\n                    style: {\n                        color: primaryText,\n                        fontWeight: \"bold\"\n                    }\n                },\n                width: 2,\n                zIndex: 5\n            });\n\n            // Add calls if present\n            if (flatCalls && flatCalls.length) {\n                config.series.push({\n                    name: `Call ${quoteSymbol}`,\n                    data: flatCalls,\n                    color: callColor\n                });\n            }\n        }\n\n        // Add settle orders\n        if (feedPrice && (flatSettles && flatSettles.length)) {\n            config.series.push({\n                name: `Settle ${quoteSymbol}`,\n                data: flatSettles,\n                color: settleColor,\n                fillColor: settleFillColor\n            });\n        }\n\n        // Push asks and bids\n        if (flatBids.length) {\n            config.series.push({\n                step: \"right\",\n                name: `Bid ${quoteSymbol}`,\n                data: flatBids,\n                color: bidColor,\n                fillColor: bidFillColor\n            });\n        }\n\n        if (flatAsks.length) {\n            config.series.push({\n                step: \"left\",\n                name: `Ask ${quoteSymbol}`,\n                data: flatAsks,\n                color: askColor,\n                fillColor: askFillColor\n            });\n        }\n\n        // Fix the height if defined, else use 400px;\n        if (this.props.height) {\n            config.chart.height = this.props.height;\n        } else {\n            config.chart.height = \"400px\";\n        }\n\n        // Add onClick event listener if defined\n        if (this.props.onClick) {\n            config.chart.events = {\n                click: this.props.onClick.bind(this)\n            };\n        }\n\n        if (this.props.noFrame) {\n            return (\n                <div className=\"grid-content no-overflow no-padding\">\n                    {!flatBids.length &&\n                    !flatAsks.length &&\n                    !flatCalls.length ? (\n                        <span className=\"no-data\">\n                            <Translate content=\"exchange.no_data\" />\n                        </span>\n                    ) : null}\n                    {this.props.noText ? null : (\n                        <p className=\"bid-total\">\n                            {utils.format_number(\n                                totalBids,\n                                base.get(\"precision\")\n                            )}{\" \"}\n                            {baseSymbol}\n                        </p>\n                    )}\n                    {this.props.noText ? null : (\n                        <p className=\"ask-total\">\n                            {utils.format_number(\n                                totalAsks,\n                                quote.get(\"precision\")\n                            )}{\" \"}\n                            {quoteSymbol}\n                        </p>\n                    )}\n                    {flatBids || flatAsks || flatCalls ? (\n                        <ReactHighchart config={config} />\n                    ) : null}\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"grid-content no-overflow no-padding middle-content\">\n                    <div className=\"exchange-bordered\" style={{margin: 10}}>\n                        <div className=\"exchange-content-header\">\n                            {this.props.noText ? null : (\n                                <span className=\"bid-total\">\n                                    {utils.format_number(\n                                        totalBids,\n                                        base.get(\"precision\")\n                                    )}{\" \"}\n                                    <AssetName name={base.get(\"symbol\")} />\n                                </span>\n                            )}\n                            {this.props.noText ? null : (\n                                <span className=\"ask-total float-right\">\n                                    {utils.format_number(\n                                        totalAsks,\n                                        quote.get(\"precision\")\n                                    )}{\" \"}\n                                    <AssetName name={quote.get(\"symbol\")} />\n                                </span>\n                            )}\n                        </div>\n                        {!flatBids.length &&\n                        !flatAsks.length &&\n                        !flatCalls.length ? (\n                            <span className=\"no-data\">\n                                <Translate content=\"exchange.no_data\" />\n                            </span>\n                        ) : null}\n                        {flatBids || flatAsks || flatCalls ? (\n                            <ReactHighchart ref=\"depthChart\" config={config} />\n                        ) : null}\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nDepthHighChart.defaultProps = {\n    flat_bids: [],\n    flat_asks: [],\n    orders: {},\n    noText: false,\n    noFrame: true\n};\n\nDepthHighChart.propTypes = {\n    flat_bids: PropTypes.array.isRequired,\n    flat_asks: PropTypes.array.isRequired,\n    orders: PropTypes.object.isRequired\n};\n\nexport default DepthHighChart;\n","import React from \"react\";\nimport AccountStore from \"stores/AccountStore\";\nimport AltContainer from \"alt-container\";\nimport Notifier from \"./Notifier\";\n\nclass NotifierContainer extends React.Component {\n    render() {\n        return (\n            <AltContainer\n                stores={[AccountStore]}\n                inject={{\n                    account: () => {\n                        return AccountStore.getState().currentAccount;\n                    }\n                }}\n            >\n                <Notifier />\n            </AltContainer>\n        );\n    }\n}\n\nexport default NotifierContainer;\n","import React from \"react\";\nimport Notification from \"react-foundation-apps/src/notification\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport Operation from \"../Blockchain/Operation\";\nimport Immutable from \"immutable\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport {ChainTypes as GraphChainTypes} from \"bitsharesjs\";\nlet {operations} = GraphChainTypes;\n\nlet ops = Object.keys(operations);\n\nclass Notifier extends React.Component {\n    static propTypes = {\n        account: ChainTypes.ChainAccount.isRequired\n    };\n\n    componentWillReceiveProps(nextProps) {\n        if (\n            nextProps.account &&\n            nextProps.account.size &&\n            this.props.account &&\n            this.props.account.get(\"history\")\n        ) {\n            let ch =\n                this.props.account.get(\"history\") &&\n                this.props.account.get(\"history\").first()\n                    ? this.props.account\n                          .get(\"history\")\n                          .first()\n                          .toJS()\n                    : null;\n            let nh =\n                nextProps.account.get(\"history\") &&\n                nextProps.account.get(\"history\").first()\n                    ? nextProps.account\n                          .get(\"history\")\n                          .first()\n                          .toJS()\n                    : null;\n            if (nh && ch) {\n                // Only trigger notifications for order fills\n                if (\n                    ops[nh.op[0]] === \"fill_order\" &&\n                    ((!ch && nh.id) || nh.id !== ch.id)\n                ) {\n                    ZfApi.publish(\"account-notify\", \"open\");\n                    setTimeout(function() {\n                        ZfApi.publish(\"account-notify\", \"close\");\n                    }, 5000);\n                }\n            }\n        }\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.account || !this.props.account) return false;\n        return (\n            !Immutable.is(\n                nextProps.account.get(\"history\"),\n                this.props.account.get(\"history\")\n            ) || !Immutable.is(nextProps.account, this.props.account)\n        );\n    }\n\n    render() {\n        let {account} = this.props;\n\n        if (!account) {\n            return <div />;\n        }\n\n        let trx, info;\n\n        if (\n            this.props.account.get(\"history\") &&\n            this.props.account.get(\"history\").size\n        ) {\n            trx = this.props.account\n                .get(\"history\")\n                .first()\n                .toJS();\n            if (trx) {\n                info = (\n                    <Operation\n                        key={trx.id}\n                        op={trx.op}\n                        result={trx.result}\n                        block={trx.block_num}\n                        current={account.get(\"id\")}\n                        hideDate={true}\n                        hideFee={true}\n                    />\n                );\n            }\n        }\n\n        if (!trx) {\n            return <div />;\n        }\n\n        return (\n            <Notification.Static\n                id=\"account-notify\"\n                title={null}\n                image=\"\"\n                wrapperElement=\"div\"\n            >\n                <table className=\"table\">\n                    <tbody>{info}</tbody>\n                </table>\n            </Notification.Static>\n        );\n    }\n}\nNotifier = BindToChainState(Notifier);\n\nexport default Notifier;\n","import React from \"react\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\nimport BaseModal from \"../Modal/BaseModal\";\nimport utils from \"common/utils\";\nimport Translate from \"react-translate-component\";\n\nexport default class ConfirmModal extends React.Component {\n    show() {\n        let modalId = \"modal_confirm_\" + this.props.type;\n        ZfApi.publish(modalId, \"open\");\n    }\n\n    _onForce(value, e) {\n        let modalId = \"modal_confirm_\" + this.props.type;\n        e.preventDefault();\n\n        ZfApi.publish(modalId, \"close\");\n        if (value) this.props.onForce();\n    }\n\n    render() {\n        let {type, diff, hasOrders} = this.props;\n\n        return (\n            <BaseModal id={\"modal_confirm_\" + type} overlay={true}>\n                <Translate component=\"h3\" content=\"transaction.confirm\" />\n                <div className=\"grid-block vertical\">\n                    {!hasOrders ? (\n                        <Translate\n                            content={\"exchange.confirm_no_orders_\" + type}\n                        />\n                    ) : (\n                        <Translate\n                            content={\"exchange.confirm_\" + type}\n                            diff={utils.format_number(diff, 2)}\n                        />\n                    )}\n                    <div className=\"button-group\" style={{paddingTop: \"2rem\"}}>\n                        <input\n                            onClick={this._onForce.bind(this, true)}\n                            className=\"button success\"\n                            type=\"submit\"\n                            value=\"Yes\"\n                        />\n                        <input\n                            onClick={this._onForce.bind(this, false)}\n                            className=\"button info\"\n                            type=\"submit\"\n                            value=\"No\"\n                        />\n                    </div>\n                </div>\n            </BaseModal>\n        );\n    }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Icon from \"../Icon/Icon\";\nimport AssetName from \"../Utility/AssetName\";\nimport AssetImage from \"../Utility/AssetImage\";\nimport MarketsActions from \"actions/MarketsActions\";\nimport SettingsActions from \"actions/SettingsActions\";\nimport PriceStatWithLabel from \"./PriceStatWithLabel\";\nimport Translate from \"react-translate-component\";\nimport counterpart from \"counterpart\";\nimport {ChainStore} from \"bitsharesjs\";\nimport ExchangeHeaderCollateral from \"./ExchangeHeaderCollateral\";\nimport BaseModal from \"../Modal/BaseModal\";\nimport ZfApi from \"react-foundation-apps/src/utils/foundation-api\";\n\nexport default class ExchangeHeader extends React.Component {\n    constructor(props) {\n        super();\n\n        this.state = {\n            volumeShowQuote: true,\n            chartHeight: props.chartHeight\n        };\n\n        this.setChartHeight = this.setChartHeight.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (!nextProps.marketReady) return false;\n        return true;\n    }\n\n    _addMarket(quote, base) {\n        let marketID = `${quote}_${base}`;\n        if (!this.props.starredMarkets.has(marketID)) {\n            SettingsActions.addStarMarket(quote, base);\n        } else {\n            SettingsActions.removeStarMarket(quote, base);\n        }\n    }\n\n    changeVolumeBase() {\n        this.setState({\n            volumeShowQuote: !this.state.volumeShowQuote\n        });\n    }\n\n    marketPicker(asset) {\n        let {selectedMarketPickerAsset} = this.state;\n\n        selectedMarketPickerAsset =\n            !!selectedMarketPickerAsset && selectedMarketPickerAsset == asset\n                ? null\n                : asset;\n\n        this.setState({\n            selectedMarketPickerAsset\n        });\n        this.props.onToggleMarketPicker(selectedMarketPickerAsset);\n    }\n\n    setChartHeight() {\n        this.props.onChangeChartHeight({value: this.state.chartHeight});\n    }\n\n    render() {\n        const {\n            quoteAsset,\n            baseAsset,\n            starredMarkets,\n            hasPrediction,\n            feedPrice,\n            showCallLimit,\n            lowestCallPrice,\n            marketReady,\n            latestPrice,\n            marketStats,\n            showDepthChart,\n            account\n        } = this.props;\n\n        const baseSymbol = baseAsset.get(\"symbol\");\n        const quoteSymbol = quoteAsset.get(\"symbol\");\n\n        // Favorite star\n        const marketID = `${quoteSymbol}_${baseSymbol}`;\n        const starClass = starredMarkets.has(marketID)\n            ? \"gold-star\"\n            : \"grey-star\";\n\n        // Market stats\n        const dayChange = marketStats.get(\"change\");\n\n        const dayChangeClass =\n            parseFloat(dayChange) === 0\n                ? \"\"\n                : parseFloat(dayChange) < 0\n                    ? \"negative\"\n                    : \"positive\";\n        const volumeBase = marketStats.get(\"volumeBase\");\n        const volumeQuote = marketStats.get(\"volumeQuote\");\n        const dayChangeWithSign = dayChange > 0 ? \"+\" + dayChange : dayChange;\n\n        const volume24h = this.state.volumeShowQuote ? volumeQuote : volumeBase;\n        const volume24hAsset = this.state.volumeShowQuote\n            ? quoteAsset\n            : baseAsset;\n\n        let showCollateralRatio = false;\n\n        const quoteId = quoteAsset.get(\"id\");\n        const baseId = baseAsset.get(\"id\");\n\n        const lookForBitAsset =\n            quoteId === \"1.3.0\" ? baseId : baseId === \"1.3.0\" ? quoteId : null;\n        const possibleBitAsset = lookForBitAsset\n            ? ChainStore.getAsset(lookForBitAsset)\n            : null;\n        const isBitAsset = possibleBitAsset\n            ? !!possibleBitAsset.get(\"bitasset\")\n            : false;\n        let collOrderObject = \"\";\n        let settlePrice = null;\n\n        if (isBitAsset) {\n            if (account.toJS && account.has(\"call_orders\")) {\n                const call_orders = account.get(\"call_orders\").toJS();\n\n                for (let i = 0; i < call_orders.length; i++) {\n                    let callID = call_orders[i];\n\n                    let position = ChainStore.getObject(callID);\n                    let debtAsset = position.getIn([\n                        \"call_price\",\n                        \"quote\",\n                        \"asset_id\"\n                    ]);\n\n                    if (debtAsset === lookForBitAsset) {\n                        collOrderObject = callID;\n                        showCollateralRatio = true;\n                        break;\n                    }\n                }\n            }\n\n            /* Settlment Offset */\n            let settleAsset =\n                baseAsset.get(\"id\") == \"1.3.0\"\n                    ? quoteAsset\n                    : quoteAsset.get(\"id\") == \"1.3.0\"\n                        ? baseAsset\n                        : null;\n\n            if (settleAsset && feedPrice) {\n                let offset_percent = settleAsset\n                    .getIn([\"bitasset\", \"options\"])\n                    .toJS().force_settlement_offset_percent;\n                settlePrice =\n                    baseAsset.get(\"id\") == \"1.3.0\"\n                        ? feedPrice.toReal() / (1 + offset_percent / 10000)\n                        : feedPrice.toReal() * (1 + offset_percent / 10000);\n            }\n        }\n\n        const translator = require(\"counterpart\");\n\n        let isQuoteSelected =\n            !!this.state.selectedMarketPickerAsset &&\n            this.state.selectedMarketPickerAsset == quoteSymbol;\n        let isBaseSelected =\n            !!this.state.selectedMarketPickerAsset &&\n            this.state.selectedMarketPickerAsset == baseSymbol;\n\n        return (\n            <div className=\"grid-block shrink no-padding overflow-visible top-bar\">\n                <div className=\"grid-block overflow-visible\">\n                    <div className=\"grid-block shrink\">\n                        <div style={{padding: \"10px\"}}>\n                            <AssetImage\n                                replaceNoneToBts={false}\n                                maxWidth={40}\n                                name={quoteAsset.get(\"symbol\")}\n                            />\n                        </div>\n                        <div style={{padding: \"10px\"}}>\n                            {!hasPrediction ? (\n                                <div\n                                    style={{\n                                        padding: \"0 5px\",\n                                        fontSize: \"18px\",\n                                        marginTop: \"1px\"\n                                    }}\n                                >\n                                    <span\n                                        onClick={this.marketPicker.bind(\n                                            this,\n                                            quoteSymbol\n                                        )}\n                                        className=\"underline\"\n                                        style={{\n                                            cursor: \"pointer\",\n                                            color: isQuoteSelected\n                                                ? \"#2196f3\"\n                                                : \"\"\n                                        }}\n                                    >\n                                        <AssetName\n                                            name={quoteSymbol}\n                                            replace={true}\n                                            noTip\n                                        />\n                                    </span>\n                                    <span style={{padding: \"0 5px\"}}>/</span>\n                                    <span\n                                        onClick={this.marketPicker.bind(\n                                            this,\n                                            baseSymbol\n                                        )}\n                                        className=\"underline\"\n                                        style={{\n                                            cursor: \"pointer\",\n                                            color: isBaseSelected\n                                                ? \"#2196f3\"\n                                                : \"\"\n                                        }}\n                                    >\n                                        <AssetName\n                                            name={baseSymbol}\n                                            replace={true}\n                                            noTip\n                                        />\n                                    </span>\n                                </div>\n                            ) : (\n                                <a className=\"market-symbol\">\n                                    <span\n                                    >{`${quoteSymbol} : ${baseSymbol}`}</span>\n                                </a>\n                            )}\n                            <div className=\"label-actions\">\n                                <Translate\n                                    component=\"span\"\n                                    style={{padding: \"5px 0 0 5px\"}}\n                                    className=\"stat-text\"\n                                    content=\"exchange.trading_pair\"\n                                />\n                                <Link\n                                    onClick={() => {\n                                        MarketsActions.switchMarket();\n                                    }}\n                                    to={`/market/${baseSymbol}_${quoteSymbol}`}\n                                    data-intro={translator.translate(\n                                        \"walkthrough.switch_button\"\n                                    )}\n                                >\n                                    <Icon\n                                        className=\"shuffle\"\n                                        name=\"shuffle\"\n                                        title=\"icons.shuffle\"\n                                    />\n                                </Link>\n\n                                <a\n                                    onClick={() => {\n                                        this._addMarket(\n                                            this.props.quoteAsset.get(\"symbol\"),\n                                            this.props.baseAsset.get(\"symbol\")\n                                        );\n                                    }}\n                                    data-intro={translator.translate(\n                                        \"walkthrough.favourite_button\"\n                                    )}\n                                >\n                                    <Icon\n                                        className={starClass}\n                                        name=\"fi-star\"\n                                        title=\"icons.fi_star.market\"\n                                    />\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div\n                        className=\"grid-block vertical\"\n                        style={{overflow: \"visible\"}}\n                    >\n                        <div className=\"grid-block wrap market-stats-container\">\n                            <ul className=\"market-stats stats top-stats\">\n                                {latestPrice ? (\n                                    <PriceStatWithLabel\n                                        ignoreColorChange={true}\n                                        ready={marketReady}\n                                        price={latestPrice}\n                                        quote={quoteAsset}\n                                        base={baseAsset}\n                                        market={marketID}\n                                        content=\"exchange.latest\"\n                                    />\n                                ) : null}\n\n                                <li\n                                    className={\n                                        \"hide-order-1 stressed-stat daily_change \" +\n                                        dayChangeClass\n                                    }\n                                >\n                                    <span>\n                                        <b className=\"value\">\n                                            {marketReady\n                                                ? dayChangeWithSign\n                                                : 0}\n                                        </b>\n                                        <span> %</span>\n                                    </span>\n                                    <Translate\n                                        component=\"div\"\n                                        className=\"stat-text\"\n                                        content=\"account.hour_24\"\n                                    />\n                                </li>\n\n                                {volumeBase >= 0 ? (\n                                    <PriceStatWithLabel\n                                        ignoreColorChange={true}\n                                        onClick={this.changeVolumeBase.bind(\n                                            this\n                                        )}\n                                        ready={marketReady}\n                                        decimals={0}\n                                        volume={true}\n                                        price={volume24h}\n                                        className=\"hide-order-2 clickable\"\n                                        base={volume24hAsset}\n                                        market={marketID}\n                                        content=\"exchange.volume_24\"\n                                    />\n                                ) : null}\n                                {!hasPrediction && feedPrice ? (\n                                    <PriceStatWithLabel\n                                        ignoreColorChange={true}\n                                        toolTip={counterpart.translate(\n                                            \"tooltip.feed_price\"\n                                        )}\n                                        ready={marketReady}\n                                        className=\"hide-order-3\"\n                                        price={feedPrice.toReal()}\n                                        quote={quoteAsset}\n                                        base={baseAsset}\n                                        market={marketID}\n                                        content=\"exchange.feed_price\"\n                                    />\n                                ) : null}\n                                {!hasPrediction && feedPrice ? (\n                                    <PriceStatWithLabel\n                                        ignoreColorChange={true}\n                                        toolTip={counterpart.translate(\n                                            \"tooltip.settle_price\"\n                                        )}\n                                        ready={marketReady}\n                                        className=\"hide-order-4\"\n                                        price={settlePrice}\n                                        quote={quoteAsset}\n                                        base={baseAsset}\n                                        market={marketID}\n                                        content=\"exchange.settle\"\n                                    />\n                                ) : null}\n                                {showCollateralRatio ? (\n                                    <ExchangeHeaderCollateral\n                                        object={collOrderObject}\n                                        account={account}\n                                    />\n                                ) : null}\n                                {lowestCallPrice && showCallLimit ? (\n                                    <PriceStatWithLabel\n                                        toolTip={counterpart.translate(\n                                            \"tooltip.call_limit\"\n                                        )}\n                                        ready={marketReady}\n                                        className=\"hide-order-5 is-call\"\n                                        price={lowestCallPrice}\n                                        quote={quoteAsset}\n                                        base={baseAsset}\n                                        market={marketID}\n                                        content=\"explorer.block.call_limit\"\n                                    />\n                                ) : null}\n\n                                {feedPrice && showCallLimit ? (\n                                    <PriceStatWithLabel\n                                        toolTip={counterpart.translate(\n                                            \"tooltip.margin_price\"\n                                        )}\n                                        ready={marketReady}\n                                        className=\"hide-order-6 is-call\"\n                                        price={feedPrice.getSqueezePrice({\n                                            real: true\n                                        })}\n                                        quote={quoteAsset}\n                                        base={baseAsset}\n                                        market={marketID}\n                                        content=\"exchange.squeeze\"\n                                    />\n                                ) : null}\n                            </ul>\n                            <ul className=\"market-stats stats top-stats\">\n                                <li\n                                    className=\"stressed-stat input clickable\"\n                                    style={{padding: \"16px\"}}\n                                    onClick={() => {\n                                        ZfApi.publish(\"chart_options\", \"open\");\n                                    }}\n                                >\n                                    <Translate content=\"exchange.chart_modal\" />\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n                <BaseModal\n                    id=\"chart_options\"\n                    overlay={true}\n                    modalHeader=\"exchange.chart_modal\"\n                    noLogo\n                >\n                    <section className=\"block-list no-border-bottom\">\n                        <header>\n                            <Translate content=\"exchange.chart_type\" />:\n                        </header>\n                        <ul>\n                            <li className=\"with-dropdown\">\n                                <select\n                                    value={\n                                        showDepthChart\n                                            ? \"depth_chart\"\n                                            : \"price_chart\"\n                                    }\n                                    className=\"settings-select\"\n                                    onChange={e => {\n                                        if (\n                                            (showDepthChart &&\n                                                e.target.value ===\n                                                    \"price_chart\") ||\n                                            (!showDepthChart &&\n                                                e.target.value ===\n                                                    \"market_depth\")\n                                        ) {\n                                            this.props.onToggleCharts();\n                                        }\n                                    }}\n                                >\n                                    <option value=\"market_depth\">\n                                        {counterpart.translate(\n                                            \"exchange.order_depth\"\n                                        )}\n                                    </option>\n                                    <option value=\"price_chart\">\n                                        {counterpart.translate(\n                                            \"exchange.price_history\"\n                                        )}\n                                    </option>\n                                </select>\n                            </li>\n                        </ul>\n                    </section>\n                    <section className=\"block-list no-border-bottom\">\n                        <header>\n                            <Translate content=\"exchange.chart_height\" />:\n                        </header>\n                        <label>\n                            <span className=\"inline-label\">\n                                <input\n                                    onKeyDown={e => {\n                                        if (e.keyCode === 13)\n                                            this.setChartHeight();\n                                    }}\n                                    type=\"number\"\n                                    value={this.state.chartHeight}\n                                    onChange={e =>\n                                        this.setState({\n                                            chartHeight: e.target.value\n                                        })\n                                    }\n                                />\n                                <div\n                                    className=\"button no-margin\"\n                                    onClick={this.setChartHeight}\n                                >\n                                    Set\n                                </div>\n                            </span>\n                        </label>\n                    </section>\n                </BaseModal>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport Translate from \"react-translate-component\";\nimport AssetName from \"../Utility/AssetName\";\nimport utils from \"common/utils\";\nimport cnames from \"classnames\";\nimport ReactTooltip from \"react-tooltip\";\n\nexport default class PriceStatWithLabel extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            change: null,\n            curMarket: null,\n            marketChange: false\n        };\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.volume2 && nextProps.volume2 !== this.props.volume2) {\n            return true;\n        }\n        return (\n            nextProps.price !== this.props.price ||\n            nextProps.ready !== this.props.ready\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let state = {\n            change: 0\n        };\n\n        let {market} = nextProps;\n\n        let checkMarketChange = this.state.curMarket !== market;\n        let marketChange =\n            this.state.curMarket == null ? false : checkMarketChange;\n\n        state[\"marketChange\"] = marketChange;\n        state[\"curMarket\"] = market;\n        state[\"prevAsset\"] = this.state.marketAsset;\n\n        if (nextProps.ready && this.props.ready) {\n            state[\"change\"] =\n                parseFloat(nextProps.price) - parseFloat(this.props.price);\n        }\n\n        this.setState(state);\n    }\n\n    componentDidUpdate() {\n        ReactTooltip.rebuild();\n    }\n\n    render() {\n        let {\n            base,\n            quote,\n            price,\n            content,\n            ready,\n            volume,\n            toolTip,\n            ignoreColorChange\n        } = this.props;\n        let {change, marketChange} = this.state;\n        let changeClasses = null;\n        if (\n            !marketChange &&\n            change &&\n            change !== null &&\n            ignoreColorChange !== true\n        ) {\n            changeClasses = change > 0 ? \"pulsate green\" : \"pulsate red\";\n        }\n\n        let value = !volume\n            ? utils.price_text(price, quote, base)\n            : utils.format_volume(price);\n\n        return (\n            <li\n                className={cnames(\n                    \"stressed-stat\",\n                    this.props.className,\n                    changeClasses\n                )}\n                onClick={this.props.onClick}\n                data-place=\"bottom\"\n                data-tip={toolTip}\n            >\n                <span>\n                    <span className=\"value stat-primary\">\n                        {!ready ? 0 : value}&nbsp;\n                    </span>\n                    <span className=\"symbol-text\">\n                        <AssetName name={base.get(\"symbol\")} />\n                    </span>\n                </span>\n                {content ? (\n                    <div className=\"stat-text\">\n                        <Translate content={content} />\n                    </div>\n                ) : null}\n            </li>\n        );\n    }\n}\n","import React from \"react\";\nimport utils from \"common/utils\";\nimport ChainTypes from \"../Utility/ChainTypes\";\nimport BindToChainState from \"../Utility/BindToChainState\";\nimport cnames from \"classnames\";\nimport counterpart from \"counterpart\";\nimport Translate from \"react-translate-component\";\n\nclass MarginPosition extends React.Component {\n    static propTypes = {\n        debtAsset: ChainTypes.ChainAsset.isRequired,\n        collateralAsset: ChainTypes.ChainAsset.isRequired\n    };\n\n    _getFeedPrice() {\n        if (!this.props) {\n            return 1;\n        }\n\n        return (\n            1 /\n            utils.get_asset_price(\n                this.props.debtAsset.getIn([\n                    \"bitasset\",\n                    \"current_feed\",\n                    \"settlement_price\",\n                    \"quote\",\n                    \"amount\"\n                ]),\n                this.props.collateralAsset,\n                this.props.debtAsset.getIn([\n                    \"bitasset\",\n                    \"current_feed\",\n                    \"settlement_price\",\n                    \"base\",\n                    \"amount\"\n                ]),\n                this.props.debtAsset\n            )\n        );\n    }\n\n    _getCollateralRatio() {\n        const co = this.props.object.toJS();\n        const c = utils.get_asset_amount(\n            co.collateral,\n            this.props.collateralAsset\n        );\n        const d = utils.get_asset_amount(co.debt, this.props.debtAsset);\n        return c / (d / this._getFeedPrice());\n    }\n\n    _getMR() {\n        return (\n            this.props.debtAsset.getIn([\n                \"bitasset\",\n                \"current_feed\",\n                \"maintenance_collateral_ratio\"\n            ]) / 1000\n        );\n    }\n\n    _getStatusClass() {\n        let cr = this._getCollateralRatio();\n        const mr = this._getMR();\n\n        if (isNaN(cr)) return null;\n        if (cr < mr) {\n            return \"danger\";\n        } else if (cr < mr + 0.5) {\n            return \"warning\";\n        } else {\n            return \"\";\n        }\n    }\n\n    _getCRTip() {\n        const statusClass = this._getStatusClass();\n        const mr = this._getMR();\n        if (!statusClass || statusClass === \"\") return null;\n\n        if (statusClass === \"danger\") {\n            return counterpart.translate(\"tooltip.cr_danger\", {mr});\n        } else if (statusClass === \"warning\") {\n            return counterpart.translate(\"tooltip.cr_warning\", {mr});\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        let {object} = this.props;\n        const co = object.toJS();\n        const cr = this._getCollateralRatio();\n        const d = utils.get_asset_amount(co.debt, this.props.debtAsset);\n\n        const statusClass = this._getStatusClass();\n\n        return (\n            <li\n                className={cnames(\"stressed-stat\", this.props.className)}\n                onClick={this.props.onClick}\n                data-place=\"bottom\"\n                data-tip={this._getCRTip()}\n            >\n                <span>\n                    <span className={cnames(\"value stat-primary\", statusClass)}>\n                        {utils.format_number(cr, 2)}\n                    </span>\n                </span>\n                <div className=\"stat-text\">\n                    <Translate content=\"header.collateral_ratio\" />\n                </div>\n            </li>\n        );\n    }\n}\nMarginPosition = BindToChainState(MarginPosition);\n\nclass ExchangeHeaderCollateral extends React.Component {\n    static propTypes = {\n        object: ChainTypes.ChainObject.isRequired\n    };\n\n    render() {\n        let {object, account} = this.props;\n\n        let debtAsset = object.getIn([\"call_price\", \"quote\", \"asset_id\"]);\n        let collateralAsset = object.getIn([\"call_price\", \"base\", \"asset_id\"]);\n\n        return (\n            <MarginPosition\n                debtAsset={debtAsset}\n                collateralAsset={collateralAsset}\n                account={account}\n                {...this.props}\n            />\n        );\n    }\n}\nExchangeHeaderCollateral = BindToChainState(ExchangeHeaderCollateral);\n\nexport default ExchangeHeaderCollateral;\n","import React from \"react\";\nimport SettingsStore from \"stores/SettingsStore\";\nimport PropTypes from \"prop-types\";\n\n/**\n *  Wrapper component for chatbro iframe\n *\n */\nclass ChatBro extends React.Component {\n    render() {\n        let frameHeight = this.props.height || \"30%\";\n\n        let currentLocale = SettingsStore.getState().settings.get(\"locale\");\n\n        let chatUrl = null;\n        switch (currentLocale) {\n            default:\n                chatUrl = `https://chat.rudex.org/${currentLocale}/`;\n                break;\n        }\n\n        return (\n            <iframe\n                style={{height: frameHeight, width: \"100%\"}}\n                src={chatUrl}\n                sandbox=\"allow-same-origin allow-forms allow-scripts allow-popups\"\n            />\n        );\n\n        return (\n            <iframe\n                style={{height: frameHeight, width: \"100%\"}}\n                src={chatUrl}\n                sandbox=\"allow-same-origin allow-forms allow-scripts allow-popups\"\n            />\n        );\n    }\n}\n\nChatBro.propTypes = {\n    height: PropTypes.string\n};\n\nexport default ChatBro;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9FA;AARA;AAyGA;AACA;AACA;AACA;AACA;AAJA;AAzGA;AAiHA;;;;AAxHA;AACA;AA0HA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;;;AAaA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;AAEA;AAAA;AACA;AAEA;AAAA;AAEA;AAIA;AACA;AACA;AAEA;AAIA;AAEA;AAAA;AAAA;AACA;AAKA;AAIA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAHA;AAMA;;;;AAnKA;AACA;AADA;AAEA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AAFA;AACA;AACA;AA4JA;AACA;AADA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAaA;AAAA;AACA;AADA;AACA;AADA;AA0DA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AAAA;AAAA;AAFA;AAOA;AACA;AACA;AACA;AACA;AAJA;AA3CA;AACA;AAxDA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAVA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAGA;AAvBA;AAwBA;AACA;;;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AAIA;AACA;AADA;AAGA;;;AAqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAmBA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AADA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAfA;AACA;AAoBA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAKA;AAQA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAGA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAEA;AAAA;AACA;AAAA;AAIA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAQA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAKA;AACA;AADA;AACA;AAKA;AACA;AAMA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AANA;AAQA;AACA;AACA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AALA;AACA;AAjBA;AAAA;AAAA;AACA;AA6BA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AANA;AAQA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AACA;AASA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AAEA;AAKA;AANA;AAQA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AAKA;AACA;AADA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAKA;AACA;AADA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AADA;AACA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AASA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAMA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AACA;AAGA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAiDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+HA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AA7EA;AACA;AAoFA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAKA;AA/EA;AACA;AAsFA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AA/BA;AACA;AAkCA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;AAAA;AAAA;AACA;AAEA;AACA;AAFA;AAQA;AAIA;AACA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AAlBA;AALA;AA2BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAKA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAjDA;AADA;AAuDA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAPA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AAHA;AAPA;AAcA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAkBA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAXA;AAcA;AACA;AACA;AACA;AAOA;AACA;AAXA;AAcA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AA3BA;AAhFA;AAxFA;AANA;AAmNA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAMA;AACA;AACA;AAlBA;AADA;AAuBA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAVA;AAaA;AAnBA;AAwBA;AAAA;AAAA;AACA;AACA;AADA;AAKA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AARA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAnCA;AApBA;AApDA;AAiHA;AAEA;AACA;AAGA;AACA;AAKA;AAXA;AAcA;AAEA;AACA;AACA;AACA;AAKA;AATA;AAzWA;AAxBA;AAiZA;;;;AAl4DA;AACA;AADA;AAEA;AACA;AACA;AAHA;AADA;AAQA;AACA;AACA;AAHA;AACA;AACA;AA43DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC96DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAQA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAxBA;AA2BA;;;;AAnDA;AACA;AAqDA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AASA;AASA;AACA;AASA;AACA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAlBA;AAwBA;;;;AA7EA;AACA;AA+EA;;;;;;;;;;;AACA;AACA;AACA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AACA;AADA;AAQA;AAAA;AAAA;AAAA;AAAA;AAtBA;AAyBA;;;;AA5CA;AACA;AA8CA;;;;;;;;;;;AACA;AACA;AAMA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AASA;AASA;AACA;AASA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AAbA;AAmBA;;;;AAnEA;AACA;AAqEA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AADA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AATA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AAhBA;AAmBA;;;;AA1CA;AACA;AA4CA;;;AACA;AAAA;AACA;AADA;AACA;AADA;AAqEA;AAAA;AACA;AAtEA;AAwEA;AAAA;AACA;AAzEA;AAsKA;AACA;AADA;AAGA;AACA;AA1KA;AA4KA;AACA;AAGA;AACA;AA/KA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AASA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAAA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AACA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;;;AAeA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAwBA;AACA;AACA;AASA;AACA;AACA;AAHA;AAMA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAXA;AAeA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAgBA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAFA;AAFA;AAAA;AALA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AAKA;AANA;AADA;AAxBA;AADA;AACA;AAsCA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAKA;AANA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAFA;AAFA;AAAA;AALA;AArBA;AADA;AACA;AAsCA;AACA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAaA;AAbA;AAAA;AAgBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAjBA;AA6BA;AACA;AAAA;AACA;AAEA;AAGA;AAGA;AAPA;AAFA;AAgBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAVA;AAtDA;AAsEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AAJA;AATA;AAuBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AADA;AAtGA;AANA;AAmIA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAXA;AAaA;AAbA;AAAA;AAgBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAjBA;AA6BA;AACA;AAAA;AACA;AAEA;AAGA;AAGA;AAPA;AAFA;AAgBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AAVA;AAtDA;AAsEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AANA;AAJA;AATA;AAuBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AADA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AADA;AApGA;AANA;AAzIA;AA2QA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAXA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AATA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAOA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AARA;AAaA;AACA;AACA;AAGA;AAKA;AAVA;AAgBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAMA;AACA;AAIA;AAIA;AATA;AANA;AAFA;AAhCA;AADA;AAJA;AATA;AA4EA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AATA;AAtHA;AADA;AA4IA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAJA;AAYA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AALA;AAFA;AAbA;AA7IA;AA0KA;AACA;;;;AAv4BA;AACA;AAy4BA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9sCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AADA;AAFA;AAKA;AACA;;;AACA;AACA;AACA;AAQA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AADA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAVA;AAiBA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAVA;AAuBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AAJA;AAMA;AANA;AAQA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAZA;AAmBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAvBA;AADA;AADA;AADA;AAoCA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AADA;AALA;AA3DA;AADA;AA6EA;;;;AAvOA;AACA;AAyOA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;;;;;;;;;;AAYA;AACA;AAEA;;;AAEA;AACA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAFA;AAIA;AAAA;AACA;AADA;AAIA;;;;AApCA;AACA;AADA;AAEA;AAMA;AACA;AARA;AACA;AACA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AARA;AACA;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAeA;AACA;AAmBA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AAEA;AAQA;AAMA;AAIA;AACA;AAtEA;AAAA;AAAA;AACA;AA4EA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAJA;AAMA;AAPA;AAAA;AASA;AACA;AACA;AACA;AAHA;AATA;AAFA;AAfA;AAmCA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AADA;AACA;AArHA;AAAA;AAAA;AACA;AAgIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAJA;AAMA;AAPA;AAAA;AASA;AACA;AACA;AACA;AAHA;AATA;AAFA;AAfA;AAmCA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAAA;AADA;AACA;AASA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AAKA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAOA;AACA;AAeA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAnQA;AAAA;AAAA;AACA;AAsQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AAKA;AAPA;AAVA;AADA;AAwBA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAAA;AAWA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAAA;AAYA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AALA;AAQA;AACA;AACA;AAHA;AAXA;AADA;AADA;AAuBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AALA;AAQA;AACA;AACA;AAHA;AAXA;AADA;AADA;AAuBA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AALA;AAQA;AACA;AACA;AAHA;AAXA;AADA;AADA;AA9GA;AAuIA;AAAA;AAAA;AACA;AAIA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAFA;AANA;AAbA;AA0BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAbA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAbA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAOA;AAdA;AADA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAAA;AAAA;AACA;AAKA;AACA;AAGA;AAMA;AAhBA;AAkBA;AAlBA;AAPA;AAvBA;AAqDA;AA1HA;AA4HA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AACA;AAEA;AAHA;AAKA;AANA;AAWA;AAKA;AACA;AACA;AADA;AAjBA;AANA;AAJA;AAkCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AAAA;AAAA;AACA;AACA;AAEA;AAHA;AAKA;AANA;AAYA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AADA;AAjBA;AAqBA;AACA;AADA;AArBA;AARA;AATA;AAgDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AALA;AAUA;AAVA;AAYA;AAGA;AAGA;AACA;AACA;AACA;AAGA;AAIA;AAdA;AAfA;AAJA;AAnFA;AADA;AAiIA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAcA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAYA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAeA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AA7KA;AADA;AAnIA;AAxIA;AA2cA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAVA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAVA;AA3dA;AAyeA;;;;AA50BA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAYA;AADA;AACA;AACA;AAk0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACp2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;;;AAEA;AACA;AACA;AAEA;AAEA;;;AAEA;AACA;AAOA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAUA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AALA;AAeA;AAfA;AADA;AAHA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAMA;AACA;AAIA;AACA;AAdA;AAgBA;AACA;AACA;AAKA;AACA;AAIA;AACA;AAbA;AAtBA;AAsCA;AACA;AACA;AACA;AAHA;AAvCA;AA6CA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AARA;AAFA;AAkBA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AARA;AAPA;AADA;AAJA;AAyBA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AARA;AAPA;AADA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AALA;AAOA;AAAA;AAAA;AACA;AAEA;AAHA;AAKA;AAZA;AADA;AADA;AAPA;AADA;AA9BA;AA2DA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAEA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAlKA;AAwKA;;;;AAnbA;AACA;AAqbA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AATA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;;AC5dA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAPA;AASA;AACA;AAIA;AAQA;AACA;AAxCA;AACA;AA0CA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAIA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AADA;AAYA;;;;AA3HA;AACA;AADA;;;;;;;ACRA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AA5EA;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAqBA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAeA;;;AAGA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AAEA;;;AAGA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAGA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;;;;;;;AAOA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;;;;AAGA;AACA;AA6CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AAGA;AAaA;;;AAEA;AACA;AACA;;;AAEA;AACA;AAIA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA0BA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;AACA;AADA;AAxBA;AA4BA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAIA;AAVA;AAYA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AA1BA;AA8BA;AACA;AACA;AACA;AAEA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AADA;AAGA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AALA;AADA;AAtGA;AACA;AAkHA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAbA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAbA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AAGA;AACA;AALA;AAQA;AACA;AAAA;AACA;AAGA;AACA;AALA;AAQA;AA1BA;AA+BA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AALA;AAQA;AACA;AAAA;AACA;AAGA;AACA;AALA;AAXA;AAoBA;AAGA;AAAA;AACA;AADA;AAIA;AA5BA;AADA;AAmCA;AACA;;;;AA5bA;AACA;AA8bA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AAHA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;ACxdA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AARA;AAWA;;;;AAdA;AACA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;;;;;;;;;AAKA;AACA;AAMA;AAQA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAMA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAWA;;;;AArGA;AACA;AADA;AAEA;AADA;AACA;AAqGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AADA;AAKA;AACA;AAFA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAXA;AAFA;AA8BA;;;;AAhDA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AARA;AASA;AACA;;;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AADA;AAGA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AANA;AAaA;AACA;AACA;AACA;AAHA;AAbA;AAmBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAFA;AANA;AAaA;AACA;AACA;AACA;AAHA;AAbA;AA3BA;AAgDA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AACA;AACA;AAHA;AATA;AAgBA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAPA;AAWA;AACA;AACA;AACA;AAHA;AAXA;AAvBA;AAvDA;AARA;AA2GA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAWA;AAAA;AAAA;AACA;AADA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAdA;AAqBA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAeA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AAFA;AAKA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAcA;AAEA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAZA;AAtGA;AAsHA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAPA;AADA;AAvHA;AAJA;AA5GA;AAsPA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAQA;AACA;AACA;AAlBA;AAoBA;AAAA;AAAA;AACA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAzBA;AADA;AADA;AAJA;AAwCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AADA;AADA;AAPA;AAaA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAdA;AADA;AAJA;AA9CA;AAvPA;AAoUA;;;;AApeA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAIA;;;AAEA;AACA;AACA;AADA;AACA;AAFA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAKA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AACA;AADA;AAnBA;AAyBA;;;;AAnGA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AAqBA;;;AAEA;AACA;AACA;AAIA;AACA;AACA;;;AAEA;AACA;AAOA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AADA;AAXA;AAgBA;;;;AA3GA;AACA;AADA;AAEA;AACA;AAFA;AACA;AA2GA;AACA;AACA;;;;;;;;;;;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAOA;;;;AAnBA;AACA;AADA;AAEA;AADA;AACA;AAmBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;;;;;AAIA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AAEA;AACA;AACA;AAHA;AAMA;;;;AA5BA;AACA;AA8BA;AACA;AADA;AACA;AAGA;;;;A","sourceRoot":""}