{"version":3,"file":"asset.a49d1ef4814fce84e11f.js","sources":["webpack:///app/components/Utility/AssetImage.jsx","webpack:///app/components/Blockchain/Asset.jsx","webpack:///app/components/Utility/FormattedTime.jsx"],"sourcesContent":["import React from \"react\";\nimport AssetWrapper from \"./AssetWrapper\";\nimport PropTypes from \"prop-types\";\n\nclass AssetImage extends React.Component {\n    static propTypes = {\n        replaceNoneToBts: PropTypes.bool,\n        maxWidth: PropTypes.number\n    };\n\n    static defaultProps = {\n        replaceNoneToBts: true,\n        maxWidth: 20\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imgError: false\n        };\n    }\n\n    shouldComponentUpdate(np, ns) {\n        return (\n            this.props.asset !== np.asset ||\n            this.props.maxWidth !== np.maxWidth ||\n            this.props.whiteList !== np.whiteList ||\n            this.state.imgError !== ns.imgError\n        );\n    }\n\n    _onError(imgName) {\n        if (!this.state.imgError) {\n            if (this.props.replaceNoneToBts)\n                this.refs[\n                    imgName.toLowerCase()\n                ].src = `${__BASE_URL__}asset-symbols/bts.png`;\n            else this.refs[imgName.toLowerCase()].remove();\n            this.setState({\n                imgError: true\n            });\n        }\n    }\n\n    render() {\n        let {asset} = this.props;\n\n        function getImageName(asset) {\n            let symbol = asset.get(\"symbol\");\n            return symbol;\n            // if (symbol === \"OPEN.BTC\" || symbol === \"GDEX.BTC\") return symbol;\n            // if (symbol.startsWith(\"ESCROW.\")) return symbol;\n            // let imgName = asset.get(\"symbol\").split(\".\");\n            //return imgName.length === 2 ? imgName[1] : imgName[0];\n        }\n\n        const imgName = getImageName(asset);\n\n        return (\n            <img\n                ref={imgName.toLowerCase()}\n                className=\"column-hide-small\"\n                onError={this._onError.bind(this, imgName)}\n                style={{maxWidth: this.props.maxWidth, marginRight: 5}}\n                src={`${__BASE_URL__}asset-symbols/${imgName.toLowerCase()}.png`}\n            />\n        );\n    }\n}\n\nAssetImage = AssetWrapper(AssetImage);\n\nexport default class AssetImageWrapper extends React.Component {\n    render() {\n        return <AssetImage {...this.props} asset={this.props.name} />;\n    }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Translate from \"react-translate-component\";\nimport LinkToAccountById from \"../Utility/LinkToAccountById\";\nimport AssetWrapper from \"../Utility/AssetWrapper\";\nimport FormattedAsset from \"../Utility/FormattedAsset\";\nimport FormattedPrice from \"../Utility/FormattedPrice\";\nimport AssetImage from \"../Utility/AssetImage\";\nimport AssetName from \"../Utility/AssetName\";\nimport TimeAgo from \"../Utility/TimeAgo\";\nimport HelpContent from \"../Utility/HelpContent\";\nimport assetUtils from \"common/asset_utils\";\nimport utils from \"common/utils\";\nimport FormattedTime from \"../Utility/FormattedTime\";\nimport {ChainStore} from \"bitsharesjs\";\nimport {Apis} from \"bitsharesjs-ws\";\nimport {Tabs, Tab} from \"../Utility/Tabs\";\nimport {CallOrder, FeedPrice} from \"common/MarketClasses\";\nimport Page404 from \"../Page404/Page404\";\nimport FundFeePool from \"../Account/FundFeePool\";\nimport AccountStore from \"stores/AccountStore\";\nimport {connect} from \"alt-react\";\n\nclass AssetFlag extends React.Component {\n    render() {\n        let {isSet, name} = this.props;\n        if (!isSet) {\n            return <span />;\n        }\n\n        return (\n            <span className=\"asset-flag\">\n                <span className=\"label info\">\n                    <Translate content={\"account.user_issued_assets.\" + name} />\n                </span>\n            </span>\n        );\n    }\n}\n\n//-------------------------------------------------------------\nclass AssetPermission extends React.Component {\n    render() {\n        let {isSet, name} = this.props;\n\n        if (!isSet) {\n            return <span />;\n        }\n\n        return (\n            <span className=\"asset-flag\">\n                <span className=\"label info\">\n                    <Translate content={\"account.user_issued_assets.\" + name} />\n                </span>\n            </span>\n        );\n    }\n}\n\nclass Asset extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            callOrders: [],\n            marginTableSort: \"price\",\n            sortDirection: true\n        };\n    }\n\n    componentWillMount() {\n        if (this.props.asset.has(\"bitasset\")) {\n            const assets = {\n                [this.props.asset.get(\"id\")]: this.props.asset.toJS(),\n                [this.props.backingAsset.get(\n                    \"id\"\n                )]: this.props.backingAsset.toJS()\n            };\n\n            const isPredictionMarket = this.props.asset.getIn(\n                [\"bitasset\", \"is_prediction_market\"],\n                false\n            );\n            let sqr = this.props.asset.getIn([\n                \"bitasset\",\n                \"current_feed\",\n                \"maximum_short_squeeze_ratio\"\n            ]);\n            let settlePrice = this.props.asset.getIn([\n                \"bitasset\",\n                \"current_feed\",\n                \"settlement_price\"\n            ]);\n\n            /* Prediction markets don't need feeds for shorting, so the settlement price can be set to 1:1 */\n            if (\n                isPredictionMarket &&\n                settlePrice.getIn([\"base\", \"asset_id\"]) ===\n                    settlePrice.getIn([\"quote\", \"asset_id\"])\n            ) {\n                if (!assets[this.props.backingAsset.get(\"id\")])\n                    assets[this.props.backingAsset.get(\"id\")] = {\n                        precision: this.props.asset.get(\"precision\")\n                    };\n                settlePrice = settlePrice.setIn([\"base\", \"amount\"], 1);\n                settlePrice = settlePrice.setIn(\n                    [\"base\", \"asset_id\"],\n                    this.props.backingAsset.get(\"id\")\n                );\n                settlePrice = settlePrice.setIn([\"quote\", \"amount\"], 1);\n                settlePrice = settlePrice.setIn(\n                    [\"quote\", \"asset_id\"],\n                    this.props.asset.get(\"id\")\n                );\n                sqr = 1000;\n            }\n\n            try {\n                const feedPrice = new FeedPrice({\n                    priceObject: settlePrice,\n                    market_base: this.props.asset.get(\"id\"),\n                    sqr,\n                    assets\n                });\n\n                Apis.instance()\n                    .db_api()\n                    .exec(\"get_call_orders\", [this.props.asset.get(\"id\"), 300])\n                    .then(call_orders => {\n                        let callOrders = call_orders.map(c => {\n                            return new CallOrder(\n                                c,\n                                assets,\n                                this.props.asset.get(\"id\"),\n                                feedPrice,\n                                isPredictionMarket\n                            );\n                        });\n                        this.setState({callOrders});\n                    });\n            } catch (e) {\n                // console.log(err);\n            }\n        }\n    }\n\n    _toggleSortOrder(type) {\n        if (type !== this.state.marginTableSort) {\n            this.setState({\n                marginTableSort: type\n            });\n        } else {\n            this.setState({sortDirection: !this.state.sortDirection});\n        }\n    }\n\n    _assetType(asset) {\n        return \"bitasset\" in asset\n            ? asset.bitasset.is_prediction_market\n                ? \"Prediction\"\n                : \"Smart\"\n            : \"Simple\";\n    }\n\n    renderFlagIndicators(flags, names) {\n        return (\n            <div>\n                {names.map(name => {\n                    return (\n                        <AssetFlag\n                            key={`flag_${name}`}\n                            name={name}\n                            isSet={flags[name]}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    renderPermissionIndicators(permissions, names) {\n        return (\n            <div>\n                {names.map(name => {\n                    return (\n                        <AssetPermission\n                            key={`perm_${name}`}\n                            name={name}\n                            isSet={permissions[name]}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    formattedPrice(price, hide_symbols = false, hide_value = false) {\n        var base = price.base;\n        var quote = price.quote;\n        return (\n            <FormattedPrice\n                base_amount={base.amount}\n                base_asset={base.asset_id}\n                quote_amount={quote.amount}\n                quote_asset={quote.asset_id}\n                hide_value={hide_value}\n                hide_symbols={hide_symbols}\n            />\n        );\n    }\n\n    renderAuthorityList(authorities) {\n        return authorities.map(function(authority) {\n            return (\n                <span>\n                    {\" \"}\n                    <LinkToAccountById account={authority} />\n                </span>\n            );\n        });\n    }\n\n    renderMarketList(asset, markets) {\n        var symbol = asset.symbol;\n        return markets.map(\n            function(market) {\n                if (market == symbol) return null;\n                var marketID = market + \"_\" + symbol;\n                var marketName = market + \"/\" + symbol;\n                return (\n                    <span>\n                        <Link to={`/market/${marketID}`}>{marketName}</Link>{\" \"}\n                        &nbsp;\n                    </span>\n                );\n            }.bind(this)\n        );\n    }\n\n    renderAboutBox(asset, originalAsset) {\n        var issuer = ChainStore.getObject(asset.issuer, false, false);\n        var issuerName = issuer ? issuer.get(\"name\") : \"\";\n\n        // Add <a to any links included in the description\n        let description = assetUtils.parseDescription(\n            asset.options.description\n        );\n        let desc = description.main;\n        let short_name = description.short_name ? description.short_name : null;\n\n        let urlTest = /(http?):\\/\\/(www\\.)?[a-z0-9\\.:].*?(?=\\s)/g;\n\n        // Regexp needs a whitespace after a url, so add one to make sure\n        desc = desc && desc.length > 0 ? desc + \" \" : desc;\n        let urls = desc.match(urlTest);\n\n        // Add market link\n        const core_asset = ChainStore.getAsset(\"1.3.0\");\n        let preferredMarket = description.market\n            ? description.market\n            : core_asset\n                ? core_asset.get(\"symbol\")\n                : \"BTS\";\n        if (\"bitasset\" in asset && asset.bitasset.is_prediction_market) {\n            preferredMarket = ChainStore.getAsset(\n                asset.bitasset.options.short_backing_asset\n            );\n            if (preferredMarket) {\n                preferredMarket = preferredMarket.get(\"symbol\");\n            } else {\n                preferredMarket = core_asset.get(\"symbol\");\n            }\n        }\n        if (asset.symbol === core_asset.get(\"symbol\")) preferredMarket = \"USD\";\n        if (urls && urls.length) {\n            urls.forEach(url => {\n                let markdownUrl = `<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"${url}\">${url}</a>`;\n                desc = desc.replace(url, markdownUrl);\n            });\n        }\n\n        let {name, prefix} = utils.replaceName(originalAsset);\n\n        return (\n            <div style={{overflow: \"visible\"}}>\n                <h2>\n                    <AssetImage\n                        maxWidth={50}\n                        replaceNoneToBts={false}\n                        name={asset.symbol}\n                    />\n                    {short_name ? (\n                        <span style={{marginRight: 15}}>{short_name}</span>\n                    ) : null}\n                    <Link\n                        className=\"button market-button\"\n                        to={`/market/${asset.symbol}_${preferredMarket}`}\n                    >\n                        <Translate content=\"exchange.market\" />\n                    </Link>\n                </h2>\n                <HelpContent\n                    path={\"assets/\" + asset.symbol}\n                    alt_path=\"assets/Asset\"\n                    section=\"summary\"\n                    symbol={(prefix || \"\") + name}\n                    description={desc}\n                    issuer={issuerName}\n                    hide_issuer=\"true\"\n                />\n            </div>\n        );\n    }\n\n    renderSummary(asset) {\n        // TODO: confidential_supply: 0 USD   [IF NOT ZERO OR NOT DISABLE CONFIDENTIAL]\n        let dynamic = this.props.getDynamicObject(asset.dynamic_asset_data_id);\n        if (dynamic) dynamic = dynamic.toJS();\n        var options = asset.options;\n\n        let flagBooleans = assetUtils.getFlagBooleans(\n            asset.options.flags,\n            this.props.asset.has(\"bitasset_data_id\")\n        );\n\n        let bitNames = Object.keys(flagBooleans);\n\n        var currentSupply = dynamic ? (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.summary.current_supply\" />{\" \"}\n                </td>\n                <td>\n                    {\" \"}\n                    <FormattedAsset\n                        amount={dynamic.current_supply}\n                        asset={asset.id}\n                    />{\" \"}\n                </td>\n            </tr>\n        ) : null;\n\n        var stealthSupply = dynamic ? (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.summary.stealth_supply\" />{\" \"}\n                </td>\n                <td>\n                    {\" \"}\n                    <FormattedAsset\n                        amount={dynamic.confidential_supply}\n                        asset={asset.id}\n                    />{\" \"}\n                </td>\n            </tr>\n        ) : null;\n\n        var marketFee = flagBooleans[\"charge_market_fee\"] ? (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.summary.market_fee\" />{\" \"}\n                </td>\n                <td> {options.market_fee_percent / 100.0} % </td>\n            </tr>\n        ) : null;\n\n        // options.max_market_fee initially a string\n        var maxMarketFee = flagBooleans[\"charge_market_fee\"] ? (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.summary.max_market_fee\" />{\" \"}\n                </td>\n                <td>\n                    {\" \"}\n                    <FormattedAsset\n                        amount={+options.max_market_fee}\n                        asset={asset.id}\n                    />{\" \"}\n                </td>\n            </tr>\n        ) : null;\n\n        return (\n            <div className=\"asset-card no-padding\">\n                <div className=\"card-divider\">\n                    <AssetName name={asset.symbol} />\n                </div>\n                <table className=\"table key-value-table table-hover\">\n                    <tbody>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.summary.asset_type\" />{\" \"}\n                            </td>\n                            <td> {this._assetType(asset)} </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.summary.issuer\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                <LinkToAccountById\n                                    account={asset.issuer}\n                                />{\" \"}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.assets.precision\" />{\" \"}\n                            </td>\n                            <td> {asset.precision} </td>\n                        </tr>\n                        {currentSupply}\n                        {stealthSupply}\n                        {marketFee}\n                        {maxMarketFee}\n                    </tbody>\n                </table>\n                <br />\n                {this.renderFlagIndicators(flagBooleans, bitNames)}\n            </div>\n        );\n    }\n\n    renderPriceFeed(asset, sortedCallOrders) {\n        var title = <Translate content=\"explorer.asset.price_feed.title\" />;\n        var bitAsset = asset.bitasset;\n        if (!(\"current_feed\" in bitAsset)) return <div header={title} />;\n        var currentFeed = bitAsset.current_feed;\n\n        /*\n        console.log(\n            \"force settlement delay: \" +\n                bitAsset.options.force_settlement_delay_sec\n        );\n        console.log(\n            \"force settlement offset: \" +\n                bitAsset.options.force_settlement_offset_percent\n        );\n        */\n\n        let settlementDelay = bitAsset.options.force_settlement_delay_sec;\n        let settlementOffset = bitAsset.options.force_settlement_offset_percent;\n\n        var globalSettlementPrice = this.getGlobalSettlementPrice();\n\n        return (\n            <div className=\"asset-card no-padding\">\n                <div className=\"card-divider\">{title}</div>\n\n                <table\n                    className=\"table key-value-table table-hover\"\n                    style={{padding: \"1.2rem\"}}\n                >\n                    <tbody>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.settlement_price\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {this.formattedPrice(\n                                    currentFeed.settlement_price\n                                )}{\" \"}\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.maintenance_collateral_ratio\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {currentFeed.maintenance_collateral_ratio /\n                                    10}%{\" \"}\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.maximum_short_squeeze_ratio\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {currentFeed.maximum_short_squeeze_ratio /\n                                    10}%{\" \"}\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.global_settlement_price\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {globalSettlementPrice\n                                    ? globalSettlementPrice\n                                    : \"-\"}{\" \"}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n\n                <table\n                    className=\"table key-value-table table-hover\"\n                    style={{marginTop: \"2rem\"}}\n                >\n                    <tbody>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.settlement_delay\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                <FormattedTime time={settlementDelay} />{\" \"}\n                            </td>\n                        </tr>\n\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.price_feed.force_settlement_offset\" />{\" \"}\n                            </td>\n                            <td> {settlementOffset / 100}% </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n    renderFeePool(asset) {\n        let dynamic = this.props.getDynamicObject(asset.dynamic_asset_data_id);\n        if (dynamic) dynamic = dynamic.toJS();\n        var options = asset.options;\n        return (\n            <div className=\"asset-card no-padding\">\n                <div className=\"card-divider\">\n                    {<Translate content=\"explorer.asset.fee_pool.title\" />}\n                </div>\n                <table\n                    className=\"table key-value-table\"\n                    style={{padding: \"1.2rem\"}}\n                >\n                    <tbody>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.fee_pool.core_exchange_rate\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {this.formattedPrice(\n                                    options.core_exchange_rate\n                                )}{\" \"}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.fee_pool.pool_balance\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {dynamic ? (\n                                    <FormattedAsset\n                                        asset=\"1.3.0\"\n                                        amount={dynamic.fee_pool}\n                                    />\n                                ) : null}{\" \"}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {\" \"}\n                                <Translate content=\"explorer.asset.fee_pool.unclaimed_issuer_income\" />{\" \"}\n                            </td>\n                            <td>\n                                {\" \"}\n                                {dynamic ? (\n                                    <FormattedAsset\n                                        asset={asset.id}\n                                        amount={dynamic.accumulated_fees}\n                                    />\n                                ) : null}{\" \"}\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <FundFeePool\n                    asset={asset.symbol}\n                    funderAccountName={this.props.currentAccount}\n                    hideBalance\n                />\n            </div>\n        );\n    }\n\n    // TODO: Blacklist Authorities: <Account list like Voting>\n    // TODO: Blacklist Market: Base/Market, Base/Market\n    renderPermissions(asset) {\n        //var dynamic = asset.dynamic;\n\n        var options = asset.options;\n\n        let permissionBooleans = assetUtils.getFlagBooleans(\n            asset.options.issuer_permissions,\n            this.props.asset.has(\"bitasset_data_id\")\n        );\n\n        let bitNames = Object.keys(permissionBooleans);\n\n        // options.blacklist_authorities = [\"1.2.3\", \"1.2.4\"];\n        // options.whitelist_authorities = [\"1.2.1\", \"1.2.2\"];\n        // options.blacklist_markets = [\"JPY\", \"RUB\"];\n        // options.whitelist_markets = [\"USD\", \"EUR\", \"GOLD\"];\n\n        // options.max_market_fee initially a string\n        var maxMarketFee = permissionBooleans[\"charge_market_fee\"] ? (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.permissions.max_market_fee\" />{\" \"}\n                </td>\n                <td>\n                    {\" \"}\n                    <FormattedAsset\n                        amount={+options.max_market_fee}\n                        asset={asset.id}\n                    />{\" \"}\n                </td>\n            </tr>\n        ) : null;\n\n        // options.max_supply initially a string\n        var maxSupply = (\n            <tr>\n                <td>\n                    {\" \"}\n                    <Translate content=\"explorer.asset.permissions.max_supply\" />{\" \"}\n                </td>\n                <td>\n                    {\" \"}\n                    <FormattedAsset\n                        amount={+options.max_supply}\n                        asset={asset.id}\n                    />{\" \"}\n                </td>\n            </tr>\n        );\n\n        var whiteLists = permissionBooleans[\"white_list\"] ? (\n            <span>\n                <br />\n                <Translate content=\"explorer.asset.permissions.blacklist_authorities\" />:\n                &nbsp;{this.renderAuthorityList(options.blacklist_authorities)}\n                <br />\n                <Translate content=\"explorer.asset.permissions.blacklist_markets\" />:\n                &nbsp;{this.renderMarketList(asset, options.blacklist_markets)}\n                <br />\n                <Translate content=\"explorer.asset.permissions.whitelist_authorities\" />:\n                &nbsp;{this.renderAuthorityList(options.whitelist_authorities)}\n                <br />\n                <Translate content=\"explorer.asset.permissions.whitelist_markets\" />:\n                &nbsp;{this.renderMarketList(asset, options.whitelist_markets)}\n            </span>\n        ) : null;\n\n        return (\n            <div className=\"asset-card no-padding\">\n                <div className=\"card-divider\">\n                    {<Translate content=\"explorer.asset.permissions.title\" />}{\" \"}\n                </div>\n                <table\n                    className=\"table key-value-table table-hover\"\n                    style={{padding: \"1.2rem\"}}\n                >\n                    <tbody>\n                        {maxMarketFee}\n                        {maxSupply}\n                    </tbody>\n                </table>\n\n                <br />\n                {this.renderPermissionIndicators(permissionBooleans, bitNames)}\n                <br />\n\n                {/*whiteLists*/}\n            </div>\n        );\n    }\n\n    // return a sorted list of call orders\n    getMarginPositions() {\n        const {sortDirection} = this.state;\n\n        let sortFunctions = {\n            name: function(a, b) {\n                let nameA = ChainStore.getAccount(a.borrower, false);\n                if (nameA) nameA = nameA.get(\"name\");\n                let nameB = ChainStore.getAccount(b.borrower, false);\n                if (nameB) nameB = nameB.get(\"name\");\n                if (nameA > nameB) return sortDirection ? 1 : -1;\n                if (nameA < nameB) return sortDirection ? -1 : 1;\n                return 0;\n            },\n            price: function(a, b) {\n                return (\n                    (sortDirection ? 1 : -1) *\n                    (a.call_price.toReal() - b.call_price.toReal())\n                );\n            },\n            collateral: function(a, b) {\n                return (\n                    (sortDirection ? 1 : -1) *\n                    (b.getCollateral().getAmount() -\n                        a.getCollateral().getAmount())\n                );\n            },\n            debt: function(a, b) {\n                return (\n                    (sortDirection ? 1 : -1) *\n                    (b.amountToReceive().getAmount() -\n                        a.amountToReceive().getAmount())\n                );\n            },\n            ratio: function(a, b) {\n                return (sortDirection ? 1 : -1) * (a.getRatio() - b.getRatio());\n            }\n        };\n\n        return this.state.callOrders.sort(\n            sortFunctions[this.state.marginTableSort]\n        );\n    }\n\n    // the global settlement price is defined as the\n    // the price at which the least collateralized short\n    // 's collateral no longer enough to back the debt\n    // he/she owes. If the feed price goes above this,\n    // then\n    getGlobalSettlementPriceFromSorted(sortedCallOrders) {\n        console.log(\"global settlement sorted called\");\n        // first get the least collateralized short position\n        if (!sortedCallOrders || sortedCallOrders.length <= 0) {\n            console.log(\"length array 0 passed in\");\n            return null;\n        }\n        console.log(\"sortedCallOrders exists according to sorted get globa\");\n\n        let leastColShort = sortedCallOrders[0];\n\n        // this price will happen when the CR is 1.\n        // The CR is 1 iff collateral / (debt x feed_ price) == 1\n        // Rearranging, this means that the CR is 1 iff\n        // feed_price == collateral / debt\n        let debt = leastColShort.amountToReceive().getAmount();\n        let collateral = leastColShort.getCollateral().getAmount();\n\n        return (\n            <FormattedPrice\n                base_amount={collateral}\n                base_asset={leastColShort.call_price.base.asset_id}\n                quote_amount={debt}\n                quote_asset={leastColShort.call_price.quote.asset_id}\n            />\n        );\n    }\n\n    // the global settlement price is defined as the\n    // the price at which the least collateralized short\n    // 's collateral no longer enough to back the debt\n    // he/she owes. If the feed price goes above this,\n    // then\n    getGlobalSettlementPrice() {\n        var call_orders;\n        if (!this.state.callOrders) {\n            return null;\n        } else {\n            // put the call order on the stack\n            call_orders = this.state.callOrders;\n        }\n\n        // first get the least collateralized short position\n        var leastColShort = null;\n        var leastColShortRatio = null;\n        var len = this.state.callOrders.length;\n        for (var i = 0; i < len; i++) {\n            let call_order = this.state.callOrders[i];\n\n            if (leastColShort == null) {\n                leastColShort = call_order;\n                leastColShortRatio = call_order.getRatio();\n            } else if (call_order.getRatio() < leastColShortRatio) {\n                leastColShortRatio = call_order.getRatio();\n                leastColShort = call_order;\n            }\n        }\n\n        if (leastColShort == null) {\n            // couldn't find the least colshort?\n            console.log(\"couldn't find the least col short\");\n            return null;\n        }\n\n        // this price will happen when the CR is 1.\n        // The CR is 1 iff collateral / (debt x feed_ price) == 1\n        // Rearranging, this means that the CR is 1 iff\n        // feed_price == collateral / debt\n        let debt = leastColShort.amountToReceive().getAmount();\n        let collateral = leastColShort.getCollateral().getAmount();\n        let globalSettlementPrice = collateral / debt;\n\n        return (\n            <FormattedPrice\n                base_amount={collateral}\n                base_asset={leastColShort.call_price.base.asset_id}\n                quote_amount={debt}\n                quote_asset={leastColShort.call_price.quote.asset_id}\n            />\n        );\n    }\n\n    // return two tabs\n    // one tab is for the price feed data from the\n    // witness for the given asset\n    // the other tab is a list of the margin positions\n    // for this asset (if it's a bitasset)\n    renderPriceFeedData(asset, sortedCallOrders) {\n        // first we compute the price feed tab\n        var bitAsset = asset.bitasset;\n        if (\n            !(\"feeds\" in bitAsset) ||\n            bitAsset.feeds.length == 0 ||\n            bitAsset.is_prediction_market\n        ) {\n            return null;\n        }\n\n        let now = new Date().getTime();\n        let oldestValidDate = new Date(\n            now - asset.bitasset.options.feed_lifetime_sec * 1000\n        );\n\n        // Filter by valid feed lifetime, Sort by published date\n        var feeds = bitAsset.feeds;\n        feeds = feeds\n            .filter(a => {\n                return new Date(a[1][0]) > oldestValidDate;\n            })\n            .sort(function(feed1, feed2) {\n                return new Date(feed2[1][0]) - new Date(feed1[1][0]);\n            });\n\n        if (!feeds.length) {\n            return null;\n        }\n\n        var rows = [];\n        var settlement_price_header = feeds[0][1][1].settlement_price;\n        var core_exchange_rate_header = feeds[0][1][1].core_exchange_rate;\n        let header = (\n            <thead>\n                <tr>\n                    <th style={{textAlign: \"left\"}}>\n                        {\" \"}\n                        <Translate content=\"explorer.asset.price_feed_data.publisher\" />{\" \"}\n                    </th>\n                    <th>\n                        <Translate content=\"explorer.asset.price_feed_data.settlement_price\" />\n                        <br />\n                        ({this.formattedPrice(\n                            settlement_price_header,\n                            false,\n                            true\n                        )})\n                    </th>\n                    <th>\n                        <Translate content=\"explorer.asset.price_feed_data.core_exchange_rate\" />\n                        <br />\n                        ({this.formattedPrice(\n                            core_exchange_rate_header,\n                            false,\n                            true\n                        )})\n                    </th>\n                    <th>\n                        {\" \"}\n                        <Translate content=\"explorer.asset.price_feed_data.maintenance_collateral_ratio\" />{\" \"}\n                    </th>\n                    <th>\n                        {\" \"}\n                        <Translate content=\"explorer.asset.price_feed_data.maximum_short_squeeze_ratio\" />{\" \"}\n                    </th>\n                    <th>\n                        {\" \"}\n                        <Translate content=\"explorer.asset.price_feed_data.published\" />{\" \"}\n                    </th>\n                </tr>\n            </thead>\n        );\n        for (var i = 0; i < feeds.length; i++) {\n            var feed = feeds[i];\n            var publisher = feed[0];\n            var publishDate = new Date(feed[1][0] + \"Z\");\n            var settlement_price = feed[1][1].settlement_price;\n            var core_exchange_rate = feed[1][1].core_exchange_rate;\n            var maintenance_collateral_ratio =\n                \"\" + feed[1][1].maintenance_collateral_ratio / 10 + \"%\";\n            var maximum_short_squeeze_ratio =\n                \"\" + feed[1][1].maximum_short_squeeze_ratio / 10 + \"%\";\n            rows.push(\n                <tr key={publisher}>\n                    <td>\n                        {\" \"}\n                        <LinkToAccountById account={publisher} />{\" \"}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {this.formattedPrice(settlement_price, true)}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {\" \"}\n                        {this.formattedPrice(core_exchange_rate, true)}{\" \"}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {\" \"}\n                        {maintenance_collateral_ratio}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        {\" \"}\n                        {maximum_short_squeeze_ratio}\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        <TimeAgo time={publishDate} />\n                    </td>\n                </tr>\n            );\n        }\n\n        // now we compute the margin position tab\n        let header2 = (\n            <thead>\n                <tr>\n                    <th\n                        className=\"clickable\"\n                        onClick={this._toggleSortOrder.bind(this, \"name\")}\n                        style={{textAlign: \"left\"}}\n                    >\n                        <Translate content=\"transaction.borrower\" />\n                    </th>\n                    <th\n                        className=\"clickable\"\n                        onClick={this._toggleSortOrder.bind(this, \"collateral\")}\n                    >\n                        <Translate content=\"transaction.collateral\" />\n                        {this.state.callOrders.length ? (\n                            <span>\n                                &nbsp;(<FormattedAsset\n                                    amount={this.state.callOrders[0]\n                                        .getCollateral()\n                                        .getAmount()}\n                                    asset={\n                                        this.state.callOrders[0].getCollateral()\n                                            .asset_id\n                                    }\n                                    hide_amount\n                                />{\" \"}\n                                )\n                            </span>\n                        ) : null}\n                    </th>\n                    <th\n                        className=\"clickable\"\n                        onClick={this._toggleSortOrder.bind(this, \"debt\")}\n                    >\n                        <Translate content=\"transaction.borrow_amount\" />\n                        {this.state.callOrders.length ? (\n                            <span>\n                                &nbsp;(<FormattedAsset\n                                    amount={this.state.callOrders[0]\n                                        .amountToReceive()\n                                        .getAmount()}\n                                    asset={\n                                        this.state.callOrders[0].amountToReceive()\n                                            .asset_id\n                                    }\n                                    hide_amount\n                                />{\" \"}\n                                )\n                            </span>\n                        ) : null}\n                    </th>\n                    <th style={{paddingRight: 10}} className=\"clickable\">\n                        <span\n                            onClick={this._toggleSortOrder.bind(this, \"price\")}\n                        >\n                            <Translate content=\"exchange.call\" />\n                        </span>\n                        {this.state.callOrders.length ? (\n                            <span>\n                                &nbsp;(<FormattedPrice\n                                    base_amount={\n                                        this.state.callOrders[0].call_price.base\n                                            .amount\n                                    }\n                                    base_asset={\n                                        this.state.callOrders[0].call_price.base\n                                            .asset_id\n                                    }\n                                    quote_amount={\n                                        this.state.callOrders[0].call_price\n                                            .quote.amount\n                                    }\n                                    quote_asset={\n                                        this.state.callOrders[0].call_price\n                                            .quote.asset_id\n                                    }\n                                    hide_value\n                                    noPopOver\n                                />)\n                            </span>\n                        ) : null}\n                    </th>\n                    <th>\n                        <Translate content=\"borrow.coll_ratio_target\" />\n                    </th>\n                    <th\n                        className=\"clickable\"\n                        onClick={this._toggleSortOrder.bind(this, \"ratio\")}\n                    >\n                        <Translate content=\"borrow.coll_ratio\" />\n                    </th>\n                </tr>\n            </thead>\n        );\n\n        let rows2 = sortedCallOrders.map(c => {\n            return (\n                <tr className=\"margin-row\" key={c.id}>\n                    <td>\n                        <LinkToAccountById account={c.borrower} />\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        <FormattedAsset\n                            amount={c.getCollateral().getAmount()}\n                            asset={c.getCollateral().asset_id}\n                            hide_asset\n                        />\n                    </td>\n                    <td style={{textAlign: \"right\"}}>\n                        <FormattedAsset\n                            amount={c.amountToReceive().getAmount()}\n                            asset={c.amountToReceive().asset_id}\n                            hide_asset\n                        />\n                    </td>\n                    <td style={{textAlign: \"right\", paddingRight: 10}}>\n                        <FormattedPrice\n                            base_amount={c.call_price.base.amount}\n                            base_asset={c.call_price.base.asset_id}\n                            quote_amount={c.call_price.quote.amount}\n                            quote_asset={c.call_price.quote.asset_id}\n                            hide_symbols\n                        />\n                    </td>\n                    <td style={{textAlign: \"right\", paddingRight: 10}}>\n                        {!!c.order.target_collateral_ratio\n                            ? (c.order.target_collateral_ratio / 1000).toFixed(\n                                  3\n                              )\n                            : \"-\"}\n                    </td>\n                    <td className={c.getStatus()} style={{textAlign: \"right\"}}>\n                        {c.getRatio().toFixed(3)}\n                    </td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className=\"grid-block\">\n                <div className=\"grid-content no-padding\">\n                    <div className=\"\">\n                        <Tabs\n                            defaultActiveTab={0}\n                            segmented={false}\n                            setting=\"bitassetDataTabs\"\n                        >\n                            <Tab title=\"explorer.asset.price_feed_data.title\">\n                                <div className=\"responsive-table\">\n                                    <table\n                                        className=\" table order-table table-hover\"\n                                        style={{padding: \"1.2rem\"}}\n                                    >\n                                        {header}\n                                        <tbody>{rows}</tbody>\n                                    </table>\n                                </div>\n                            </Tab>\n\n                            <Tab title=\"explorer.asset.margin_positions.title\">\n                                <table\n                                    className=\" table order-table table-hover\"\n                                    style={{padding: \"1.2rem\"}}\n                                >\n                                    {header2}\n                                    <tbody>{rows2}</tbody>\n                                </table>\n                            </Tab>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        var asset = this.props.asset.toJS();\n        var sortedCallOrders = this.getMarginPositions();\n        var priceFeed =\n            \"bitasset\" in asset\n                ? this.renderPriceFeed(asset, sortedCallOrders)\n                : null;\n        var priceFeedData =\n            \"bitasset\" in asset\n                ? this.renderPriceFeedData(asset, sortedCallOrders)\n                : null;\n\n        return (\n            <div className=\"grid-container\">\n                <div className=\"grid-block page-layout\">\n                    <div className=\"grid-block main-content wrap regular-padding\">\n                        <div\n                            className=\"grid-block small-up-1\"\n                            style={{width: \"100%\"}}\n                        >\n                            {this.renderAboutBox(asset, this.props.asset)}\n                        </div>\n                        <div className=\"grid-block small-up-1 medium-up-2\">\n                            <div className=\"grid-content\">\n                                {this.renderSummary(asset)}\n                            </div>\n                            <div className=\"grid-content\">\n                                {priceFeed\n                                    ? priceFeed\n                                    : this.renderPermissions(asset)}\n                            </div>\n                        </div>\n                        <div className=\"grid-block small-up-1 medium-up-2\">\n                            <div className=\"grid-content\">\n                                {this.renderFeePool(asset)}\n                            </div>\n                            <div className=\"grid-content\">\n                                {priceFeed\n                                    ? this.renderPermissions(asset)\n                                    : null}\n                            </div>\n                        </div>\n                        {priceFeedData ? priceFeedData : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAsset = connect(\n    Asset,\n    {\n        listenTo() {\n            return [AccountStore];\n        },\n        getProps() {\n            const chainID = Apis.instance().chain_id;\n            return {\n                currentAccount:\n                    AccountStore.getState().currentAccount ||\n                    AccountStore.getState().passwordAccount\n            };\n        }\n    }\n);\n\nAsset = AssetWrapper(Asset, {\n    propNames: [\"backingAsset\"]\n});\n\nclass AssetContainer extends React.Component {\n    render() {\n        if (this.props.asset === null) {\n            return <Page404 subtitle=\"asset_not_found_subtitle\" />;\n        }\n        let backingAsset = this.props.asset.has(\"bitasset\")\n            ? this.props.asset.getIn([\n                  \"bitasset\",\n                  \"options\",\n                  \"short_backing_asset\"\n              ])\n            : \"1.3.0\";\n        return <Asset {...this.props} backingAsset={backingAsset} />;\n    }\n}\nAssetContainer = AssetWrapper(AssetContainer, {\n    withDynamic: true\n});\n\nexport default class AssetSymbolSplitter extends React.Component {\n    render() {\n        let symbol = this.props.match.params.symbol.toUpperCase();\n        return <AssetContainer {...this.props} asset={symbol} />;\n    }\n}\n","import React from \"react\";\n\n// a class to display time nicely when given seconds\n// for example, display\n\n// expects the number of seconds as a property\n\nclass FormattedTime extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {time: props.time};\n    }\n\n    // given an integer seconds as an argument,\n    // return the number of hours\n    getHours(secs) {\n        //console.log(\"get hours called with: \" + secs);\n        return secs / 3600;\n    }\n\n    render() {\n        return <div>{this.getHours(this.state.time)}h</div>;\n    }\n}\n\nexport default FormattedTime;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;AAWA;AAAA;AACA;AADA;AACA;AAEA;AACA;AADA;AAHA;AAMA;AACA;;;AACA;AACA;AAMA;;;AAEA;AACA;AACA;AAKA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;AAhEA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAFA;AACA;AACA;AA2DA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;;;;AAHA;AACA;AADA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;;;;AAdA;AACA;AAgBA;AACA;AACA;AADA;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AADA;AAMA;;;;AAfA;AACA;AAiBA;;;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAMA;AAIA;AAKA;AACA;AAKA;AACA;AAKA;AAEA;AADA;AAGA;AACA;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAIA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AAKA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AATA;AAYA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AATA;AAYA;;;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAKA;AAEA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCA;AAAA;AAAA;AACA;AA2CA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AATA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAjBA;AA4BA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AALA;AACA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AALA;AACA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AACA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AALA;AACA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAEA;AAJA;AALA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAOA;AACA;AACA;AACA;AA9BA;AADA;AAkCA;AACA;AAvCA;AA0CA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AAJA;AALA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAHA;AALA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAHA;AALA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AAJA;AALA;AAtCA;AAJA;AAyDA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AALA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAZA;AAJA;AA5DA;AAuFA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AAJA;AALA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAPA;AALA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAIA;AAPA;AALA;AA5BA;AAJA;AAiDA;AACA;AACA;AACA;AAHA;AArDA;AA4DA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AALA;AACA;AAcA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AALA;AALA;AACA;AAcA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AACA;AALA;AAMA;AACA;AACA;AARA;AASA;AACA;AACA;AAXA;AAYA;AAZA;AACA;AAeA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAJA;AAUA;AACA;AACA;AAhBA;AAqBA;AACA;AACA;AACA;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AAhCA;AACA;AAkCA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAHA;AAAA;AASA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAHA;AAAA;AASA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AA/BA;AADA;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AADA;AApBA;AAyBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAIA;AARA;AASA;AAVA;AAAA;AANA;AAqBA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAIA;AARA;AASA;AAVA;AAAA;AANA;AAqBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AAIA;AAIA;AAIA;AAIA;AACA;AAlBA;AADA;AAAA;AAPA;AA+BA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AApFA;AADA;AACA;AA8FA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AAAA;AAAA;AACA;AADA;AAOA;AAAA;AAAA;AACA;AADA;AAlCA;AAuCA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AADA;AADA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AALA;AADA;AAjBA;AADA;AADA;AADA;AAkCA;;;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAJA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAUA;AA3BA;AADA;AADA;AAkCA;;;;AA3lCA;AACA;AA6lCA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAKA;AAXA;AACA;AAcA;AACA;AADA;AACA;AAGA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;;;;AAbA;AACA;AAcA;AACA;AADA;AACA;AAGA;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;AAJA;AACA;AADA;;;;;;;;;;;;;;;;;;;ACjsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AACA;AAEA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;;;AADA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AAhBA;AACA;AAkBA;;;;A","sourceRoot":""}